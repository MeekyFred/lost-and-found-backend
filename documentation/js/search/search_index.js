var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.438,1,2.438]],["body/guards/AccessTokenGuard.html",[0,2.838,1,2.838,2,2.311,3,0.14,4,0.124,5,0.124,6,4.902,7,3.996,8,2.585,9,0.438,10,5.445,11,4.99,12,0.225,13,1.275,14,1.811,15,4.902,16,2.71,17,4.381,18,1.962,19,2.585,20,4.868,21,3.986,22,4.383,23,0.659,24,3,25,1.651,26,0.018,27,1.2,28,0.451,29,1.256,30,3.774,31,4.383,32,3,33,2.64,34,3.076,35,5.175,36,5.214,37,3.276,38,1.507,39,2.189,40,2.189,41,4.381,42,3,43,0.927,44,1.863,45,0.471,46,1.146,47,1.691,48,0.927,49,3,50,2.585,51,1.808,52,1.808,53,2.311,54,1.944,55,3,56,2.311,57,2.585,58,2.311,59,2.311,60,1.944,61,0.14,62,0.076,63,2.311,64,0.884,65,2.311,66,1.155,67,4.381,68,2.426,69,3,70,3,71,3,72,3,73,2.107,74,1.962,75,4.381,76,2.689,77,0.729,78,2.838,79,3.774,80,5.69,81,2.741,82,2.741,83,2.189,84,1.533,85,4.381,86,1.59,87,3.375,88,1.05,89,3,90,3,91,2.585,92,1.59,93,3,94,1.335,95,1.002,96,3,97,3,98,2.311,99,3,100,2.585,101,3,102,3,103,3,104,3,105,3,106,0.01,107,0.01]],["title/controllers/AppController.html",[108,1.685,109,2.643]],["body/controllers/AppController.html",[3,0.228,4,0.202,5,0.202,9,0.608,12,0.365,13,1.772,23,0.621,26,0.018,38,1.418,43,1.287,45,0.459,46,1.079,61,0.228,62,0.123,64,0.983,76,2.301,94,1.484,106,0.014,107,0.014,108,2.726,109,4.275,110,2.181,111,4.196,112,5.993,113,1.238,114,3.42,115,6.088,116,4.87,117,3.943,118,4.689,119,4.275,120,5.245,121,4.87,122,3.943,123,3.943,124,1.238,125,4.001,126,4.196,127,3.155,128,3.155,129,2.071,130,4.87]],["title/modules/AppModule.html",[131,1.522,132,2.643]],["body/modules/AppModule.html",[1,2.991,3,0.151,4,0.134,5,0.134,7,2.266,9,0.323,26,0.018,28,0.281,45,0.517,46,0.715,47,1.819,51,1.944,52,1.944,54,2.091,61,0.151,62,0.082,68,1.129,95,1.078,106,0.01,107,0.01,109,3.787,110,2.068,125,3.904,126,2.78,131,2.519,132,5.206,133,1.612,134,1.612,135,1.819,136,1.819,137,2.694,138,3.04,139,1.819,140,2.78,141,2.78,142,2.78,143,3.904,144,4.197,145,4.197,146,3.433,147,3.904,148,2.603,149,1.819,150,1.612,151,2.486,152,3.979,153,3.979,154,3.493,155,3.979,156,5.886,157,4.618,158,2.266,159,2.78,160,2.266,161,1.525,162,3.227,163,3.227,164,2.78,165,3.227,166,3.227,167,3.227,168,3.227,169,3.227,170,2.78,171,3.243,172,3.227,173,4.618,174,3.227,175,4.618,176,3.227,177,3.557,178,3.227,179,4.154,180,2.78,181,2.486,182,3.979,183,3.227,184,3.227,185,3.227,186,3.227,187,5.393,188,3.227,189,2.486,190,3.227,191,3.227,192,3.227,193,2.78,194,3.227,195,3.227,196,3.227,197,3.227,198,3.227,199,1.71,200,3.227,201,2.782,202,3.227,203,3.227,204,3.227,205,3.227,206,3.227,207,2.091,208,3.227,209,3.227,210,3.227,211,2.78,212,2.78,213,2.091,214,2.78]],["title/injectables/AppService.html",[48,0.796,125,2.267]],["body/injectables/AppService.html",[3,0.254,4,0.225,5,0.225,12,0.407,13,1.894,23,0.692,26,0.017,38,1.581,43,1.376,45,0.375,46,1.203,48,1.376,61,0.254,62,0.137,94,1.654,106,0.015,107,0.015,112,6.222,118,4.182,119,3.812,120,4.678,125,3.92,215,2.195,216,4.678,217,5.429]],["title/controllers/AuthController.html",[108,1.685,218,2.643]],["body/controllers/AuthController.html",[3,0.144,4,0.127,5,0.127,9,0.706,11,3.131,12,0.231,13,1.298,14,2.402,23,0.669,25,1.422,26,0.018,27,1.034,28,0.556,29,1.083,38,1.528,45,0.474,46,0.988,50,2.648,60,1.991,61,0.144,62,0.078,64,0.62,68,1.076,77,1.764,84,1.561,88,1.076,94,1.599,95,2.041,106,0.01,107,0.01,108,2.35,110,1.377,113,1.333,117,3.729,122,3.729,123,3.729,124,0.781,127,1.991,128,3.399,129,2.231,150,2.228,218,3.131,219,2.648,220,2.159,221,3.131,222,3.435,223,2.643,224,4.459,225,5.665,226,4.459,227,3.074,228,4.058,229,3.074,230,4.434,231,4.521,232,5.265,233,3.131,234,3.074,235,3.074,236,2.622,237,3.074,238,3.959,239,3.074,240,3.074,241,4.363,242,3.074,243,3.842,244,3.131,245,3.842,246,3.435,247,3.161,248,3.074,249,2.159,250,2.159,251,3.074,252,3.685,253,2.159,254,3.074,255,2.159,256,3.074,257,2.648,258,2.368,259,2.648,260,3.161,261,2.648,262,1.852,263,1.852,264,3.074,265,3.074,266,3.074,267,3.074,268,1.997,269,3.074,270,3.074,271,3.074,272,3.074,273,3.074,274,3.074,275,2.648,276,3.074]],["title/modules/AuthModule.html",[131,1.522,143,2.267]],["body/modules/AuthModule.html",[3,0.184,4,0.163,5,0.163,9,0.395,26,0.018,45,0.512,46,0.875,51,2.379,52,2.379,54,2.557,61,0.184,62,0.1,106,0.012,107,0.012,110,2.379,131,2.71,133,1.972,134,1.972,135,2.225,136,2.225,137,1.972,138,3.384,139,3.384,143,4.494,147,3.2,148,2.994,149,2.225,150,1.972,154,2.557,155,3.401,159,3.401,164,3.401,211,3.401,212,3.401,213,2.557,214,3.401,218,4.215,222,4.092,260,4.494,261,3.401,277,3.401,278,3.401,279,3.401,280,3.798,281,4.471,282,4.158,283,3.948,284,3.73,285,3.441,286,3.948,287,3.041,288,3.73,289,3.948,290,3.948,291,3.948,292,3.948,293,3.948]],["title/injectables/AuthService.html",[48,0.796,260,2.267]],["body/injectables/AuthService.html",[3,0.154,4,0.136,5,0.136,9,0.594,12,0.247,13,1.364,14,2.443,16,2.099,18,2.661,23,0.757,25,1.74,26,0.018,27,1.265,28,0.475,29,1.324,33,3.931,38,1.899,45,0.434,46,0.73,47,1.857,48,0.991,61,0.154,62,0.083,64,0.946,66,1.804,76,2.214,77,1.814,84,1.64,88,1.153,94,1.662,106,0.011,107,0.011,150,2.341,215,1.332,221,3.29,222,3.61,223,2.687,225,5.783,228,3.931,230,5.025,232,5.119,236,2.725,241,4.348,243,5.119,245,4.037,246,3.61,247,3.58,258,2.537,259,2.838,260,2.823,282,4.044,284,3.29,285,2.134,294,2.838,295,3.349,296,3.294,297,3.634,298,3.294,299,4.037,300,3.294,301,3.294,302,4.686,303,4.686,304,3.294,305,3.294,306,2.838,307,3.294,308,2.537,309,3.294]],["title/guards/AuthenticationGuard.html",[0,2.438,171,2.643]],["body/guards/AuthenticationGuard.html",[0,3.093,1,4.382,2,4.885,3,0.158,4,0.14,5,0.14,7,2.376,10,4.114,12,0.254,13,1.39,14,1.937,15,5.827,16,2.947,18,2.139,23,0.608,25,1.523,26,0.018,27,1.108,28,0.416,29,1.16,30,4.114,31,4.632,34,2.376,36,2.915,38,1.39,39,2.386,45,0.467,46,1.226,48,1.01,57,2.915,61,0.158,62,0.086,63,2.606,64,1.328,68,2.104,74,2.84,77,1.344,81,2.53,82,2.53,83,2.386,84,1.184,88,1.184,94,1.031,95,1.849,106,0.011,107,0.011,158,2.376,170,2.915,171,3.353,255,2.376,257,2.915,310,2.915,311,0.785,312,4.776,313,4.776,314,4.776,315,3.383,316,6.764,317,3.383,318,3.383,319,3.353,320,3.679,321,2.915,322,4.776,323,3.383,324,3.383,325,3.383,326,5.18,327,3.383,328,3.383,329,3.383,330,3.383,331,3.383,332,3.383,333,3.383,334,3.383,335,2.192,336,3.383,337,3.383,338,3.383,339,2.915,340,2.606,341,3.383,342,3.383,343,3.383,344,3.383,345,3.383,346,1.907,347,3.383,348,1.907,349,4.776,350,3.383,351,3.383,352,3.383,353,3.383]],["title/injectables/BcryptProvider.html",[48,0.796,288,2.643]],["body/injectables/BcryptProvider.html",[3,0.183,4,0.162,5,0.162,9,0.392,12,0.294,13,1.539,14,2.41,23,0.674,25,1.686,26,0.018,27,1.227,28,0.461,29,1.284,38,1.539,39,3.199,43,1.534,45,0.413,46,0.869,48,1.118,61,0.183,62,0.099,63,3.021,68,2.094,81,2.077,82,2.077,88,2.094,94,1.951,106,0.012,107,0.012,199,3.392,215,1.586,223,2.652,280,2.801,288,3.713,295,2.981,354,3.378,355,5.288,356,4.555,357,5.288,358,4.555,359,4.555,360,4.555,361,5.934,362,5.76,363,3.921,364,1.344,365,4.555,366,3.921,367,5.517,368,3.378,369,3.378,370,5.983,371,3.921,372,3.378,373,3.921,374,5.288,375,3.921,376,3.921,377,3.378,378,4.555,379,3.921,380,3.378]],["title/entities/Claim.html",[381,2.121,382,1.685]],["body/entities/Claim.html",[3,0.163,4,0.144,5,0.144,9,0.487,12,0.261,23,0.869,26,0.018,28,0.616,44,2.073,45,0.459,61,0.163,62,0.088,64,1.474,77,1.613,84,1.219,95,1.628,106,0.011,107,0.011,113,1.733,129,2.391,207,2.257,311,1.131,335,3.946,381,3.434,382,2.871,383,3.002,384,4.332,385,4.332,386,3.949,387,2.063,388,3.007,389,4.332,390,3.484,391,4.875,392,4.2,393,3.484,394,3.533,395,4.332,396,3.484,397,3.755,398,4.692,399,3.227,400,3.484,401,1.419,402,4.332,403,3.484,404,3.002,405,4.875,406,3.484,407,4.502,408,4.692,409,3.484,410,4.332,411,3.484,412,4.332,413,2.657,414,4.875,415,4.2,416,2.684,417,3.484,418,3.002,419,2.257,420,2.447,421,3.484]],["title/controllers/ClaimsController.html",[108,1.685,422,2.643]],["body/controllers/ClaimsController.html",[3,0.109,4,0.097,5,0.097,9,0.702,12,0.175,13,1.056,14,2.228,23,0.567,25,1.418,26,0.018,27,1.259,28,0.555,29,1.08,37,3.179,38,1.673,44,1.543,45,0.44,46,0.804,60,1.513,61,0.109,62,0.059,64,0.471,66,2.212,68,1.556,73,4.035,78,2.35,84,1.27,88,1.556,94,1.355,95,2.003,106,0.008,107,0.008,108,1.992,110,1.046,113,1.13,114,1.64,117,3.248,122,3.248,123,3.248,124,0.922,127,1.513,128,2.881,129,1.891,220,1.64,223,2.451,233,1.64,236,2.222,238,3.722,244,2.547,247,2.186,249,1.64,250,3.812,252,2.547,253,1.64,262,1.407,263,1.407,268,2.431,346,3.239,382,3.295,387,1.331,399,1.922,422,2.547,423,2.012,424,3.927,425,3.628,426,3.628,427,3.125,428,2.336,429,4.123,430,1.799,431,2.505,432,2.336,433,3.426,434,2.794,435,2.336,436,4.426,437,4.426,438,2.387,439,3.447,440,4.426,441,2.336,442,4.235,443,2.336,444,4.035,445,1.799,446,1.798,447,2.336,448,2.186,449,2.336,450,4.035,451,2.012,452,2.012,453,1.799,454,2.336,455,3.125,456,2.794,457,2.794,458,1.317,459,2.012,460,2.186,461,2.012,462,0.945,463,2.68,464,2.012,465,2.336,466,2.336,467,3.426,468,2.336,469,2.336,470,3.628,471,1.237,472,1.714,473,1.237,474,1.64,475,2.336,476,2.336,477,2.336,478,2.336,479,2.012,480,2.012,481,2.336]],["title/modules/ClaimsModule.html",[131,1.522,144,2.438]],["body/modules/ClaimsModule.html",[3,0.215,4,0.191,5,0.191,26,0.018,45,0.497,46,1.019,61,0.215,62,0.116,106,0.013,107,0.013,110,2.63,131,2.616,133,2.299,134,2.299,135,2.594,136,2.594,137,2.299,138,3.647,139,3.647,144,4.846,146,3.814,148,3.311,149,2.594,150,2.299,154,3.804,160,3.231,161,2.174,382,2.061,422,4.542,463,4.597,464,3.964,482,3.964,483,4.602,484,3.964,485,3.964,486,4.602,487,3.964,488,4.602,489,3.545,490,4.602]],["title/injectables/ClaimsService.html",[48,0.796,463,2.267]],["body/injectables/ClaimsService.html",[3,0.121,4,0.107,5,0.107,9,0.568,12,0.194,13,1.141,14,2.294,16,1.755,18,1.755,23,0.674,25,1.686,26,0.018,27,1.226,28,0.461,29,1.284,33,3.604,37,1.852,38,1.741,39,2.989,44,1.667,45,0.462,46,1.049,48,0.829,61,0.121,62,0.065,64,0.791,66,1.823,68,1.657,74,2.679,81,1.369,82,1.369,83,2.641,84,2.175,86,2.509,88,1.657,92,2.509,94,1.443,106,0.009,107,0.009,161,1.221,201,3.745,213,2.539,215,1.045,223,2.524,295,2.21,346,2.21,364,0.996,382,3.152,387,2.195,388,2.544,401,1.379,413,1.221,424,3.503,429,3.681,431,2.839,442,3.604,446,1.915,448,3.185,458,1.457,459,2.226,460,1.557,462,1.045,463,2.362,471,2.077,473,2.077,487,2.226,491,2.226,492,3.02,493,3.02,494,3.02,495,2.226,496,3.169,497,4.736,498,2.98,499,2.584,500,3.92,501,2.584,502,3.02,503,2.584,504,1.755,505,3.02,506,2.584,507,2.539,508,3.02,509,3.02,510,3.185,511,1.674,512,1.457,513,1.991,514,1.991,515,2.584,516,1.457,517,2.854,518,4.736,519,2.584,520,1.991,521,1.991,522,3.02,523,2.584,524,3.068,525,3.068,526,1.814,527,3.377,528,2.226,529,1.991,530,2.584,531,2.753,532,2.584,533,2.584,534,1.991]],["title/classes/CreateClaimDto.html",[62,0.095,429,2.438]],["body/classes/CreateClaimDto.html",[3,0.208,4,0.185,5,0.185,9,0.637,12,0.335,23,0.568,26,0.018,28,0.502,45,0.398,61,0.208,62,0.146,64,1.286,95,1.923,106,0.013,107,0.013,113,1.134,118,5.189,124,1.134,268,2.578,311,1.335,364,1.463,382,2.578,386,4.476,388,2.864,394,3.748,419,3.729,429,3.729,438,2.472,535,1.359,536,4.96,537,3.843,538,2.216,539,2.216,540,4.435,541,2.688,542,3.729,543,5.492,544,5.492,545,3.843,546,4.461,547,3.05,548,3.469,549,3.05,550,1.359,551,4.96]],["title/classes/CreateItemDto.html",[62,0.095,516,2.121]],["body/classes/CreateItemDto.html",[3,0.102,4,0.091,5,0.091,9,0.732,12,0.164,23,0.773,26,0.018,27,1.358,28,0.605,29,1.175,40,2.794,43,1.555,45,0.364,61,0.102,62,0.122,64,1.424,77,0.837,95,2.272,106,0.008,107,0.008,113,1.541,119,4.258,124,0.556,129,2.489,268,3.109,311,0.8,364,0.876,388,3.126,394,3.191,399,2.26,408,3.729,438,2.731,516,1.944,535,0.667,538,1.328,539,1.328,540,2.657,541,3.526,542,4.497,543,3.676,544,3.676,545,1.886,547,3.213,548,2.078,549,3.101,550,1.3,551,2.971,552,5.375,553,1.687,554,4.11,555,3.676,556,3.676,557,2.996,558,3.676,559,2.19,560,2.19,561,2.19,562,5.266,563,4.536,564,2.19,565,2.19,566,4.841,567,6.064,568,3.449,569,4.841,570,2.19,571,2.19,572,2.19,573,3.449,574,2.657,575,2.19,576,2.19,577,4.841,578,2.19,579,2.19,580,2.19,581,2.19,582,2.764,583,2.19,584,2.19,585,2.422,586,2.657,587,1.418,588,2.358,589,3.449,590,1.911,591,1.687,592,1.687,593,1.538,594,4.267,595,3.287,596,3.287,597,3.449,598,2.971,599,1.687,600,3.449,601,2.19,602,3.449]],["title/classes/CreateUserDto.html",[62,0.095,603,2.121]],["body/classes/CreateUserDto.html",[3,0.15,4,0.133,5,0.133,9,0.621,12,0.241,23,0.748,26,0.018,27,1.545,28,0.512,43,1.441,45,0.371,61,0.15,62,0.136,64,1.453,76,2.173,77,1.816,106,0.01,107,0.01,113,1.492,124,0.816,199,3.529,311,1.067,348,3.646,364,1.169,401,1.883,438,2.718,535,0.978,538,1.771,539,1.771,540,3.543,547,3.293,549,3.293,550,1.401,588,2.63,591,2.472,592,2.472,595,3.543,596,4.141,603,2.593,604,5.355,605,2.472,606,3.147,607,4.632,608,5.059,609,2.765,610,3.209,611,4.632,612,2.765,613,3.209,614,2.765,615,5.059,616,3.963,617,3.963,618,3.963,619,3.963,620,3.963,621,3.963,622,3.963,623,3.963,624,3.209,625,5.059,626,2.765,627,3.209,628,3.543,629,2.765,630,3.963,631,3.543,632,3.963,633,3.543,634,2.765]],["title/injectables/CreateUserProvider.html",[48,0.796,635,2.267]],["body/injectables/CreateUserProvider.html",[3,0.153,4,0.135,5,0.135,9,0.466,12,0.245,13,1.357,14,1.901,16,2.087,18,2.087,23,0.594,25,1.487,26,0.018,27,1.081,28,0.406,29,1.132,33,2.808,34,2.296,38,1.357,44,1.39,45,0.463,46,1.033,47,1.843,48,0.986,61,0.153,62,0.083,64,0.941,66,1.259,68,1.144,74,2.652,77,1.716,81,1.732,82,1.732,83,2.714,84,2.278,86,2.469,88,1.901,92,2.469,94,0.996,106,0.011,107,0.011,161,1.545,199,2.469,201,3.568,215,1.322,223,2.091,236,1.633,247,1.97,280,3.548,284,2.296,285,2.118,308,2.518,413,1.545,431,2.714,458,1.843,498,3.338,507,2.118,510,3.273,511,2.118,517,1.97,520,3.59,521,4.184,522,4.184,524,2.118,525,3.019,526,3.273,603,3.775,606,2.566,635,2.808,636,4.68,637,2.817,638,4.016,639,2.817,640,4.184,641,3.269,642,4.016,643,3.269,644,2.296,645,2.296,646,3.269,647,2.518,648,5.432,649,3.269,650,3.269,651,4.016,652,3.269,653,3.269,654,3.269,655,4.016,656,4.016,657,2.817,658,3.269,659,3.269,660,3.269,661,3.269,662,4.68,663,3.269,664,3.269]],["title/interfaces/ErrorResponse.html",[665,1.88,666,2.643]],["body/interfaces/ErrorResponse.html",[3,0.249,4,0.221,5,0.221,12,0.4,26,0.017,28,0.603,43,1.579,61,0.249,74,3.214,76,3.391,106,0.015,107,0.015,311,1.493,401,2.012,665,2.663,666,4.518,667,3.453,668,4.592,669,4.106,670,6.184]],["title/injectables/FindOneUserByEmailProvider.html",[48,0.796,671,2.267]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.171,4,0.152,5,0.152,9,0.504,12,0.274,13,1.468,14,2.02,16,1.639,18,2.786,23,0.643,25,1.609,26,0.018,27,1.17,28,0.44,29,1.225,34,2.569,37,1.729,38,1.468,39,2.52,43,1.221,44,2.145,45,0.451,46,1.117,48,1.067,61,0.171,62,0.093,64,0.738,66,1.942,74,2.259,77,1.831,83,2.52,84,1.765,86,1.938,88,1.281,92,1.938,94,1.115,106,0.011,107,0.011,161,1.729,201,2.205,215,1.48,223,2.222,284,2.569,319,3.542,348,3.897,413,1.729,498,3.507,510,3.039,511,2.37,517,2.205,524,2.37,525,2.37,531,2.569,606,3.328,640,4.446,644,2.569,647,2.819,651,3.152,655,3.152,656,4.345,657,3.152,671,3.748,672,4.973,673,3.152,674,4.345,675,5.044,676,4.345,677,3.659,678,3.659,679,4.345,680,3.659,681,5.044,682,3.152,683,3.659]],["title/injectables/GenerateTokensProvider.html",[48,0.796,281,2.438]],["body/injectables/GenerateTokensProvider.html",[3,0.155,4,0.137,5,0.137,9,0.331,11,4.183,12,0.248,13,1.37,14,2.287,16,2.107,18,2.107,19,2.854,20,5.035,21,4.215,22,4.588,23,0.697,25,1.9,26,0.018,27,1.269,28,0.519,29,1.328,38,1.734,45,0.452,46,0.734,47,1.867,48,0.995,51,1.996,52,1.996,54,2.146,61,0.155,62,0.084,64,0.949,65,2.552,66,2.293,68,2.085,77,1.587,87,4.846,88,1.647,94,1.433,106,0.011,107,0.011,215,1.34,223,2.516,236,2.351,281,3.048,287,2.552,295,2.652,340,4.588,369,5.132,401,1.903,418,2.854,606,1.565,684,5.132,685,2.854,686,6.536,687,4.705,688,4.705,689,3.313,690,4.705,691,3.313,692,4.705,693,5.42,694,3.859,695,3.313,696,4.053,697,5.471,698,2.854,699,4.053,700,1.996,701,2.854,702,2.854,703,3.313,704,2.552,705,4.053,706,2.854,707,2.854,708,2.854,709,2.854,710,2.854,711,2.854,712,3.313,713,4.053,714,3.313,715,3.313,716,2.854,717,2.854,718,2.854,719,3.313,720,3.313]],["title/classes/GetClaimsBaseDto.html",[62,0.095,721,2.643]],["body/classes/GetClaimsBaseDto.html",[3,0.186,4,0.165,5,0.165,9,0.397,12,0.298,23,0.767,26,0.018,28,0.525,29,1.679,43,1.129,45,0.464,61,0.186,62,0.163,106,0.012,107,0.012,113,1.531,124,1.01,129,2.856,311,1.238,364,1.531,386,4.716,394,2.666,407,4.23,416,3.062,424,3.898,442,2.395,446,2.796,462,1.607,504,2.698,535,1.211,538,2.319,539,2.319,548,3.215,550,1.626,587,2.575,588,2.39,590,2.883,721,4.23,722,4.521,723,2.106,724,3.215,725,5.786,726,3.062,727,3.975,728,3.424,729,3.975,730,3.975,731,3.975,732,3.215,733,2.521,734,2.106,735,3.424,736,2.395,737,2.106,738,2.106]],["title/classes/GetClaimsParamDto.html",[62,0.095,450,2.643]],["body/classes/GetClaimsParamDto.html",[3,0.218,4,0.193,5,0.193,9,0.592,12,0.35,23,0.594,26,0.018,28,0.567,45,0.45,61,0.218,62,0.165,64,1.314,66,2.28,106,0.013,107,0.013,113,1.185,124,1.185,311,1.374,382,3.067,387,2.693,401,1.895,424,3.86,438,2.513,439,3.138,450,4.159,472,2.798,535,1.421,550,1.421,585,4.159,590,2.652,722,4.159,739,3.274,740,3.592,741,3.592,742,3.592,743,3.274,744,4.562]],["title/classes/GetClaimsQueryDto.html",[62,0.095,442,2.267]],["body/classes/GetClaimsQueryDto.html",[3,0.207,4,0.184,5,0.184,9,0.444,26,0.018,43,0.939,45,0.481,61,0.207,62,0.17,106,0.013,107,0.013,124,1.128,129,2.44,364,1.616,386,4.029,394,2.217,407,4.029,416,3.419,424,3.235,442,3.457,446,2.571,462,1.795,504,2.848,535,1.352,538,2.448,539,2.448,548,3.457,550,1.748,587,2.875,588,2.57,590,3.011,721,4.465,722,3.116,723,2.351,724,2.674,725,4.944,732,3.831,733,3.005,734,2.351,735,3.824,736,3.457,737,3.04,738,3.04]],["title/classes/GetItemsBaseDto.html",[62,0.095,745,2.643]],["body/classes/GetItemsBaseDto.html",[3,0.167,4,0.148,5,0.148,9,0.357,12,0.268,23,0.825,26,0.018,28,0.564,29,1.749,40,2.481,43,1.05,45,0.447,61,0.167,62,0.156,106,0.011,107,0.011,113,1.645,124,0.909,129,2.752,311,1.152,364,1.449,394,3.5,446,2.912,462,1.446,504,2.554,535,1.09,538,2.196,539,2.196,548,3.436,550,1.513,554,4.545,557,4.005,574,3.825,582,3.694,586,3.825,587,2.317,588,2.224,590,3,593,2.512,599,2.755,723,1.895,724,2.991,726,2.755,728,4.278,732,2.991,733,2.346,734,1.895,736,2.155,737,3.768,738,1.895,745,4.005,746,4.704,747,3.577,748,3.577,749,5.308,750,3.577,751,3.577,752,3.577,753,3.577,754,3.577,755,2.155]],["title/classes/GetItemsParamDto.html",[62,0.095,756,2.643]],["body/classes/GetItemsParamDto.html",[3,0.218,4,0.193,5,0.193,9,0.592,12,0.35,23,0.594,26,0.018,28,0.567,45,0.45,61,0.218,62,0.165,64,1.314,66,2.28,106,0.013,107,0.013,113,1.185,124,1.185,311,1.374,382,2.652,387,2.693,388,2.519,401,1.895,438,2.513,439,3.138,472,2.798,535,1.421,550,1.421,585,4.159,590,2.652,737,3.628,739,3.274,740,3.592,741,3.592,742,3.592,743,3.274,744,4.562,746,4.159,756,4.159]],["title/classes/GetItemsQueryDto.html",[62,0.095,755,2.267]],["body/classes/GetItemsQueryDto.html",[3,0.198,4,0.175,5,0.175,9,0.423,26,0.018,40,2.116,43,0.896,45,0.474,61,0.198,62,0.167,106,0.013,107,0.013,124,1.076,129,2.366,364,1.58,394,3.299,446,2.773,462,1.712,504,2.784,535,1.29,538,2.393,539,2.393,548,3.745,550,1.696,554,3.908,557,2.973,574,3.262,582,3.605,586,4.287,587,2.743,588,2.492,590,3.153,593,2.973,599,3.262,723,2.243,724,2.551,732,3.745,733,2.937,734,2.243,736,3.353,737,3.498,738,2.948,745,4.365,746,2.973,749,4.794,755,3.353]],["title/classes/GetUsersBaseDto.html",[62,0.095,757,2.643]],["body/classes/GetUsersBaseDto.html",[3,0.216,4,0.192,5,0.192,9,0.462,12,0.347,23,0.589,26,0.018,27,1.636,28,0.403,29,1.431,43,1.246,45,0.448,61,0.216,62,0.164,106,0.013,107,0.013,113,1.175,124,1.175,311,1.367,364,1.648,446,2.383,462,1.871,504,2.904,535,1.409,538,2.497,539,2.497,550,1.409,588,2.639,590,2.639,723,2.451,724,3.55,726,3.563,732,3.55,733,2.784,734,2.451,736,2.787,738,2.451,757,4.554,758,4.138,759,4.249,760,4.626,761,2.787]],["title/classes/GetUsersParamDto.html",[62,0.095,762,2.899]],["body/classes/GetUsersParamDto.html",[3,0.218,4,0.193,5,0.193,9,0.592,12,0.35,23,0.594,26,0.018,28,0.567,43,1.253,45,0.45,61,0.218,62,0.165,64,1.314,77,1.663,106,0.013,107,0.013,113,1.185,124,1.185,311,1.374,387,2.693,401,1.357,438,2.513,439,3.138,472,2.798,504,2.652,535,1.421,550,1.421,585,4.159,590,2.652,739,3.274,740,3.592,741,3.592,742,3.592,743,3.274,744,4.562,758,4.159,759,4.126,762,4.562]],["title/classes/GetUsersQueryDto.html",[62,0.095,761,2.267]],["body/classes/GetUsersQueryDto.html",[3,0.224,4,0.199,5,0.199,9,0.48,26,0.018,27,1.4,43,1.016,45,0.456,61,0.224,62,0.167,106,0.014,107,0.014,124,1.221,364,1.677,446,1.942,462,1.942,504,2.955,535,1.464,538,2.541,539,2.541,550,1.464,588,2.703,590,2.703,723,2.545,724,2.894,732,3.976,733,3.118,734,2.545,736,3.636,738,3.197,757,4.634,758,3.373,759,4.171,761,3.636]],["title/injectables/HashingProvider.html",[48,0.796,280,1.994]],["body/injectables/HashingProvider.html",[3,0.214,4,0.19,5,0.19,9,0.459,12,0.344,13,1.707,23,0.747,25,1.87,26,0.018,27,1.36,28,0.511,29,1.424,38,1.707,39,3.401,43,1.581,45,0.317,46,1.017,48,1.24,61,0.214,62,0.116,106,0.013,107,0.013,215,1.856,280,3.106,295,3.305,356,5.051,358,5.566,359,5.051,360,3.954,361,6.198,362,5.566,364,1.642,365,5.051,763,3.954,764,5.863,765,7.313,766,4.59,767,4.59]],["title/interfaces/IActiveUser.html",[665,1.88,700,2.267]],["body/interfaces/IActiveUser.html",[3,0.254,4,0.225,5,0.225,12,0.407,26,0.017,28,0.567,43,1.473,61,0.254,77,1.318,106,0.015,107,0.015,311,1.509,387,1.992,401,2.028,606,3.412,665,2.713,667,3.517,700,3.92,704,5.563,768,4.678,769,4.678]],["title/entities/Item.html",[381,2.121,388,1.6]],["body/entities/Item.html",[3,0.131,4,0.116,5,0.116,9,0.587,12,0.21,13,0.814,23,0.892,26,0.018,27,1.152,28,0.646,29,1.009,40,2.747,43,1.442,44,1.768,45,0.406,61,0.131,62,0.071,95,1.836,106,0.009,107,0.009,113,1.799,129,2.111,207,1.81,311,0.964,335,3.991,381,3.099,382,3,385,3.824,387,1.822,388,2.499,389,3.824,392,3.582,394,3.275,395,3.824,397,5.05,398,5.587,399,3.842,401,1.21,402,3.824,404,2.407,408,4.235,410,3.824,412,5.16,413,2.346,415,3.582,419,1.81,420,1.962,554,3.486,555,4.277,556,4.277,557,3.486,558,4.277,582,3.807,593,1.962,770,2.407,771,5.873,772,5.873,773,5.647,774,2.794,775,4.157,776,4.157,777,2.794,778,2.794,779,2.794,780,2.794,781,2.794,782,2.794,783,4.157,784,2.794,785,2.794,786,2.794,787,2.794,788,2.794,789,2.794,790,3.582,791,2.407,792,2.794,793,2.794,794,2.794,795,2.794,796,2.794,797,2.794]],["title/controllers/ItemsController.html",[108,1.685,798,2.643]],["body/controllers/ItemsController.html",[3,0.093,4,0.083,5,0.083,9,0.708,12,0.15,13,0.934,14,2.263,23,0.586,25,1.467,26,0.018,27,1.247,28,0.564,29,1.117,37,3.219,38,1.709,44,1.364,45,0.429,46,0.711,60,1.295,61,0.093,62,0.051,64,0.404,66,2.174,68,1.609,73,4.122,78,2.979,84,1.123,88,1.609,94,1.401,95,2.076,106,0.007,107,0.007,108,1.8,110,0.895,113,1.169,114,1.404,117,3.482,122,3.262,123,3.262,124,0.815,127,1.295,128,2.979,129,1.956,220,1.404,223,2.49,233,2.253,236,2.298,238,3.803,244,2.253,247,2.771,249,1.404,250,3.536,252,2.822,253,1.404,262,1.205,263,1.205,268,2.407,346,3.309,387,1.177,388,3.111,399,1.7,427,2.764,430,1.54,431,2.298,433,3.095,434,2.472,436,4.522,437,4.522,438,2.373,439,3.426,440,4.522,444,3.774,445,1.54,446,1.625,448,1.933,451,1.723,452,1.723,453,1.54,455,2.764,456,2.472,457,2.472,458,1.127,460,1.933,461,1.723,462,0.809,467,3.543,471,1.059,472,1.516,473,1.059,474,1.404,479,1.723,480,1.723,516,3.414,737,3.753,755,3.826,756,3.774,798,2.253,799,1.723,800,3.209,801,3.209,802,3.209,803,2,804,3.209,805,2,806,2,807,5.035,808,2,809,2,810,2,811,2,812,2,813,3.924,814,1.723,815,3.543,816,3.462,817,2,818,4.866,819,2.472,820,1.54,821,2.421,822,1.723,823,2,824,2,825,2,826,2,827,4.019,828,2,829,2,830,2,831,2,832,2,833,2,834,2]],["title/modules/ItemsModule.html",[131,1.522,145,2.438]],["body/modules/ItemsModule.html",[3,0.215,4,0.191,5,0.191,26,0.018,45,0.497,46,1.019,61,0.215,62,0.116,106,0.013,107,0.013,110,2.63,131,2.616,133,2.299,134,2.299,135,2.594,136,2.594,137,2.299,138,3.647,139,3.647,145,4.846,146,3.814,148,3.311,149,2.594,150,2.299,154,3.804,160,3.231,161,2.174,388,1.957,489,3.545,798,4.542,821,4.597,822,3.964,835,3.964,836,4.602,837,3.964,838,3.964,839,4.602,840,3.964,841,4.602,842,4.602]],["title/injectables/ItemsService.html",[48,0.796,821,2.267]],["body/injectables/ItemsService.html",[3,0.103,4,0.091,5,0.091,9,0.56,12,0.165,13,1.009,14,2.321,16,1.552,18,1.552,23,0.673,25,1.685,26,0.018,27,1.225,28,0.46,29,1.282,33,3.662,37,1.638,38,1.769,39,3.036,44,1.474,45,0.451,46,0.949,48,0.733,61,0.103,62,0.056,64,0.699,66,1.87,68,1.7,74,2.722,81,1.167,82,1.167,83,2.639,84,2.239,86,2.573,88,1.848,92,2.573,94,1.305,106,0.008,107,0.008,161,1.041,201,3.855,213,2.245,215,0.891,223,2.553,295,1.954,346,1.954,364,0.881,387,2.058,388,3.128,401,1.247,413,1.041,431,2.931,446,1.732,448,2.927,458,1.242,460,1.328,462,0.891,471,1.836,473,1.836,492,2.67,493,2.67,494,2.67,495,1.898,496,2.971,498,2.738,502,2.67,504,1.552,505,2.67,507,2.245,508,2.67,509,3.3,510,3.182,511,1.427,512,1.242,513,1.697,514,1.697,516,3.161,517,2.927,520,1.697,521,1.697,522,3.3,524,3.147,525,3.147,526,1.547,527,2.986,528,1.898,529,1.697,531,2.434,534,1.697,737,3.108,755,3.379,813,3.633,815,2.67,819,2.67,820,1.697,821,2.088,840,1.898,843,1.898,844,4.284,845,2.203,846,3.466,847,2.203,848,2.203,849,2.203,850,3.466,851,2.203,852,2.203,853,4.284,854,2.203,855,2.203,856,2.203,857,2.203,858,2.203,859,2.203,860,3.466,861,2.203,862,3.466,863,2.203,864,3.466,865,2.203,866,3.466,867,2.203,868,3.466,869,2.203,870,3.466,871,2.203,872,3.466,873,2.203,874,2.203]],["title/classes/LoginDto.html",[62,0.095,228,2.267]],["body/classes/LoginDto.html",[3,0.192,4,0.17,5,0.17,9,0.679,12,0.309,23,0.696,26,0.018,28,0.569,43,1.53,45,0.377,61,0.192,62,0.138,64,1.409,77,1.757,95,2.181,106,0.012,107,0.012,113,1.388,124,1.046,199,3.775,228,3.29,268,2.924,311,1.267,364,1.388,438,2.655,535,1.254,538,2.102,539,2.102,541,3.29,542,3.537,547,3.247,549,3.247,550,1.254,588,2.446,606,3.461,628,4.207,631,4.207,633,4.207,875,3.545,876,5.461,877,4.115,878,4.115,879,4.115,880,4.115]],["title/injectables/LoginProvider.html",[48,0.796,282,2.267]],["body/injectables/LoginProvider.html",[3,0.155,4,0.137,5,0.137,9,0.471,12,0.249,13,1.372,14,1.917,16,2.67,18,2.11,20,5.182,21,4.219,22,4.592,23,0.6,25,1.503,26,0.018,27,1.093,28,0.411,29,1.144,38,1.372,40,2.736,45,0.483,46,1.044,47,1.871,48,0.996,51,2,52,2,54,2.15,61,0.155,62,0.084,64,1.203,65,2.557,66,1.278,68,2.086,74,1.486,77,1.448,81,1.758,82,1.758,83,2.354,84,1.649,86,1.758,87,2.557,88,1.649,92,1.758,94,1.011,106,0.011,107,0.011,199,2.496,215,1.342,223,2.109,228,3.94,230,4.592,236,1.658,258,2.557,280,3.465,282,2.839,285,2.15,287,2.557,297,3.642,299,4.059,306,2.859,308,2.557,319,3.308,340,3.629,368,2.859,372,2.859,377,4.059,378,4.719,399,1.758,507,2.15,510,2.839,517,2,606,2.226,639,2.859,674,4.059,693,2.859,696,4.059,699,4.059,700,2.839,701,2.859,702,2.859,704,2.557,705,4.059,706,2.859,707,2.859,708,2.859,709,2.859,710,2.859,711,2.859,716,2.859,717,2.859,718,2.859,881,2.859,882,3.319,883,3.319,884,3.319,885,3.319,886,3.319,887,3.319,888,3.319,889,3.319,890,3.319,891,3.319]],["title/interfaces/Paginated.html",[512,2.121,665,1.88]],["body/interfaces/Paginated.html",[3,0.221,4,0.196,5,0.196,12,0.355,26,0.017,28,0.656,40,3.276,43,1.576,61,0.221,76,3.255,98,3.65,106,0.014,107,0.014,181,3.65,311,1.388,364,1.75,401,2.005,512,3.373,665,2.368,667,3.07,694,4.248,892,4.082,893,5.934,894,5.934,895,4.837,896,6.888,897,4.082,898,4.082,899,4.082,900,4.082,901,4.082,902,4.082,903,4.082]],["title/modules/PaginationModule.html",[131,1.522,146,1.994]],["body/modules/PaginationModule.html",[3,0.237,4,0.21,5,0.21,26,0.017,45,0.432,46,1.126,61,0.237,62,0.128,106,0.014,107,0.014,131,2.737,133,2.539,134,2.539,135,2.865,136,2.865,137,2.539,138,3.816,139,3.816,146,3.962,148,3.523,149,2.865,150,2.539,496,4.096,904,4.379,905,4.379,906,4.379,907,5.083,908,5.083]],["title/injectables/PaginationProvider.html",[48,0.796,496,1.994]],["body/injectables/PaginationProvider.html",[3,0.148,4,0.131,5,0.131,9,0.316,12,0.237,13,1.325,14,1.866,16,1.417,18,1.417,23,0.58,25,1.701,26,0.018,27,1.056,28,0.465,29,1.105,37,3.134,38,0.921,39,2.274,45,0.445,46,0.701,47,1.783,48,0.963,53,2.437,61,0.148,62,0.08,64,0.638,68,2.554,74,1.417,76,1.495,78,2.949,83,1.58,84,1.593,86,1.676,88,1.593,92,1.676,94,0.964,95,1.057,98,2.437,106,0.015,107,0.01,119,3.744,158,2.221,181,2.437,193,2.725,215,1.279,223,2.053,238,2.049,364,1.157,413,1.495,444,2.221,446,1.279,462,1.279,471,3.717,472,2.756,473,3.41,496,2.412,498,3.739,512,2.566,526,2.221,694,2.949,698,2.725,733,2.756,893,2.725,894,2.725,895,2.221,897,3.922,898,3.922,899,3.922,900,4.594,901,2.725,902,2.725,903,2.725,909,2.725,910,5.332,911,3.163,912,3.163,913,3.163,914,6.18,915,5.025,916,3.163,917,5.332,918,3.163,919,3.163,920,3.163,921,3.163,922,3.163,923,3.163,924,3.163,925,3.163,926,3.163,927,3.163,928,3.163,929,3.163,930,4.552,931,3.163,932,4.552,933,3.163,934,3.163,935,3.163,936,3.163,937,3.163,938,3.163,939,3.163,940,3.163,941,3.163,942,3.163,943,3.163,944,3.163]],["title/classes/PaginationQueryDto.html",[62,0.095,733,1.778]],["body/classes/PaginationQueryDto.html",[3,0.229,4,0.203,5,0.203,12,0.367,23,0.778,26,0.018,28,0.533,29,1.692,45,0.338,61,0.229,62,0.154,106,0.014,107,0.014,113,1.552,311,1.417,335,3.957,401,2.029,471,3.527,472,2.886,473,3.527,474,4.289,535,1.492,550,1.492,590,2.981,723,2.595,733,2.886,734,3.527,945,4.706,946,6.109,947,4.898,948,4.898,949,6.658,950,4.898,951,6.109]],["title/classes/PatchItemDto.html",[62,0.095,813,2.438]],["body/classes/PatchItemDto.html",[3,0.206,4,0.182,5,0.182,9,0.633,12,0.33,23,0.561,26,0.018,28,0.498,45,0.438,61,0.206,62,0.144,64,1.402,95,2.239,106,0.013,107,0.013,113,1.119,124,1.119,268,2.557,311,1.325,364,1.451,387,2.658,388,3.026,401,2.072,419,3.699,431,2.201,438,2.46,472,2.698,516,2.483,535,1.342,538,2.198,539,2.198,541,2.654,542,3.699,547,3.025,549,3.025,550,1.342,553,3.393,738,3.025,813,3.699,819,3.393,952,4.919,953,5.71,954,5.71,955,3.795,956,4.405,957,3.795,958,4.919]],["title/classes/PatchUserDto.html",[62,0.095,959,2.643]],["body/classes/PatchUserDto.html",[3,0.206,4,0.182,5,0.182,9,0.633,12,0.33,23,0.561,26,0.018,28,0.498,45,0.438,61,0.206,62,0.144,64,1.402,77,1.728,95,2.239,106,0.013,107,0.013,113,1.119,124,1.119,268,2.557,311,1.325,364,1.451,387,2.658,401,2.072,431,2.201,438,2.46,439,3.025,472,2.698,535,1.342,538,2.198,539,2.198,541,2.654,542,3.699,547,3.025,549,3.025,550,1.342,603,2.483,605,3.393,645,3.093,738,3.025,955,3.795,957,3.795,958,4.919,959,4.01,960,4.919,961,5.71,962,5.71,963,4.405]],["title/classes/RefreshTokenDto.html",[62,0.095,964,2.899]],["body/classes/RefreshTokenDto.html",[3,0.215,4,0.191,5,0.191,9,0.681,11,5.138,12,0.345,23,0.586,26,0.018,28,0.512,43,1.441,45,0.406,61,0.215,62,0.172,77,1.571,95,1.962,106,0.013,107,0.013,113,1.169,124,1.169,268,2.63,311,1.362,364,1.169,438,2.5,439,3.111,535,1.402,538,1.772,539,1.772,541,2.772,547,3.111,549,3.111,550,1.402,588,2.63,713,5.573,964,4.524,965,5.06,966,3.964,967,6.815,968,6.469,969,4.602,970,4.602,971,4.602]],["title/classes/RegisterDto.html",[62,0.095,241,2.438]],["body/classes/RegisterDto.html",[3,0.139,4,0.123,5,0.123,9,0.629,12,0.223,23,0.768,26,0.018,27,1.509,28,0.525,43,1.463,45,0.355,61,0.139,62,0.13,64,1.468,76,2.676,77,1.797,106,0.01,107,0.01,113,1.531,124,0.755,199,3.714,241,2.817,246,3.35,311,1.009,348,3.55,364,1.105,380,3.746,401,1.833,438,2.74,535,0.905,538,1.674,539,1.674,547,3.336,549,3.336,550,1.325,588,2.536,591,2.288,592,2.288,595,3.35,596,3.963,606,3.074,607,4.432,608,5.192,609,2.559,611,4.432,612,2.559,614,2.559,615,4.879,616,3.746,617,3.746,618,3.746,619,3.746,620,3.746,621,3.746,622,3.746,623,3.746,625,4.879,626,2.559,628,3.35,629,2.559,630,3.746,631,3.35,632,3.746,633,4.362,634,2.559,972,2.559,973,5.144,974,5.663,975,2.97,976,4.348,977,2.97,978,2.97,979,2.97,980,2.97,981,2.97,982,2.97,983,2.97]],["title/interfaces/SuccessResponse.html",[665,1.88,984,2.643]],["body/interfaces/SuccessResponse.html",[3,0.249,4,0.221,5,0.221,12,0.4,26,0.017,28,0.603,40,3.453,43,1.462,61,0.249,76,3.391,106,0.015,107,0.015,311,1.493,364,1.824,665,2.663,667,3.453,669,4.106,694,4.477,895,5.04,984,4.518,985,4.592]],["title/entities/User.html",[77,0.914,381,2.121]],["body/entities/User.html",[3,0.164,4,0.145,5,0.145,9,0.489,12,0.263,23,0.87,26,0.018,27,1.309,28,0.625,43,1.408,45,0.422,61,0.164,62,0.089,64,1.541,77,1.56,95,1.635,106,0.011,107,0.011,113,1.736,199,2.989,207,2.271,311,1.136,381,3.443,382,2.735,385,4.346,387,2.07,389,4.346,394,3.051,395,4.346,397,4.346,398,5.127,399,3.526,401,1.425,402,4.346,410,4.346,412,4.704,413,2.666,419,2.271,420,2.461,424,3.622,606,2.666,771,5.735,772,5.735,773,5.735,790,4.218,791,3.02,986,3.02,987,3.505,988,3.505,989,3.505,990,3.505,991,4.896,992,3.505,993,3.505,994,3.505,995,3.505,996,3.505,997,4.896,998,3.505]],["title/controllers/UsersController.html",[108,1.685,999,2.643]],["body/controllers/UsersController.html",[3,0.099,4,0.088,5,0.088,9,0.714,12,0.158,13,0.976,14,1.459,23,0.605,25,1.514,26,0.018,27,1.278,28,0.572,29,1.152,37,3.188,38,1.744,44,0.899,45,0.426,46,0.743,60,1.369,61,0.099,62,0.053,64,0.426,66,1.992,68,0.739,73,3.868,77,1.805,78,3.568,84,1.173,88,0.739,94,1.446,95,1.928,106,0.008,107,0.008,108,1.867,110,0.946,113,1.206,114,1.484,117,3.568,122,3.352,123,3.352,124,0.852,127,1.369,128,3.074,129,2.018,220,1.484,223,2.526,231,3.591,233,2.354,236,1.056,238,3.352,244,2.354,247,2.859,249,1.484,250,3.634,252,2.927,253,1.484,262,1.273,263,1.273,268,2.467,275,1.82,297,2.208,346,3.105,387,2.319,399,1.776,401,1.744,430,1.628,431,2.371,433,3.211,434,2.583,436,4.613,437,4.613,438,2.408,439,3.173,440,4.243,444,2.354,445,1.628,446,1.686,448,2.02,453,1.628,456,2.583,457,2.583,458,1.191,460,1.273,462,0.854,467,3.655,471,1.119,472,1.97,473,1.119,474,1.484,603,3.477,638,2.889,642,1.82,645,2.354,759,3.808,761,3.886,814,1.82,815,3.655,816,2.889,818,4.973,820,1.628,959,4.529,999,2.354,1000,1.82,1001,3.353,1002,3.353,1003,3.353,1004,2.113,1005,2.113,1006,2.113,1007,5.508,1008,3.353,1009,2.113,1010,3.353,1011,2.113,1012,2.113,1013,2.113,1014,2.113,1015,2.113,1016,3.353,1017,1.82,1018,2.113,1019,2.113,1020,2.113,1021,2.113,1022,2.113,1023,2.113,1024,2.113,1025,2.113,1026,2.113,1027,2.113]],["title/modules/UsersModule.html",[131,1.522,147,2.267]],["body/modules/UsersModule.html",[3,0.194,4,0.172,5,0.172,26,0.018,45,0.507,46,0.92,61,0.194,62,0.105,77,1.334,106,0.012,107,0.012,110,2.461,131,2.49,133,2.075,134,2.075,135,2.342,136,2.342,137,2.075,138,3.471,139,3.471,143,3.311,146,3.71,147,4.555,148,3.098,149,2.342,150,2.075,154,3.56,160,2.917,161,1.963,285,3.56,297,3.983,348,2.342,489,3.2,635,4.219,644,2.917,671,4.219,999,4.324,1017,3.579,1028,3.579,1029,3.579,1030,4.154,1031,3.579,1032,4.154,1033,4.154,1034,4.154,1035,4.154,1036,3.579,1037,4.154,1038,3.579,1039,4.154]],["title/injectables/UsersService.html",[48,0.796,297,1.994]],["body/injectables/UsersService.html",[3,0.103,4,0.091,5,0.091,9,0.527,12,0.165,13,1.008,14,2.409,16,2.174,18,1.551,23,0.714,25,1.788,26,0.018,27,1.3,28,0.489,29,1.361,33,3.854,37,2.023,38,1.862,39,2.425,43,0.905,44,1.472,45,0.458,46,0.948,48,0.732,61,0.103,62,0.056,64,0.98,66,2.032,68,1.212,74,2.51,77,1.798,81,1.166,82,1.166,83,2.637,84,2.052,86,2.268,88,1.699,92,2.268,94,1.608,106,0.008,107,0.008,161,1.04,201,3.533,213,2.243,215,0.89,223,2.65,236,2.139,295,1.952,297,1.834,319,1.545,346,1.952,348,1.241,364,0.88,387,2.433,401,1.246,413,1.04,431,2.637,446,1.731,448,2.086,458,1.241,460,1.326,462,0.89,471,1.834,473,1.834,492,2.667,493,2.667,494,2.667,496,3.107,498,2.736,502,2.667,504,1.551,505,2.667,507,3.799,508,4.317,509,3.297,510,2.925,511,1.426,512,1.241,513,1.695,514,1.695,517,2.579,524,2.773,525,2.773,529,1.695,531,3.006,534,2.667,603,3.159,606,1.04,635,3.377,640,3.297,644,1.545,645,1.545,647,1.695,662,2.983,671,2.925,676,2.983,679,2.983,682,2.983,759,3.533,761,2.925,915,4.182,1036,1.896,1038,1.896,1040,1.896,1041,3.462,1042,2.201,1043,4.281,1044,2.201,1045,3.462,1046,2.201,1047,2.201,1048,3.462,1049,3.462,1050,2.201,1051,3.462,1052,2.201,1053,2.201,1054,2.201,1055,2.201,1056,3.462,1057,2.201]],["title/coverage.html",[1058,3.961]],["body/coverage.html",[0,2.615,1,1.741,5,0.111,6,2.315,7,1.887,8,2.315,26,0.018,28,0.234,48,1.469,56,2.07,58,2.07,59,2.07,62,0.184,77,0.98,84,0.94,106,0.009,107,0.009,108,2.589,109,1.887,111,2.315,125,1.619,137,1.343,151,2.07,171,1.887,177,2.07,179,2.07,216,2.315,218,1.887,219,2.315,221,1.887,228,1.619,241,1.741,260,1.619,262,1.619,263,1.619,280,1.424,281,1.741,282,1.619,288,1.887,294,2.315,297,1.424,310,2.315,320,2.07,348,1.515,354,2.315,381,2.734,382,1.203,383,2.315,388,1.143,422,1.887,423,2.315,424,2.734,429,1.741,442,1.619,450,1.887,463,1.619,491,2.315,496,1.424,512,1.515,516,1.515,536,2.315,537,2.315,552,2.315,553,3.11,603,1.515,604,2.315,605,3.11,635,1.619,636,2.315,637,2.315,665,2.694,666,1.887,668,2.315,669,3.11,671,1.619,672,2.315,673,2.315,684,2.315,685,2.315,700,1.619,721,1.887,722,3.405,723,3.337,733,1.27,734,1.424,737,2.569,739,3.405,745,1.887,746,3.405,755,1.619,756,1.887,757,1.887,758,3.405,759,2.922,761,1.619,762,2.07,763,2.315,768,2.315,769,2.315,770,2.315,798,1.887,799,2.315,813,1.741,821,1.619,843,2.315,875,2.315,881,2.315,892,2.315,909,2.315,952,2.315,959,1.887,960,2.315,964,2.07,965,2.315,966,2.315,972,2.315,984,1.887,985,2.315,986,2.315,999,1.887,1000,2.315,1040,2.315,1058,2.07,1059,2.687,1060,2.687,1061,2.687,1062,7.092,1063,4.037,1064,6.071,1065,5.78,1066,2.687,1067,2.687,1068,3.478,1069,2.315,1070,2.315,1071,2.315,1072,7.569,1073,6.752,1074,2.315,1075,4.037,1076,6.479,1077,4.037,1078,2.687,1079,2.687,1080,2.687,1081,4.85,1082,5.392,1083,4.85,1084,4.85,1085,2.687,1086,2.687,1087,2.687,1088,2.687,1089,4.037,1090,2.687,1091,2.687,1092,2.687,1093,4.037,1094,3.478,1095,4.178,1096,2.315,1097,2.687,1098,2.687,1099,2.687,1100,2.687,1101,2.315,1102,2.687,1103,2.687,1104,2.687,1105,2.687]],["title/dependencies.html",[134,2.262,1106,2.705]],["body/dependencies.html",[26,0.018,46,1.129,51,3.071,52,3.071,53,3.927,62,0.158,106,0.014,107,0.014,124,1.295,134,2.547,158,3.579,161,2.408,367,4.392,413,2.408,550,1.553,743,3.579,1107,5.097,1108,5.097,1109,6.778,1110,5.097,1111,5.097,1112,5.097,1113,5.097,1114,5.097,1115,5.097,1116,5.097,1117,5.097,1118,5.097,1119,5.097,1120,5.097,1121,5.097,1122,5.097,1123,5.097,1124,5.097,1125,5.097,1126,5.097,1127,5.097,1128,5.097,1129,5.097,1130,5.097]],["title/miscellaneous/enumerations.html",[1131,1.892,1132,3.901]],["body/miscellaneous/enumerations.html",[12,0.394,26,0.017,106,0.014,107,0.014,255,4.477,321,4.523,407,4.477,582,4.13,598,5.493,945,5.799,1131,3.163,1132,4.523,1133,5.25,1134,6.376,1135,5.25,1136,5.25,1137,5.25,1138,5.25,1139,5.25,1140,6.376,1141,6.376,1142,6.376,1143,6.376,1144,5.25,1145,6.376,1146,6.376]],["title/miscellaneous/functions.html",[1131,1.892,1147,3.901]],["body/miscellaneous/functions.html",[12,0.375,25,1.973,26,0.017,27,1.435,28,0.539,29,1.502,38,1.8,40,3.09,43,1.555,58,4.764,59,3.848,74,2.237,76,3.174,79,4.304,106,0.014,107,0.014,137,3.507,152,4.304,153,4.304,262,3.726,263,3.01,364,1.571,401,1.8,666,3.508,670,5.328,694,4.006,895,4.343,984,3.508,1094,6.047,1095,4.304,1101,4.304,1131,3.01,1147,4.304,1148,4.996,1149,4.996,1150,4.996,1151,4.996]],["title/index.html",[12,0.235,504,1.406,1152,3.14]],["body/index.html",[4,0.19,9,0.459,26,0.018,100,3.954,106,0.013,107,0.013,339,3.954,384,3.535,438,2.371,498,2.587,1058,3.535,1153,4.59,1154,4.59,1155,5.863,1156,4.59,1157,4.59,1158,4.59,1159,4.59,1160,4.59,1161,4.59,1162,6.461,1163,4.59,1164,4.59,1165,7.313,1166,4.59,1167,4.59,1168,4.59,1169,7.194,1170,4.59,1171,4.59,1172,5.863,1173,4.59,1174,3.954,1175,4.59,1176,4.59,1177,5.863,1178,5.051,1179,4.59,1180,4.59,1181,4.59,1182,5.863,1183,5.863,1184,4.59,1185,4.59,1186,4.59,1187,4.59,1188,4.59,1189,3.954,1190,4.59,1191,4.59,1192,4.59,1193,4.59,1194,4.59,1195,4.59,1196,4.59,1197,4.59,1198,4.59,1199,4.59,1200,4.59,1201,4.59,1202,4.59,1203,4.59,1204,4.59,1205,3.954]],["title/modules.html",[133,2.569]],["body/modules.html",[26,0.015,106,0.015,107,0.015,132,3.873,133,2.755,143,3.323,144,3.573,145,3.573,146,2.922,147,3.323,1189,6.482,1206,7.524,1207,7.524,1208,7.524]],["title/overview.html",[1209,4.43]],["body/overview.html",[2,2.866,26,0.018,106,0.012,107,0.012,110,1.666,125,3.509,131,1.505,132,5.255,133,1.859,134,1.859,135,2.098,136,2.098,137,1.859,138,2.098,139,2.098,140,3.206,141,3.206,142,3.206,143,4.416,144,4.581,145,4.581,146,3.801,147,4.452,148,2.876,149,2.098,150,1.859,207,2.411,215,1.505,260,4.184,277,3.206,278,3.206,279,3.206,280,3.319,281,3.772,282,3.509,297,3.679,463,4.184,482,3.206,484,3.206,485,3.206,496,3.679,535,1.134,563,3.206,635,3.509,667,2.411,671,3.509,821,4.184,835,3.206,837,3.206,838,3.206,904,3.206,905,3.206,906,3.206,1028,3.206,1029,3.206,1031,3.206,1209,3.206,1210,3.721,1211,3.721,1212,3.721,1213,3.721,1214,3.721,1215,3.721]],["title/properties.html",[311,1.05,1106,2.705]],["body/properties.html",[9,0.588,26,0.017,106,0.015,107,0.015,311,1.365,384,4.534,1205,5.071,1216,5.886,1217,5.886,1218,5.886]],["title/miscellaneous/variables.html",[189,3.488,1131,1.892]],["body/miscellaneous/variables.html",[12,0.315,26,0.018,28,0.574,31,3.238,37,1.986,43,1.171,44,1.788,56,4.266,68,1.938,77,1.599,91,3.622,94,1.281,106,0.013,107,0.013,151,3.238,177,4.266,179,4.266,180,3.622,182,3.622,189,4.266,221,4.349,255,3.889,268,1.883,320,4.266,326,4.772,335,4.551,420,2.952,700,2.533,945,5.412,1068,3.622,1069,3.622,1070,4.772,1071,4.772,1074,3.622,1096,3.622,1131,2.533,1174,3.622,1178,3.622,1219,4.204,1220,4.204,1221,5.539,1222,4.204,1223,4.204,1224,4.204,1225,5.539,1226,4.204,1227,4.204,1228,4.204,1229,4.204,1230,4.204,1231,5.539,1232,4.204,1233,4.204,1234,4.204,1235,4.204,1236,4.204,1237,4.204,1238,4.204,1239,4.204,1240,4.204,1241,4.204,1242,4.204,1243,4.204,1244,7.163,1245,4.204,1246,4.204,1247,4.204,1248,4.204,1249,4.204,1250,4.204,1251,4.204,1252,4.204,1253,4.204,1254,4.204,1255,4.204]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1062,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1217,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1080,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":551,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{}}}],["01'})@isiso8601()@isnotempty",{"_index":545,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{}}}],["08012345678",{"_index":632,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["08012345678'})@isstring()@isnotempty",{"_index":626,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["09",{"_index":544,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{}}}],["1",{"_index":472,"title":{},"body":{"controllers/ClaimsController.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/ItemsController.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["1.1.25",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1067,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":474,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1072,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":783,"title":{},"body":{"entities/Item.html":{}}}],["12",{"_index":563,"title":{},"body":{"classes/CreateItemDto.html":{},"overview.html":{}}}],["17.13.3",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1213,"title":{},"body":{"overview.html":{}}}],["1})@isint()@isoptional()@type(undefined",{"_index":741,"title":{},"body":{"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["1})@isnumber()@isnotempty",{"_index":955,"title":{},"body":{"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{}}}],["2",{"_index":1214,"title":{},"body":{"overview.html":{}}}],["2.0.5",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1088,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1079,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["2021",{"_index":543,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{}}}],["25",{"_index":1066,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1212,"title":{},"body":{"overview.html":{}}}],["3.2.3",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1086,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1215,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":1089,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1211,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1210,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1077,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1087,"title":{},"body":{"coverage.html":{}}}],["7.4.0",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["8.12.0",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["8/9",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":773,"title":{},"body":{"entities/Item.html":{},"entities/User.html":{}}}],["_",{"_index":104,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["__dirname",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["abstract",{"_index":765,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accepted",{"_index":1142,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acces",{"_index":343,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["access",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":340,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["active",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activeuser",{"_index":1071,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":795,"title":{},"body":{"entities/Item.html":{}}}],["additional",{"_index":796,"title":{},"body":{"entities/Item.html":{}}}],["already",{"_index":655,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["amazing",{"_index":1190,"title":{},"body":{"index.html":{}}}],["another",{"_index":660,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["api",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["apibody",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":122,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":456,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":547,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({description",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({type",{"_index":541,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apipropertyoptional",{"_index":585,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":740,"title":{},"body":{"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":572,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["apiquery",{"_index":457,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":123,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('claims",{"_index":466,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["apitags('items",{"_index":824,"title":{},"body":{"controllers/ItemsController.html":{}}}],["apitags('users",{"_index":1019,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1167,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":126,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":109,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":1161,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":132,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":125,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archived",{"_index":574,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["asaae4223e",{"_index":968,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["async",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":706,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["auth",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":320,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":218,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["authenticationguard",{"_index":171,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":330,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":143,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":384,"title":{},"body":{"entities/Claim.html":{},"index.html":{},"properties.html":{}}}],["authorised",{"_index":349,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authorization",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authorname",{"_index":725,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{}}}],["authservice",{"_index":260,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":322,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":325,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":312,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":326,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((authtype",{"_index":332,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":1191,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":526,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{}}}],["badrequestexception('adjust",{"_index":925,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["badrequestexception('user",{"_index":658,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["base",{"_index":724,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["baseurl",{"_index":930,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":367,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":379,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(10",{"_index":371,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":375,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":288,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1137,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["body",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"interfaces/SuccessResponse.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1208,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1206,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":361,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1156,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":794,"title":{},"body":{"entities/Item.html":{}}}],["cascade'})@joincolumn",{"_index":777,"title":{},"body":{"entities/Item.html":{}}}],["catch",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["catch((e",{"_index":352,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["category",{"_index":554,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{}}}],["character",{"_index":623,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["characters",{"_index":620,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["check",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["claim",{"_index":382,"title":{"entities/Claim.html":{}},"body":{"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"entities/Item.html":{},"entities/User.html":{},"coverage.html":{}}}],["claim'})@apiresponse({status",{"_index":432,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["claim.dto",{"_index":459,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{}}}],["claim.dto.ts",{"_index":537,"title":{},"body":{"classes/CreateClaimDto.html":{},"coverage.html":{}}}],["claim.dto.ts:21",{"_index":546,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["claim.entity",{"_index":487,"title":{},"body":{"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{}}}],["claim.item",{"_index":775,"title":{},"body":{"entities/Item.html":{}}}],["claimed",{"_index":1145,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["claimrepository",{"_index":497,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["claims",{"_index":424,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["claims'})@apiresponse({status",{"_index":443,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["claims.author",{"_index":998,"title":{},"body":{"entities/User.html":{}}}],["claims.author)@joincolumn",{"_index":988,"title":{},"body":{"entities/User.html":{}}}],["claims.controller",{"_index":488,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["claims/1",{"_index":478,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["claims/claims.module",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["claimscontroller",{"_index":422,"title":{"controllers/ClaimsController.html":{}},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"coverage.html":{}}}],["claimsmodule",{"_index":144,"title":{"modules/ClaimsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimsservice",{"_index":463,"title":{"injectables/ClaimsService.html":{}},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimstatus",{"_index":407,"title":{},"body":{"entities/Claim.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["claimstatus.submitted",{"_index":421,"title":{},"body":{"entities/Claim.html":{}}}],["class",{"_index":62,"title":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/LoginDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":535,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/LoginDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_claimsmodule",{"_index":482,"title":{},"body":{"modules/ClaimsModule.html":{},"overview.html":{}}}],["cluster_claimsmodule_exports",{"_index":484,"title":{},"body":{"modules/ClaimsModule.html":{},"overview.html":{}}}],["cluster_claimsmodule_imports",{"_index":483,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["cluster_claimsmodule_providers",{"_index":485,"title":{},"body":{"modules/ClaimsModule.html":{},"overview.html":{}}}],["cluster_itemsmodule",{"_index":835,"title":{},"body":{"modules/ItemsModule.html":{},"overview.html":{}}}],["cluster_itemsmodule_exports",{"_index":837,"title":{},"body":{"modules/ItemsModule.html":{},"overview.html":{}}}],["cluster_itemsmodule_imports",{"_index":836,"title":{},"body":{"modules/ItemsModule.html":{}}}],["cluster_itemsmodule_providers",{"_index":838,"title":{},"body":{"modules/ItemsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":904,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":906,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":905,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1028,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1029,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1030,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1031,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":412,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["column({type",{"_index":397,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["common/pagination/pagination.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":377,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/LoginProvider.html":{}}}],["comparepassword",{"_index":358,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":360,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["configmodule",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.autoloadentities",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["configuration",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":974,"title":{},"body":{"classes/RegisterDto.html":{}}}],["confirmpassword",{"_index":973,"title":{},"body":{"classes/RegisterDto.html":{}}}],["connect",{"_index":520,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{}}}],["connection",{"_index":525,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["const",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(request",{"_index":921,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(createuserprovider",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(hashingprovider",{"_index":639,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/LoginProvider.html":{}}}],["constructor(jwtservice",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["constructor(loginprovider",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(paginationprovider",{"_index":495,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{}}}],["constructor(private",{"_index":127,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":315,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":911,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(userrepository",{"_index":677,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["context",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["context.getclass",{"_index":329,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":328,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":108,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('claims",{"_index":465,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["controller('items",{"_index":823,"title":{},"body":{"controllers/ItemsController.html":{}}}],["controller('users",{"_index":1018,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1058,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":431,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(createclaimdto",{"_index":500,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["create(createitemdto",{"_index":846,"title":{},"body":{"injectables/ItemsService.html":{}}}],["create(createuserdto",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["createclaim",{"_index":425,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["createclaim(@body",{"_index":468,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["createclaim(createclaimdto",{"_index":428,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["createclaimdto",{"_index":429,"title":{"classes/CreateClaimDto.html":{}},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"coverage.html":{}}}],["created",{"_index":433,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["createdat",{"_index":385,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":395,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["createerrorresponse",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createerrorresponse(error",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/functions.html":{}}}],["createitem",{"_index":800,"title":{},"body":{"controllers/ItemsController.html":{}}}],["createitem(@body",{"_index":825,"title":{},"body":{"controllers/ItemsController.html":{}}}],["createitem(createitemdto",{"_index":803,"title":{},"body":{"controllers/ItemsController.html":{}}}],["createitemdto",{"_index":516,"title":{"classes/CreateItemDto.html":{}},"body":{"injectables/ClaimsService.html":{},"classes/CreateItemDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createsuccessresponse",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsuccessresponse('claim",{"_index":470,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["createsuccessresponse('claims",{"_index":477,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["createsuccessresponse('item",{"_index":827,"title":{},"body":{"controllers/ItemsController.html":{}}}],["createsuccessresponse('items",{"_index":830,"title":{},"body":{"controllers/ItemsController.html":{}}}],["createsuccessresponse('user",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["createsuccessresponse(message",{"_index":1151,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createuser",{"_index":638,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":1020,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":642,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["createuserdto",{"_index":603,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":650,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":635,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":540,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{}}}],["creation",{"_index":434,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["ctx",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":899,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":364,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["database",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["database_host",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_name",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_password",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_port",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_user",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":394,"title":{},"body":{"entities/Claim.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["datefound",{"_index":555,"title":{},"body":{"classes/CreateItemDto.html":{},"entities/Item.html":{}}}],["datelost",{"_index":386,"title":{},"body":{"entities/Claim.html":{},"classes/CreateClaimDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{}}}],["db",{"_index":521,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{}}}],["dealing",{"_index":492,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":334,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["declined",{"_index":1143,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["decorator",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":335,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"entities/Item.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":314,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["define",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":1007,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":1026,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1006,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1008,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser",{"_index":1001,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(@param('id",{"_index":1027,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":1005,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":134,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["describing",{"_index":1010,"title":{},"body":{"controllers/UsersController.html":{}}}],["description",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ClaimsController.html":{},"injectables/CreateUserProvider.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["details'})@httpcode(httpstatus.ok",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["determines",{"_index":573,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["development",{"_index":1168,"title":{},"body":{"index.html":{}}}],["disable",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["documentation",{"_index":1059,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":630,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["dto",{"_index":439,"title":{},"body":{"controllers/ClaimsController.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/ItemsController.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/UsersController.html":{}}}],["dtos/create",{"_index":458,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":460,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/login.dto",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["dtos/pagination",{"_index":919,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":820,"title":{},"body":{"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{}}}],["dtos/register.dto",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e",{"_index":353,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["e2e",{"_index":1179,"title":{},"body":{"index.html":{}}}],["eager",{"_index":392,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{}}}],["efficient",{"_index":1157,"title":{},"body":{"index.html":{}}}],["eight",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["electronics",{"_index":597,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["electronics'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":559,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["email",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"interfaces/IActiveUser.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":1038,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":673,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:12",{"_index":678,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:28",{"_index":680,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["encrypted",{"_index":362,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["entities",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":381,"title":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":408,"title":{},"body":{"entities/Claim.html":{},"classes/CreateItemDto.html":{},"entities/Item.html":{}}}],["enumerations",{"_index":1132,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["enums/claimstatus.enum",{"_index":416,"title":{},"body":{"entities/Claim.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{}}}],["enums/itemstatus.enum",{"_index":593,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{}}}],["env",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["environmentschema",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["equals",{"_index":982,"title":{},"body":{"classes/RegisterDto.html":{}}}],["equals('password",{"_index":983,"title":{},"body":{"classes/RegisterDto.html":{}}}],["error",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["errorresponse",{"_index":666,"title":{"interfaces/ErrorResponse.html":{}},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["eslint/no",{"_index":101,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["even",{"_index":347,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["example",{"_index":438,"title":{},"body":{"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":651,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["executioncontext",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":534,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["existinguser",{"_index":648,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":656,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["expiresin",{"_index":693,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["export",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":738,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{}}}],["extract",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":888,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["false",{"_index":399,"title":{},"body":{"entities/Claim.html":{},"controllers/ClaimsController.html":{},"classes/CreateItemDto.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/LoginProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["false})@isboolean()@isoptional",{"_index":575,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["featured",{"_index":568,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["fetched",{"_index":444,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["field",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filters",{"_index":527,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{}}}],["final",{"_index":736,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["find",{"_index":507,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":493,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":502,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["finding",{"_index":675,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["findoneby",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneby(operator",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":676,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":679,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemailprovider",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":494,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":505,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["findoneuserbyemailprovider",{"_index":671,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findoptionswhere",{"_index":915,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["finds",{"_index":681,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["fired",{"_index":341,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":901,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["format",{"_index":542,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{}}}],["forwardref",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/LoginProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateItemDto.html":{},"injectables/PaginationProvider.html":{}}}],["framework",{"_index":1155,"title":{},"body":{"index.html":{}}}],["function",{"_index":1095,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1147,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":369,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{}}}],["generatetokens",{"_index":687,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":690,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":281,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get(':id",{"_index":479,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["get(':id')@apioperation({summary",{"_index":451,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["get()@apioperation({summary",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["getclaims",{"_index":426,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["getclaims(@query",{"_index":475,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["getclaims(getclaimsquerydto",{"_index":441,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["getclaimsbasedto",{"_index":721,"title":{"classes/GetClaimsBaseDto.html":{}},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"coverage.html":{}}}],["getclaimsparamdto",{"_index":450,"title":{"classes/GetClaimsParamDto.html":{}},"body":{"controllers/ClaimsController.html":{},"classes/GetClaimsParamDto.html":{},"coverage.html":{}}}],["getclaimsquerydto",{"_index":442,"title":{"classes/GetClaimsQueryDto.html":{}},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"coverage.html":{}}}],["gethello",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getitem",{"_index":427,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["getitem(@param",{"_index":480,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["getitem(getclaimsquerydto",{"_index":449,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["getitem(getitemsparamsdto",{"_index":806,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitems",{"_index":801,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitems(@query",{"_index":828,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitems(getitemsquerydto",{"_index":809,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitemsbasedto",{"_index":745,"title":{"classes/GetItemsBaseDto.html":{}},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"coverage.html":{}}}],["getitemsparamdto",{"_index":756,"title":{"classes/GetItemsParamDto.html":{}},"body":{"classes/GetItemsParamDto.html":{},"controllers/ItemsController.html":{},"coverage.html":{}}}],["getitemsparamsdto",{"_index":807,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitemsquerydto",{"_index":755,"title":{"classes/GetItemsQueryDto.html":{}},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"coverage.html":{}}}],["getpostsquerydto",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["getting",{"_index":504,"title":{"index.html":{}},"body":{"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":1002,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@query",{"_index":1022,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersquerydto",{"_index":1011,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbasedto",{"_index":757,"title":{"classes/GetUsersBaseDto.html":{}},"body":{"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["getusersparamdto",{"_index":762,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["getusersquerydto",{"_index":761,"title":{"classes/GetUsersQueryDto.html":{}},"body":{"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["grow",{"_index":1186,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["guard.canactivate(context",{"_index":351,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handle",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["handling",{"_index":437,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["hash",{"_index":372,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/LoginProvider.html":{}}}],["hashed",{"_index":376,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashedpassword",{"_index":374,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing",{"_index":356,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashing.provider",{"_index":368,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/LoginProvider.html":{}}}],["hashingprovider",{"_index":280,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/LoginProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":359,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":365,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["here",{"_index":339,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["host",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"injectables/PaginationProvider.html":{}}}],["http",{"_index":467,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["httpcode",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["httpexception(response",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["https://example.com/image.jpg",{"_index":600,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["https://example.com/image.jpg'})@isurl()@isnotempty()@maxlength(1024",{"_index":570,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["https://nestjs.com",{"_index":1202,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["httpstatus.unauthorized",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["iactiveuser",{"_index":700,"title":{"interfaces/IActiveUser.html":{}},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/IActiveUser.html":{},"injectables/LoginProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":387,"title":{},"body":{"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":452,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["identifier",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/UsersService.html":{}}}],["image",{"_index":569,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["imageurl",{"_index":556,"title":{},"body":{"classes/CreateItemDto.html":{},"entities/Item.html":{}}}],["implementation",{"_index":357,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["implements",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{}}}],["import",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/UsersModule.html":{}}}],["incoming",{"_index":440,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":653,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["inject",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{}}}],["inject(forwardref",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/LoginProvider.html":{}}}],["inject(jwtconfig.key",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["injectable",{"_index":48,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":215,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":511,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(claim",{"_index":515,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["injectrepository(item",{"_index":852,"title":{},"body":{"injectables/ItemsService.html":{}}}],["injectrepository(user",{"_index":647,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["injects",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":1164,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1166,"title":{},"body":{"index.html":{}}}],["interface",{"_index":665,"title":{"interfaces/ErrorResponse.html":{},"interfaces/IActiveUser.html":{},"interfaces/Paginated.html":{},"interfaces/SuccessResponse.html":{}},"body":{"interfaces/ErrorResponse.html":{},"interfaces/IActiveUser.html":{},"interfaces/Paginated.html":{},"interfaces/SuccessResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":667,"title":{},"body":{"interfaces/ErrorResponse.html":{},"interfaces/IActiveUser.html":{},"interfaces/Paginated.html":{},"interfaces/SuccessResponse.html":{},"overview.html":{}}}],["interfaces/active",{"_index":701,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["interfaces/paginated.interface",{"_index":920,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":732,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["iphone",{"_index":562,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["isarchived",{"_index":557,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{}}}],["isboolean",{"_index":586,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["isboolean()@isoptional",{"_index":750,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["isemail",{"_index":628,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isenum",{"_index":587,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["isenum(claimstatus",{"_index":735,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{}}}],["isenum(claimstatus)@isoptional",{"_index":730,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["isenum(itemstatus",{"_index":599,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["isenum(itemstatus)@isoptional",{"_index":752,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["isglobal",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":744,"title":{},"body":{"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":548,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["isiso8601()@isoptional",{"_index":728,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetItemsBaseDto.html":{}}}],["ismatch",{"_index":378,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/LoginProvider.html":{}}}],["isnotempty",{"_index":549,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{}}}],["isnumber",{"_index":958,"title":{},"body":{"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{}}}],["isoptional",{"_index":590,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@ispositive()@min(1",{"_index":946,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":949,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":588,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isoptional",{"_index":726,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetUsersBaseDto.html":{}}}],["issuer",{"_index":708,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["isurl",{"_index":589,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item",{"_index":388,"title":{"entities/Item.html":{}},"body":{"entities/Claim.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/GetItemsParamDto.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["item'})@apiresponse({status",{"_index":804,"title":{},"body":{"controllers/ItemsController.html":{}}}],["item.category",{"_index":862,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.claim",{"_index":405,"title":{},"body":{"entities/Claim.html":{}}}],["item.datefound",{"_index":872,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.description",{"_index":864,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.dto",{"_index":819,"title":{},"body":{"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{}}}],["item.dto.ts",{"_index":553,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["item.dto.ts:107",{"_index":579,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:122",{"_index":561,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:133",{"_index":576,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:24",{"_index":956,"title":{},"body":{"classes/PatchItemDto.html":{}}}],["item.dto.ts:26",{"_index":581,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:43",{"_index":560,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:58",{"_index":565,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:73",{"_index":584,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:89",{"_index":571,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.entity",{"_index":840,"title":{},"body":{"modules/ItemsModule.html":{},"injectables/ItemsService.html":{}}}],["item.imageurl",{"_index":868,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.locationfound",{"_index":870,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.name",{"_index":860,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.status",{"_index":866,"title":{},"body":{"injectables/ItemsService.html":{}}}],["itemrepository",{"_index":844,"title":{},"body":{"injectables/ItemsService.html":{}}}],["items",{"_index":737,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"coverage.html":{}}}],["items'})@apiresponse({status",{"_index":810,"title":{},"body":{"controllers/ItemsController.html":{}}}],["items.controller",{"_index":841,"title":{},"body":{"modules/ItemsModule.html":{}}}],["items/1",{"_index":831,"title":{},"body":{"controllers/ItemsController.html":{}}}],["items/items.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["itemscontroller",{"_index":798,"title":{"controllers/ItemsController.html":{}},"body":{"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"coverage.html":{}}}],["itemsmodule",{"_index":145,"title":{"modules/ItemsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ItemsModule.html":{},"modules.html":{},"overview.html":{}}}],["itemsperpage",{"_index":897,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["itemsservice",{"_index":821,"title":{"injectables/ItemsService.html":{}},"body":{"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"coverage.html":{},"overview.html":{}}}],["itemstatus",{"_index":582,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"miscellaneous/enumerations.html":{}}}],["itemstatus.unclaimed",{"_index":793,"title":{},"body":{"entities/Item.html":{}}}],["john",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["johndoe@example.com",{"_index":631,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["johndoe@example.com'})@isemail()@isnotempty()@maxlength(96",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["johndoe@example.com'})@isnotempty()@isemail",{"_index":877,"title":{},"body":{"classes/LoginDto.html":{}}}],["joi",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["joi.number().default(3600",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().default(86400",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().port().default(5432",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.objectschema",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":1193,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":790,"title":{},"body":{"entities/Item.html":{},"entities/User.html":{}}}],["jwt_access_token_ttl",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_token_ttl",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_token_audience",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_token_issuer",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["jwtconfiguration",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["jwtmodule",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["jwtsignoptions",{"_index":699,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["kamil",{"_index":1199,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lagos",{"_index":602,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["lagos'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":578,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["last",{"_index":902,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["later",{"_index":344,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["legend",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":772,"title":{},"body":{"entities/Item.html":{},"entities/User.html":{}}}],["letter",{"_index":621,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["license",{"_index":1205,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1183,"title":{},"body":{"index.html":{}}}],["limit",{"_index":473,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["line",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["links",{"_index":893,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["literal",{"_index":896,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["location",{"_index":577,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["locationfound",{"_index":558,"title":{},"body":{"classes/CreateItemDto.html":{},"entities/Item.html":{}}}],["log",{"_index":652,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["logged",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logging",{"_index":876,"title":{},"body":{"classes/LoginDto.html":{}}}],["login",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["login(logindto",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["login.provider",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":228,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"coverage.html":{}}}],["loginprovider",{"_index":282,"title":{"injectables/LoginProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LoginProvider.html":{},"coverage.html":{},"overview.html":{}}}],["loginuser",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@body",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(logindto",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loop",{"_index":336,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["lost",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateClaimDto.html":{}}}],["main",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["manytoone",{"_index":414,"title":{},"body":{"entities/Claim.html":{}}}],["manytoone(undefined",{"_index":390,"title":{},"body":{"entities/Claim.html":{}}}],["map",{"_index":331,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["match",{"_index":380,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/RegisterDto.html":{}}}],["matches",{"_index":629,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^(?=.*[a",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":107,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":937,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":591,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["maxlength(1024",{"_index":601,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["maxlength(96",{"_index":596,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["message",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"miscellaneous/functions.html":{}}}],["message'})@apiresponse({status",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["meta",{"_index":894,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":950,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["min(1",{"_index":951,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["minimum",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["minlength",{"_index":592,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(3",{"_index":595,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":1131,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1182,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1172,"title":{},"body":{"index.html":{}}}],["module",{"_index":131,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":133,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1196,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":345,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["myśliwiec",{"_index":1200,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":797,"title":{},"body":{"entities/Item.html":{}}}],["nest",{"_index":1162,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1204,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":124,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newclaim",{"_index":518,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["newitem",{"_index":853,"title":{},"body":{"injectables/ItemsService.html":{}}}],["newurl",{"_index":932,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":662,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["nextpage",{"_index":938,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1154,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":1138,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":509,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('claim",{"_index":533,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["notfoundexception('item",{"_index":858,"title":{},"body":{"injectables/ItemsService.html":{}}}],["notfoundexception('user",{"_index":1056,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1165,"title":{},"body":{"index.html":{}}}],["null",{"_index":792,"title":{},"body":{"entities/Item.html":{}}}],["nullable",{"_index":398,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["number",{"_index":401,"title":{},"body":{"entities/Claim.html":{},"injectables/ClaimsService.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":539,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{}}}],["object.keys(queries).length",{"_index":528,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{}}}],["objectliteral",{"_index":918,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["ondelete",{"_index":776,"title":{},"body":{"entities/Item.html":{}}}],["one",{"_index":348,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/RegisterDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":997,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":987,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":415,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{}}}],["onetoone(undefined",{"_index":404,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{}}}],["open",{"_index":1184,"title":{},"body":{"index.html":{}}}],["operator",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["optional",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateItemDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetUsersBaseDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":705,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["origin",{"_index":934,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=${nextpage",{"_index":943,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=${page",{"_index":942,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=${previouspage",{"_index":944,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=${totalpages",{"_index":941,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=1",{"_index":940,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["out",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1209,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1106,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":471,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["paginated",{"_index":512,"title":{"interfaces/Paginated.html":{}},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":910,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":913,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":146,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":496,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":917,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":733,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":461,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["param.dto.ts",{"_index":739,"title":{},"body":{"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:17",{"_index":742,"title":{},"body":{"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":455,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["parseintpipe",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":957,"title":{},"body":{"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createitemdto",{"_index":954,"title":{},"body":{"classes/PatchItemDto.html":{}}}],["partialtype(createuserdto",{"_index":962,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passowrd",{"_index":889,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["password",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["password123",{"_index":633,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["password123@'})@isnotempty()@equals('password",{"_index":975,"title":{},"body":{"classes/RegisterDto.html":{}}}],["password123@'})@isnotempty()@isstring",{"_index":879,"title":{},"body":{"classes/LoginDto.html":{}}}],["password123@'})@isstring()@isnotempty()@minlength(3)@maxlength(96)@matches(/^(?=.*[a",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["passwords",{"_index":976,"title":{},"body":{"classes/RegisterDto.html":{}}}],["patch",{"_index":818,"title":{},"body":{"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":814,"title":{},"body":{"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["patching",{"_index":953,"title":{},"body":{"classes/PatchItemDto.html":{}}}],["patchitemdto",{"_index":813,"title":{"classes/PatchItemDto.html":{}},"body":{"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["patchitemdto.category",{"_index":863,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.datefound",{"_index":873,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.description",{"_index":865,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.imageurl",{"_index":869,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.locationfound",{"_index":871,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.name",{"_index":861,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.status",{"_index":867,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchuserdto",{"_index":959,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pathname",{"_index":935,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["payload",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["payloaddata",{"_index":703,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["pending",{"_index":1141,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["permissions",{"_index":342,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["pg",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":625,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["phonenumber",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["please",{"_index":1194,"title":{},"body":{"index.html":{}}}],["port",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apioperation({summary",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apioperation({summary",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apioperation({summary",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":430,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["postgres",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":926,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["prefix",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/UsersService.html":{}}}],["previous",{"_index":903,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":939,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":402,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["private",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["pro",{"_index":594,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["pro'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":580,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["pro.'})@isstring()@isoptional",{"_index":564,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["process",{"_index":531,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["processing",{"_index":1146,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["production",{"_index":1174,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1153,"title":{},"body":{"index.html":{}}}],["project",{"_index":1185,"title":{},"body":{"index.html":{}}}],["promise",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":714,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":338,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":311,"title":{"properties.html":{}},"body":{"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"classes/LoginDto.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"properties.html":{}}}],["protocol",{"_index":927,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["protocol}://${host",{"_index":931,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["provide",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["provider",{"_index":674,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/LoginProvider.html":{}}}],["providers",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/claims.service",{"_index":464,"title":{},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{}}}],["providers/create",{"_index":1035,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/find",{"_index":1037,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/hashing.provider",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/items.service",{"_index":822,"title":{},"body":{"controllers/ItemsController.html":{},"modules/ItemsModule.html":{}}}],["providers/login.provider",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/pagination.provider",{"_index":908,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/users.service",{"_index":1017,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providing",{"_index":355,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["public",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["queries",{"_index":448,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":446,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto",{"_index":462,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto.ts",{"_index":723,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":948,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:15",{"_index":760,"title":{},"body":{"classes/GetUsersBaseDto.html":{}}}],["query.dto.ts:17",{"_index":753,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:18",{"_index":731,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["query.dto.ts:24",{"_index":747,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:25",{"_index":729,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["query.dto.ts:31",{"_index":751,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:32",{"_index":727,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["query.dto.ts:38",{"_index":748,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:45",{"_index":754,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:7",{"_index":947,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryconditions",{"_index":914,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["range",{"_index":749,"title":{},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["read",{"_index":1195,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":323,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reflect",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":316,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":967,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["refreshing",{"_index":971,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["refreshtoken",{"_index":713,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":964,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["register",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(registerdto",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":241,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registered",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registeruser",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(@body",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(registerdto",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{}}}],["repository",{"_index":498,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":936,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":922,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["represents",{"_index":419,"title":{},"body":{"entities/Claim.html":{},"classes/CreateClaimDto.html":{},"entities/Item.html":{},"classes/PatchItemDto.html":{},"entities/User.html":{}}}],["request",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":105,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":510,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('unable",{"_index":524,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception(error",{"_index":887,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["required",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":350,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["response",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["response.interface.ts",{"_index":669,"title":{},"body":{"interfaces/ErrorResponse.html":{},"interfaces/SuccessResponse.html":{},"coverage.html":{}}}],["response.util",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["response.util.ts",{"_index":1094,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["responsible",{"_index":764,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["results",{"_index":106,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["route",{"_index":436,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["run",{"_index":1169,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":370,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":657,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["save",{"_index":522,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{}}}],["scalable",{"_index":1158,"title":{},"body":{"index.html":{}}}],["schema",{"_index":420,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":710,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["sensitive",{"_index":654,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["server",{"_index":1159,"title":{},"body":{"index.html":{}}}],["service",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["setmetadata(auth_type_key",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1160,"title":{},"body":{"index.html":{}}}],["sign",{"_index":696,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["signtoken",{"_index":688,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":692,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["single",{"_index":508,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["skip",{"_index":923,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":622,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["sponsors",{"_index":1188,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1133,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../claimstatus.enum.ts",{"_index":1135,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../environment.validation.ts",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":1149,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../itemstatus.enum.ts",{"_index":1136,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1148,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../success",{"_index":1150,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":216,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":217,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1034,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constants",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1068,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":1069,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1074,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":875,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:21",{"_index":878,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dtos/login.dto.ts:35",{"_index":880,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dtos/refresh",{"_index":965,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/register.dto.ts",{"_index":972,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dtos/register.dto.ts:18",{"_index":979,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/register.dto.ts:28",{"_index":978,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/register.dto.ts:37",{"_index":981,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/register.dto.ts:52",{"_index":980,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/register.dto.ts:61",{"_index":977,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/enums/auth",{"_index":321,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":310,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:19",{"_index":317,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:26",{"_index":318,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":768,"title":{},"body":{"interfaces/IActiveUser.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:13",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:29",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:38",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:46",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":354,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:11",{"_index":366,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:23",{"_index":363,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":684,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":646,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":763,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:10",{"_index":766,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":767,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/login.provider.ts",{"_index":881,"title":{},"body":{"injectables/LoginProvider.html":{},"coverage.html":{}}}],["src/auth/providers/login.provider.ts:17",{"_index":882,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["src/auth/providers/login.provider.ts:33",{"_index":883,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["src/claims/claim.entity",{"_index":791,"title":{},"body":{"entities/Item.html":{},"entities/User.html":{}}}],["src/claims/claim.entity.ts",{"_index":383,"title":{},"body":{"entities/Claim.html":{},"coverage.html":{}}}],["src/claims/claim.entity.ts:17",{"_index":403,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:25",{"_index":409,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:32",{"_index":400,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:35",{"_index":396,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:38",{"_index":411,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:41",{"_index":393,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:44",{"_index":406,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claims.controller.ts",{"_index":423,"title":{},"body":{"controllers/ClaimsController.html":{},"coverage.html":{}}}],["src/claims/claims.controller.ts:35",{"_index":435,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.controller.ts:56",{"_index":447,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.controller.ts:77",{"_index":454,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.module.ts",{"_index":486,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["src/claims/dtos/create",{"_index":536,"title":{},"body":{"classes/CreateClaimDto.html":{},"coverage.html":{}}}],["src/claims/dtos/get",{"_index":722,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"coverage.html":{}}}],["src/claims/enums/claimstatus.enum.ts",{"_index":1139,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/claims/providers/claims.service.ts",{"_index":491,"title":{},"body":{"injectables/ClaimsService.html":{},"coverage.html":{}}}],["src/claims/providers/claims.service.ts:17",{"_index":499,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/providers/claims.service.ts:30",{"_index":501,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/providers/claims.service.ts:52",{"_index":503,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/providers/claims.service.ts:75",{"_index":506,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":734,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":513,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":892,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":489,"title":{},"body":{"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/UsersModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":907,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":514,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":909,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:10",{"_index":912,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:13",{"_index":916,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/response/interfaces/error",{"_index":668,"title":{},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/common/response/interfaces/success",{"_index":985,"title":{},"body":{"interfaces/SuccessResponse.html":{},"coverage.html":{}}}],["src/common/response/utils/error",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/response/utils/success",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/environment.validation.ts",{"_index":1096,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/items/dtos/create",{"_index":552,"title":{},"body":{"classes/CreateItemDto.html":{},"coverage.html":{}}}],["src/items/dtos/get",{"_index":746,"title":{},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"coverage.html":{}}}],["src/items/dtos/patch",{"_index":952,"title":{},"body":{"classes/PatchItemDto.html":{},"coverage.html":{}}}],["src/items/enums/itemstatus.enum.ts",{"_index":1144,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/items/item.entity",{"_index":417,"title":{},"body":{"entities/Claim.html":{}}}],["src/items/item.entity.ts",{"_index":770,"title":{},"body":{"entities/Item.html":{},"coverage.html":{}}}],["src/items/item.entity.ts:15",{"_index":782,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:18",{"_index":787,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:21",{"_index":784,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:24",{"_index":774,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:27",{"_index":781,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:35",{"_index":788,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:38",{"_index":786,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:41",{"_index":780,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:44",{"_index":785,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:47",{"_index":779,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:50",{"_index":789,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:57",{"_index":778,"title":{},"body":{"entities/Item.html":{}}}],["src/items/items.controller.ts",{"_index":799,"title":{},"body":{"controllers/ItemsController.html":{},"coverage.html":{}}}],["src/items/items.controller.ts:36",{"_index":805,"title":{},"body":{"controllers/ItemsController.html":{}}}],["src/items/items.controller.ts:57",{"_index":811,"title":{},"body":{"controllers/ItemsController.html":{}}}],["src/items/items.controller.ts:78",{"_index":808,"title":{},"body":{"controllers/ItemsController.html":{}}}],["src/items/items.controller.ts:97",{"_index":817,"title":{},"body":{"controllers/ItemsController.html":{}}}],["src/items/items.module.ts",{"_index":839,"title":{},"body":{"modules/ItemsModule.html":{}}}],["src/items/providers/items.service.ts",{"_index":843,"title":{},"body":{"injectables/ItemsService.html":{},"coverage.html":{}}}],["src/items/providers/items.service.ts:18",{"_index":845,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:30",{"_index":847,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:52",{"_index":848,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:75",{"_index":849,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:99",{"_index":851,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/main.ts",{"_index":1101,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dtos/create",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":758,"title":{},"body":{"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":960,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":636,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":672,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:20",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:33",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:42",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:63",{"_index":1053,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:87",{"_index":1052,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:97",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":418,"title":{},"body":{"entities/Claim.html":{},"injectables/GenerateTokensProvider.html":{}}}],["src/users/user.entity.ts",{"_index":986,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":993,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:17",{"_index":994,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":992,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":995,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:26",{"_index":990,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":996,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:33",{"_index":989,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1000,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:35",{"_index":1004,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":1013,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:74",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":1009,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1032,"title":{},"body":{"modules/UsersModule.html":{}}}],["staging",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":1170,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1173,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1175,"title":{},"body":{"index.html":{}}}],["started",{"_index":1152,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1163,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1061,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":313,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":129,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"classes/CreateItemDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":670,"title":{},"body":{"interfaces/ErrorResponse.html":{},"miscellaneous/functions.html":{}}}],["stay",{"_index":1197,"title":{},"body":{"index.html":{}}}],["string",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"classes/LoginDto.html":{},"interfaces/Paginated.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":704,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/IActiveUser.html":{},"injectables/LoginProvider.html":{}}}],["submitted",{"_index":1140,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["success",{"_index":895,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"interfaces/SuccessResponse.html":{},"miscellaneous/functions.html":{}}}],["successfully",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apibody({required",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiparam({name",{"_index":453,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiquery({name",{"_index":445,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["successresponse",{"_index":984,"title":{"interfaces/SuccessResponse.html":{}},"body":{"interfaces/SuccessResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["summary",{"_index":128,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1189,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1207,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":694,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"interfaces/SuccessResponse.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":566,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["take",{"_index":924,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["test",{"_index":1178,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1181,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1180,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1177,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1187,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":324,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":130,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[authtype]).flat",{"_index":333,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.claimrepository",{"_index":530,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.create(createclaimdto",{"_index":519,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.findoneby",{"_index":532,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.save(newclaim",{"_index":523,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimsservice.create(createclaimdto",{"_index":469,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.findall(getclaimsquerydto",{"_index":476,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.findonebyid(getclaimsquerydto.id",{"_index":481,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1054,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.extractrequestfromheader(request",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebyemailprovider.findonebyemail(email",{"_index":1057,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyid(patchitemdto.id",{"_index":859,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.hashingprovider.comparepassword(logindto.password",{"_index":885,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":661,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.itemrepository",{"_index":856,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemrepository.create(createitemdto",{"_index":854,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemrepository.findoneby",{"_index":857,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemrepository.save(item",{"_index":874,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemrepository.save(newitem",{"_index":855,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemsservice.create(createitemdto",{"_index":826,"title":{},"body":{"controllers/ItemsController.html":{}}}],["this.itemsservice.findall(getitemsquerydto",{"_index":829,"title":{},"body":{"controllers/ItemsController.html":{}}}],["this.itemsservice.findonebyid(getitemsparamsdto.id",{"_index":832,"title":{},"body":{"controllers/ItemsController.html":{}}}],["this.itemsservice.update(patchitemdto",{"_index":834,"title":{},"body":{"controllers/ItemsController.html":{}}}],["this.jwtconfiguration",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":717,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":707,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":709,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":720,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":711,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["this.jwtservice.signasync(payload",{"_index":891,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["this.jwtservice.signasync(payloaddata",{"_index":712,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.loginprovider.login(logindto",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":529,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride",{"_index":327,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.request.headers.host",{"_index":929,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":928,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signtoken",{"_index":715,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":719,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.userrepository",{"_index":1055,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":663,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findone",{"_index":649,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":682,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":664,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1021,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getusersquerydto",{"_index":1023,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(logindto.email",{"_index":884,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["through",{"_index":337,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":517,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["token.dto.ts",{"_index":966,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:21",{"_index":970,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:15",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:27",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:55",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":686,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{}}}],["tokens.provider.ts",{"_index":685,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:14",{"_index":689,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:28",{"_index":695,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:48",{"_index":691,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":898,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":900,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1198,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":538,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/LoginDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{}}}],["transformer",{"_index":743,"title":{},"body":{"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"injectables/PaginationProvider.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["try",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1203,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{}}}],["type.enum.ts",{"_index":1134,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":413,"title":{},"body":{"entities/Claim.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([claim",{"_index":490,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["typeormmodule.forfeature([item",{"_index":842,"title":{},"body":{"modules/ItemsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1039,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":100,"title":{},"body":{"guards/AccessTokenGuard.html":{},"index.html":{}}}],["unauthorized",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception",{"_index":319,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/LoginProvider.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('incorect",{"_index":890,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["unauthorizedexception('user",{"_index":683,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unclaimed",{"_index":598,"title":{},"body":{"classes/CreateItemDto.html":{},"miscellaneous/enumerations.html":{}}}],["unclaimed'})@isenum(itemstatus)@isnotempty",{"_index":583,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":991,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":1176,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ClaimsController.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ItemsController.html":{},"injectables/LoginProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1218,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":102,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["update",{"_index":815,"title":{},"body":{"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{}}}],["update(patchitemdto",{"_index":850,"title":{},"body":{"injectables/ItemsService.html":{}}}],["updated",{"_index":816,"title":{},"body":{"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["updatedat",{"_index":389,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":410,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["updateitem",{"_index":802,"title":{},"body":{"controllers/ItemsController.html":{}}}],["updateitem(@body",{"_index":833,"title":{},"body":{"controllers/ItemsController.html":{}}}],["updateitem(patchitemdto",{"_index":812,"title":{},"body":{"controllers/ItemsController.html":{}}}],["updateuser",{"_index":1003,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@body",{"_index":1024,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(patchuserdto",{"_index":1014,"title":{},"body":{"controllers/UsersController.html":{}}}],["updating",{"_index":961,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["url",{"_index":567,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["url(this.request.url",{"_index":933,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":659,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["useclass",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":346,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usefactory",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":77,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"interfaces/IActiveUser.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["user'})@isnotempty()@isstring",{"_index":969,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["user.claims",{"_index":391,"title":{},"body":{"entities/Claim.html":{}}}],["user.decorator.ts",{"_index":1070,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":645,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:18",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":963,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:28",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":627,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":624,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":718,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["user.entity",{"_index":644,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":716,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["user.interface",{"_index":702,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["user.interface.ts",{"_index":769,"title":{},"body":{"interfaces/IActiveUser.html":{},"coverage.html":{}}}],["user.password",{"_index":886,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["user.provider",{"_index":1036,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":637,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:11",{"_index":641,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:24",{"_index":643,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user/1",{"_index":1025,"title":{},"body":{"controllers/UsersController.html":{}}}],["user?.[field",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":697,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["username",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":640,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":759,"title":{},"body":{"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":1012,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1033,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["userscontroller",{"_index":999,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":147,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":297,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":373,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["valid",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["valid('development",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["validationschema",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":550,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/LoginDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":945,"title":{},"body":{"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":771,"title":{},"body":{"entities/Item.html":{},"entities/User.html":{}}}],["variable",{"_index":1064,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":189,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":103,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["verified",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["version",{"_index":1216,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":1171,"title":{},"body":{"index.html":{}}}],["website",{"_index":1201,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["yes",{"_index":698,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{}}}],["you'd",{"_index":1192,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["za",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["zoom",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard for access token\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                        \n                    \n\n\n            \n                \n                        Method to check if access token is valid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Context of request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { HttpException, HttpStatus } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\n\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\nimport { createErrorResponse } from 'src/common/response/utils/error-response.util';\n/**\n * Guard for access token\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Method to check if access token is valid\n   * @param context Context of request\n   * @returns boolean\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Extract request from context\n    const request = context.switchToHttp().getRequest();\n\n    // Extract token from request header authorization\n    const token = this.extractRequestFromHeader(request);\n\n    // Validate token\n    if (!token) {\n      const error = 'Unauthorized';\n      const message = 'User has no valid access token';\n      const response = createErrorResponse(error, message, HttpStatus.UNAUTHORIZED); // prettier-ignore\n      throw new HttpException(response, HttpStatus.UNAUTHORIZED);\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration); // prettier-ignore\n      request[REQUEST_USER_KEY] = payload;\n    } catch {\n      const error = 'Unauthorized';\n      const message = 'Access token not verified';\n      const response = createErrorResponse(error, message, HttpStatus.UNAUTHORIZED); // prettier-ignore\n      throw new HttpException(response, HttpStatus.UNAUTHORIZED);\n    }\n\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get welcome message'})@ApiResponse({status: 200, description: 'Lost and Found API'})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get welcome message' })\n  @ApiResponse({ status: 200, description: 'Lost and Found API' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nClaimsModule\n\nClaimsModule\n\nAppModule -->\n\nClaimsModule->AppModule\n\n\n\n\n\nItemsModule\n\nItemsModule\n\nAppModule -->\n\nItemsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Main module to bootstrap the application\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ClaimsModule\n                        \n                        \n                            ItemsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { ItemsModule } from './items/items.module';\nimport { ClaimsModule } from './claims/claims.module';\nimport { PaginationModule } from './common/pagination/pagination.module';\n\nimport jwtConfig from './auth/config/jwt.config';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentSchema from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV; // Get the current environment\n\n/**\n * Main module to bootstrap the application\n */\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentSchema,\n    }), // Load environment variables\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      }),\n    }), // Load database configuration\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    AuthModule,\n    UsersModule,\n    ItemsModule,\n    ClaimsModule,\n    PaginationModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    { provide: APP_GUARD, useClass: AuthenticationGuard },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'This is the Lost and Found API';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                loginUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginUser(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiOperation({summary: 'Login a user'})@ApiResponse({status: 200, description: 'User logged in successfully'})@ApiBody({required: true, type: LoginDto, description: 'User login details'})@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiOperation({summary: 'Logout a user'})@ApiResponse({status: 200, description: 'User logged out successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({summary: 'Register a new user'})@ApiResponse({status: 201, description: 'User registered successfully'})@ApiBody({required: true, type: RegisterDto, description: 'User registration details'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { LoginDto } from './dtos/login.dto';\nimport { RegisterDto } from './dtos/register.dto';\nimport { AuthService } from './providers/auth.service';\n\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\n\n/**\n * Controller for authentication\n */\n@Auth(AuthType.None)\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  @ApiOperation({ summary: 'Register a new user' })\n  @ApiResponse({ status: 201, description: 'User registered successfully' })\n  @ApiBody({\n    required: true,\n    type: RegisterDto,\n    description: 'User registration details',\n  })\n  public async registerUser(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @Post('login')\n  @ApiOperation({ summary: 'Login a user' })\n  @ApiResponse({ status: 200, description: 'User logged in successfully' })\n  @ApiBody({\n    required: true,\n    type: LoginDto,\n    description: 'User login details',\n  })\n  @HttpCode(HttpStatus.OK)\n  public async loginUser(@Body() loginDto: LoginDto) {\n    const token = await this.authService.login(loginDto);\n    return createSuccessResponse('User logged in successfully', true, token);\n  }\n\n  @Post('logout')\n  @ApiOperation({ summary: 'Logout a user' })\n  @ApiResponse({ status: 200, description: 'User logged out successfully' })\n  public async logout() {\n    return 'Logout user';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nLoginProvider\n\nLoginProvider\n\nAuthModule -->\n\nLoginProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to handle authentication\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            LoginProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { AuthController } from './auth.controller';\nimport jwtConfig from './config/jwt.config';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { LoginProvider } from './providers/login.provider';\nimport { UsersModule } from '../users/users.module';\n\n/**\n * Module to handle authentication\n */\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    { provide: HashingProvider, useClass: BcryptProvider },\n    LoginProvider,\n    GenerateTokensProvider,\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle authentication\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                logout\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loginProvider: LoginProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor of Auth service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loginProvider\n                                                  \n                                                        \n                                                                        LoginProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:38\n                        \n                    \n\n\n            \n                \n                        The method to login a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user login details\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The logged in user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:46\n                        \n                    \n\n\n            \n                \n                        The method to logout a user\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A message indicating the user has been logged out\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:29\n                        \n                    \n\n\n            \n                \n                        The method to register a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user registration details\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The registered user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\n\nimport { LoginProvider } from './login.provider';\nimport { LoginDto } from '../dtos/login.dto';\nimport { RegisterDto } from '../dtos/register.dto';\n\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service to handle authentication\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Constructor of Auth service\n   * @description Injects LoginProvider\n   */\n  constructor(\n    private readonly loginProvider: LoginProvider,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * The method to register a new user\n   * @param registerDto The user registration details\n   * @returns The registered user\n   */\n  public async register(registerDto: RegisterDto) {\n    return registerDto;\n  }\n\n  /**\n   * The method to login a user\n   * @param loginDto The user login details\n   * @returns The logged in user\n   */\n  public async login(loginDto: LoginDto) {\n    return await this.loginProvider.login(loginDto);\n  }\n\n  /**\n   * The method to logout a user\n   * @returns A message indicating the user has been logged out\n   */\n  public async logout() {\n    return 'Logout user';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardmap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\n\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constants';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  // prettier-ignore\n  private readonly authTypeGuardmap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    // Get authTypes from reflector\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    // Map authTypes to guards\n    const guards = authTypes.map((authType) => this.authTypeGuardmap[authType]).flat(); // prettier-ignore\n\n    // Declare default error\n    let error = new UnauthorizedException();\n\n    // Loop through guards\n    for (const guard of guards) {\n      const canActivate = await Promise.resolve(\n        // Here the AccessToken Guard Will be fired and check if user has permissions to acces\n        // Later Multiple AuthTypes can be used even if one of them returns true\n        // The user is Authorised to access the resource\n        guard.canActivate(context),\n      ).catch((e) => {\n        error = e;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    // Throw error if user is not authorised\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for providing hashing implementation\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\n\nimport { HashingProvider } from './hashing.provider';\n\n/**\n * Service for providing hashing implementation\n */\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  public async hashPassword(data: string | Buffer): Promise {\n    // Generate a salt for bcrypt\n    const salt = await bcrypt.genSalt(10);\n\n    // Hash the password using bcrypt\n    const hashedPassword = await bcrypt.hash(data, salt);\n\n    // Return the hashed password\n    return hashedPassword;\n  }\n\n  // prettier-ignore\n  public async comparePassword(data: string | Buffer, encrypted: string): Promise {\n    // Compare the password to the encrypted password\n    const isMatch = await bcrypt.compare(data, encrypted);\n\n    // Return the match\n    return isMatch;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Claim.html":{"url":"entities/Claim.html","title":"entity - Claim","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Claim\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/claim.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Claim Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                author\n                            \n                            \n                                    \n                                    Readonly\n                                createdAt\n                            \n                            \n                                    \n                                dateLost\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    Readonly\n                                item\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.claims, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateLost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        item\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Item\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, item => item.claim)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ClaimStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { ManyToOne, OneToOne } from 'typeorm';\n\nimport { ClaimStatus } from './enums/claimStatus.enum';\n\nimport { Item } from 'src/items/item.entity';\nimport { User } from 'src/users/user.entity';\n\n/**\n * Claim Entity\n * @description Represents the schema of a claim\n */\n@Entity()\nexport class Claim {\n  @PrimaryGeneratedColumn()\n  readonly id: number;\n\n  @Column({\n    type: 'enum',\n    enum: ClaimStatus,\n    nullable: false,\n    default: ClaimStatus.SUBMITTED,\n  })\n  status: ClaimStatus;\n\n  @Column({\n    type: 'date',\n    nullable: false,\n    default: new Date(),\n  })\n  dateLost: Date;\n\n  @CreateDateColumn()\n  readonly createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToOne(() => User, (user) => user.claims, { eager: true })\n  readonly author: User;\n\n  @OneToOne(() => Item, (item) => item.claim)\n  readonly item: Item;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimsController.html":{"url":"controllers/ClaimsController.html","title":"controller - ClaimsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/claims.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                claims\n            \n\n\n            \n                Description\n            \n            \n                Controller for Claims\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createClaim\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getClaims\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createClaim\n                        \n                    \n                \n            \n            \n                \n                        \n                    createClaim(createClaimDto: CreateClaimDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new claim'})@ApiResponse({status: 201, description: 'Claim created successfully'})@ApiBody({required: true, type: CreateClaimDto, description: 'Claim creation details'})\n                \n            \n\n                    \n                        \n                            Defined in src/claims/claims.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Route for handling create claim request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createClaimDto\n                                            \n                                                            CreateClaimDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming POST request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getClaims\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClaims(getClaimsQueryDto: GetClaimsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all claims'})@ApiResponse({status: 200, description: 'Claims fetched successfully'})@ApiQuery({name: 'getClaimsQueryDto', required: false, type: GetClaimsQueryDto, description: 'Claims Query DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/claims/claims.controller.ts:56\n                        \n                    \n\n\n            \n                \n                        Route for handling get claims request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getClaimsQueryDto\n                                            \n                                                            GetClaimsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Claim[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(getClaimsQueryDto: GetClaimsParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a claim by id'})@ApiResponse({status: 200, description: 'Claim fetched successfully'})@ApiParam({name: 'getClaimsQueryDto', required: true, type: GetClaimsParamDto, description: 'Claim Param DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/claims/claims.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Route for handling get claim request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getClaimsQueryDto\n                                            \n                                                            GetClaimsParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request params\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Claim\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Query } from '@nestjs/common';\nimport { Body, Get, Post } from '@nestjs/common';\nimport { ApiBody, ApiParam, ApiQuery, ApiTags } from '@nestjs/swagger';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\nimport { CreateClaimDto } from './dtos/create-claim.dto';\nimport { GetClaimsParamDto } from './dtos/get-claims-param.dto';\nimport { GetClaimsQueryDto } from './dtos/get-claims-query.dto';\nimport { ClaimsService } from './providers/claims.service';\n\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\n\n/**\n * Controller for Claims\n */\n@Controller('claims')\n@ApiTags('Claims')\nexport class ClaimsController {\n  constructor(private readonly claimsService: ClaimsService) {}\n\n  /**\n   * Route for handling create claim request\n   * @param createClaimDto A DTO used to validate incoming POST request\n   * @example HTTP POST /claim\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new claim' })\n  @ApiResponse({ status: 201, description: 'Claim created successfully' })\n  @ApiBody({\n    required: true,\n    type: CreateClaimDto,\n    description: 'Claim creation details',\n  })\n  public async createClaim(@Body() createClaimDto: CreateClaimDto) {\n    const claim = await this.claimsService.create(createClaimDto);\n    return createSuccessResponse('Claim created successfully', true, claim);\n  }\n\n  /**\n   * Route for handling get claims request\n   * @param getClaimsQueryDto A DTO used to validate incoming GET request queries\n   * @example HTTP GET /claims\n   * @returns Claim[]\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all claims' })\n  @ApiResponse({ status: 200, description: 'Claims fetched successfully' })\n  @ApiQuery({\n    name: 'getClaimsQueryDto',\n    required: false,\n    type: GetClaimsQueryDto,\n    description: 'Claims Query DTO',\n    example: { page: 1, limit: 10 },\n  })\n  public async getClaims(@Query() getClaimsQueryDto: GetClaimsQueryDto) {\n    const claims = await this.claimsService.findAll(getClaimsQueryDto);\n    return createSuccessResponse('Claims fetched successfully', true, claims);\n  }\n\n  /**\n   * Route for handling get claim request\n   * @param getClaimsQueryDto A DTO used to validate incoming GET request params\n   * @example HTTP GET /claims/1\n   * @returns Claim\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a claim by id' })\n  @ApiResponse({ status: 200, description: 'Claim fetched successfully' })\n  @ApiParam({\n    name: 'getClaimsQueryDto',\n    required: true,\n    type: GetClaimsParamDto,\n    description: 'Claim Param DTO',\n    example: { id: 1 },\n  })\n  public async getItem(@Param() getClaimsQueryDto: GetClaimsParamDto) {\n    const claim = await this.claimsService.findOneById(getClaimsQueryDto.id);\n    return createSuccessResponse('Claim fetched successfully', true, claim);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimsModule.html":{"url":"modules/ClaimsModule.html","title":"module - ClaimsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ClaimsModule\n\n\n\ncluster_ClaimsModule_imports\n\n\n\ncluster_ClaimsModule_exports\n\n\n\ncluster_ClaimsModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nClaimsModule\n\nClaimsModule\n\nClaimsModule -->\n\nPaginationModule->ClaimsModule\n\n\n\n\n\nClaimsService \n\nClaimsService \n\nClaimsService  -->\n\nClaimsModule->ClaimsService \n\n\n\n\n\nClaimsService\n\nClaimsService\n\nClaimsModule -->\n\nClaimsService->ClaimsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/claims/claims.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Claim } from './claim.entity';\nimport { ClaimsController } from './claims.controller';\nimport { ClaimsService } from './providers/claims.service';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  imports: [PaginationModule, TypeOrmModule.forFeature([Claim])],\n  controllers: [ClaimsController],\n  providers: [ClaimsService],\n  exports: [ClaimsService],\n})\nexport class ClaimsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimsService.html":{"url":"injectables/ClaimsService.html","title":"injectable - ClaimsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/providers/claims.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service dealing with claims. It is used to provide the claim data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationProvider: PaginationProvider, claimRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/claims/providers/claims.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createClaimDto: CreateClaimDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/claims/providers/claims.service.ts:30\n                        \n                    \n\n\n            \n                \n                        The method to create a new item in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createClaimDto\n                                            \n                                                            CreateClaimDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: GetClaimsQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/claims/providers/claims.service.ts:52\n                        \n                    \n\n\n            \n                \n                        The method to get all claims from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetClaimsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GetClaimsQueryDto for getting queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Item[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/claims/providers/claims.service.ts:75\n                        \n                    \n\n\n            \n                \n                        The method to find a single claim by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Claim\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NotFoundException } from '@nestjs/common';\nimport { RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Claim } from '../claim.entity';\nimport { CreateClaimDto } from '../dtos/create-claim.dto';\nimport { GetClaimsQueryDto } from '../dtos/get-claims-query.dto';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n/**\n * Service dealing with claims. It is used to provide the claim data.\n */\n@Injectable()\nexport class ClaimsService {\n  constructor(\n    private readonly paginationProvider: PaginationProvider,\n    @InjectRepository(Claim)\n    private readonly claimRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new item in the database\n   * @param createItemDto\n   * @returns Item\n   * @throws RequestTimeoutException\n   */\n  public async create(createClaimDto: CreateClaimDto): Promise {\n    // Create Claim\n    let newClaim = this.claimRepository.create(createClaimDto);\n\n    try {\n      // Connect to db to save new claim\n      newClaim = await this.claimRepository.save(newClaim);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save claim', {\n        description: 'Database connection error',\n      });\n    }\n\n    return newClaim;\n  }\n\n  /**\n   * The method to get all claims from the database\n   * @param query GetClaimsQueryDto for getting queries\n   * @returns Item[]\n   * @throws BadRequestException or RequestTimeoutException\n   */\n  public async findAll(query: GetClaimsQueryDto): Promise> {\n    const { page, limit, ...queries } = query;\n\n    const filters = Object.keys(queries).length ? queries : undefined;\n\n    try {\n      // prettier-ignore\n      const claims = await this.paginationProvider.paginateQuery({ limit, page }, this.claimRepository, filters);\n\n      return claims;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n  }\n\n  /**\n   * The method to find a single claim by ID\n   * @param id\n   * @returns Claim\n   * @throws NotFoundException or RequestTimeoutException\n   */\n  public async findOneById(id: number): Promise {\n    let claim = undefined;\n\n    try {\n      claim = await this.claimRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!claim) {\n      throw new NotFoundException('Claim id does not exist');\n    }\n\n    return claim;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimDto.html":{"url":"classes/CreateClaimDto.html","title":"class - CreateClaimDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/create-claim.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the data transfer object for creating a claim.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                dateLost\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        dateLost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'date', required: true, format: 'date', description: 'Date item was lost', example: '2021-09-01'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/create-claim.dto.ts:21\n                        \n                    \n\n            \n                \n                    Date item was lost\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsISO8601, IsNotEmpty } from 'class-validator';\n\n/**\n * Represents the data transfer object for creating a claim.\n */\nexport class CreateClaimDto {\n  /**\n   * Date item was lost\n   * @example 2021-09-01\n   */\n  @ApiProperty({\n    type: 'date',\n    required: true,\n    format: 'date',\n    description: 'Date item was lost',\n    example: '2021-09-01',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  readonly dateLost: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateItemDto.html":{"url":"classes/CreateItemDto.html","title":"class - CreateItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/create-item.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for creating an item\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                dateFound\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isArchived\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                locationFound\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, format: 'string', description: 'Category of item', example: 'Electronics'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:43\n                        \n                    \n\n            \n                \n                    Category of item\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        dateFound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'date', required: true, format: 'date', description: 'Date item was found', example: '2021-09-01'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:122\n                        \n                    \n\n            \n                \n                    Date item was found\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false, format: 'string', description: 'Description of item', example: 'This is an iPhone 12 Pro.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:58\n                        \n                    \n\n            \n                \n                    Description of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'url', required: true, format: 'url', description: 'Featured image URL of tag', example: 'https://example.com/image.jpg'})@IsUrl()@IsNotEmpty()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:89\n                        \n                    \n\n            \n                \n                    Item image URL\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isArchived\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'boolean', required: true, format: 'boolean', description: 'Determines if the item has been archived', example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        locationFound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, format: 'string', description: 'Location where item was found', example: 'Lagos'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:107\n                        \n                    \n\n            \n                \n                    Location where item was found\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, format: 'string', description: 'User name', example: 'iPhone 12 Pro'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:26\n                        \n                    \n\n            \n                \n                    Item name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'enum', required: true, format: 'enum', description: 'Status of item', example: 'UNCLAIMED'})@IsEnum(ItemStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:73\n                        \n                    \n\n            \n                \n                    Status of item\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsBoolean, IsEnum, IsISO8601, IsString, IsUrl } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { ItemStatus } from '../enums/itemStatus.enum';\n\n/**\n * Data transfer object for creating an item\n */\nexport class CreateItemDto {\n  /**\n   * Item name\n   * @example iPhone 12 Pro\n   */\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    format: 'string',\n    description: 'User name',\n    example: 'iPhone 12 Pro',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly name: string;\n\n  /**\n   * Category of item\n   * @example Electronics\n   */\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    format: 'string',\n    description: 'Category of item',\n    example: 'Electronics',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly category: string;\n\n  /**\n   * Description of tag\n   * @example This is a description.\n   */\n  @ApiProperty({\n    type: 'string',\n    required: false,\n    format: 'string',\n    description: 'Description of item',\n    example: 'This is an iPhone 12 Pro.',\n  })\n  @IsString()\n  @IsOptional()\n  readonly description?: string;\n\n  /**\n   * Status of item\n   * @example UNCLAIMED\n   */\n  @ApiProperty({\n    type: 'enum',\n    required: true,\n    format: 'enum',\n    description: 'Status of item',\n    example: 'UNCLAIMED',\n  })\n  @IsEnum(ItemStatus)\n  @IsNotEmpty()\n  status: ItemStatus;\n\n  /**\n   * Item image URL\n   * @example https://example.com/image.jpg\n   */\n  @ApiProperty({\n    type: 'url',\n    required: true,\n    format: 'url',\n    description: 'Featured image URL of tag',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsUrl()\n  @IsNotEmpty()\n  @MaxLength(1024)\n  readonly imageUrl: string;\n\n  /**\n   * Location where item was found\n   * @example Lagos\n   */\n\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    format: 'string',\n    description: 'Location where item was found',\n    example: 'Lagos',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly locationFound: string;\n\n  /**\n   * Date item was found\n   * @example 2021-09-01\n   */\n  @ApiProperty({\n    type: 'date',\n    required: true,\n    format: 'date',\n    description: 'Date item was found',\n    example: '2021-09-01',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  readonly dateFound: Date;\n\n  @ApiPropertyOptional({\n    type: 'boolean',\n    required: true,\n    format: 'boolean',\n    description: 'Determines if the item has been archived',\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  isArchived?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for creating a user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email', example: 'johndoe@example.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User email\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User name', example: 'John Doe'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:18\n                        \n                    \n\n            \n                \n                    User name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123@'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:52\n                        \n                    \n\n            \n                \n                    User password\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone number', example: '08012345678'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n            \n                \n                    User phone number\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsEmail, IsNotEmpty } from 'class-validator';\nimport { Matches, MaxLength, MinLength } from 'class-validator';\n\n/**\n * Data transfer object for creating a user\n */\nexport class CreateUserDto {\n  /**\n   * User name\n   * @example John Doe\n   */\n  @ApiProperty({ description: 'User name', example: 'John Doe' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly name: string;\n\n  /**\n   * User email\n   * @example johndoe@example.com\n   */\n  @ApiProperty({ description: 'User email', example: 'johndoe@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  readonly email: string;\n\n  /**\n   * User phone number\n   * @example 08012345678\n   */\n  @ApiProperty({ description: 'User phone number', example: '08012345678' })\n  @IsString()\n  @IsNotEmpty()\n  readonly phoneNumber: string;\n\n  /**\n   * User password\n   * @example password123@\n   */\n  @ApiProperty({ description: 'User password', example: 'password123@' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashingProvider: HashingProvider, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:24\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RequestTimeoutException, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n  /**\n   * The method to create a new user in the database\n   * @param createUserDto\n   * @returns User\n   * @throws RequestTimeoutException or BadRequestException\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n\n    try {\n      // Connect to db to find user\n      existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      // Might save the details of the exception to db or log\n      // Information which is sensitive\n      throw new RequestTimeoutException(' ', {\n        description: 'Database connection error',\n      });\n    }\n\n    // Check if user already exists with same email\n    // Handle exception\n    if (existingUser) {\n      throw new BadRequestException('User already exists. Use another email.');\n    }\n\n    // prettier-ignore\n    const password = await this.hashingProvider.hashPassword(createUserDto.password);\n\n    // Create User\n    let newUser = this.userRepository.create({ ...createUserDto, password });\n\n    try {\n      // Connect to db to save new user\n      newUser = await this.userRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save user', {\n        description: 'Database connection error',\n      });\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/response/interfaces/error-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  error: string;\n  message: string;\n  statusCode: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider for finding one user by email\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor of FindOneUserByEmailProvider\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:28\n                        \n                    \n\n\n            \n                \n                        Finds one user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { User } from '../user.entity';\n\n/**\n * Provider for finding one user by email\n */\n@Injectable()\nexport class FindOneUserByEmailProvider {\n  /**\n   * Constructor of FindOneUserByEmailProvider\n   * @param userRepository\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Finds one user by email\n   * @param email\n   * @returns User\n   * @throws UnauthorizedException or RequestTimeoutException\n   */\n  public async findOneByEmail(email: string): Promise {\n    let user: User | undefined = undefined;\n\n    try {\n      user = await this.userRepository.findOneBy({ email });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    // Check if user already exists with same email\n    // Handle exception\n    if (!user) {\n      throw new UnauthorizedException('User does not exists');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to generate tokens\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:48\n                        \n                    \n\n\n            \n                \n                        Generate tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                tokens\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:28\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Sign a token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                token\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService, JwtSignOptions } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\n\nimport jwtConfig from '../config/jwt.config';\nimport { IActiveUser } from '../interfaces/active-user.interface';\n\nimport { User } from 'src/users/user.entity';\n\n/**\n * Service to generate tokens\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Sign a token\n   * @param userId\n   * @param expiresIn\n   * @param payload\n   * @returns token\n   */\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    const payloadData = { sub: userId, ...payload };\n\n    const options: JwtSignOptions = {\n      audience: this.jwtConfiguration.audience,\n      issuer: this.jwtConfiguration.issuer,\n      secret: this.jwtConfiguration.secret,\n      expiresIn,\n    };\n\n    const accessToken = await this.jwtService.signAsync(payloadData, options);\n\n    return accessToken;\n  }\n\n  /**\n   * Generate tokens\n   * @param user\n   * @returns tokens\n   */\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTTL,\n        { email: user.email },\n      ),\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTTL),\n    ]);\n    return { accessToken, refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsBaseDto.html":{"url":"classes/GetClaimsBaseDto.html","title":"class - GetClaimsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/get-claims-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base Data transfer object for getting claims\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                authorName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dateLost\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        authorName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/get-claims-query.dto.ts:32\n                        \n                    \n\n            \n                \n                    The authorName query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dateLost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/get-claims-query.dto.ts:25\n                        \n                    \n\n            \n                \n                    The dateLost query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ClaimStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/get-claims-query.dto.ts:18\n                        \n                    \n\n            \n                \n                    The status query\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsISO8601, IsString } from 'class-validator';\nimport { IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { ClaimStatus } from '../enums/claimStatus.enum';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting claims\n */\nclass GetClaimsBaseDto {\n  /**\n   * The status query\n   */\n  @IsEnum(ClaimStatus)\n  @IsOptional()\n  status?: ClaimStatus;\n\n  /**\n   * The dateLost query\n   */\n  @IsISO8601()\n  @IsOptional()\n  dateLost?: Date;\n\n  /**\n   * The authorName query\n   */\n  @IsString()\n  @IsOptional()\n  authorName?: string;\n}\n\n/**\n * Final Data transfer object for getting items\n */\nexport class GetClaimsQueryDto extends IntersectionType(\n  GetClaimsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsParamDto.html":{"url":"classes/GetClaimsParamDto.html","title":"class - GetClaimsParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/get-claims-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Claims param DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Claim id', example: 1})@IsInt()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/get-claims-param.dto.ts:17\n                        \n                    \n\n            \n                \n                    Claim ID\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * Claims param DTO\n */\nexport class GetClaimsParamDto {\n  /**\n   * Claim ID\n   * @example 1\n   */\n  @ApiPropertyOptional({ description: 'Claim id', example: 1 })\n  @IsInt()\n  @IsOptional()\n  @Type(() => Number)\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsQueryDto.html":{"url":"classes/GetClaimsQueryDto.html","title":"class - GetClaimsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/get-claims-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Final Data transfer object for getting items\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetClaimsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsISO8601, IsString } from 'class-validator';\nimport { IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { ClaimStatus } from '../enums/claimStatus.enum';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting claims\n */\nclass GetClaimsBaseDto {\n  /**\n   * The status query\n   */\n  @IsEnum(ClaimStatus)\n  @IsOptional()\n  status?: ClaimStatus;\n\n  /**\n   * The dateLost query\n   */\n  @IsISO8601()\n  @IsOptional()\n  dateLost?: Date;\n\n  /**\n   * The authorName query\n   */\n  @IsString()\n  @IsOptional()\n  authorName?: string;\n}\n\n/**\n * Final Data transfer object for getting items\n */\nexport class GetClaimsQueryDto extends IntersectionType(\n  GetClaimsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetItemsBaseDto.html":{"url":"classes/GetItemsBaseDto.html","title":"class - GetItemsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetItemsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/get-items-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base Data transfer object for getting items\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                from\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isArchived\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:24\n                        \n                    \n\n            \n                \n                    The category query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:38\n                        \n                    \n\n            \n                \n                    The from date range query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isArchived\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:31\n                        \n                    \n\n            \n                \n                    The archived query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ItemStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:17\n                        \n                    \n\n            \n                \n                    The status query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:45\n                        \n                    \n\n            \n                \n                    The to date range query\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsEnum, IsISO8601, IsString } from 'class-validator';\nimport { IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { ItemStatus } from '../enums/itemStatus.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting items\n */\nclass GetItemsBaseDto {\n  /**\n   * The status query\n   */\n  @IsEnum(ItemStatus)\n  @IsOptional()\n  status?: ItemStatus;\n\n  /**\n   * The category query\n   */\n  @IsString()\n  @IsOptional()\n  category?: string;\n\n  /**\n   * The archived query\n   */\n  @IsBoolean()\n  @IsOptional()\n  isArchived?: boolean;\n\n  /**\n   * The from date range query\n   */\n  @IsISO8601()\n  @IsOptional()\n  from?: Date;\n\n  /**\n   * The to date range query\n   */\n  @IsISO8601()\n  @IsOptional()\n  to?: Date;\n}\n\n/**\n * Final Data transfer object for getting items\n */\nexport class GetItemsQueryDto extends IntersectionType(\n  GetItemsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetItemsParamDto.html":{"url":"classes/GetItemsParamDto.html","title":"class - GetItemsParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetItemsParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/get-items-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Items param DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Item id', example: 1})@IsInt()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-param.dto.ts:17\n                        \n                    \n\n            \n                \n                    Claim ID\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * Items param DTO\n */\nexport class GetItemsParamDto {\n  /**\n   * Claim ID\n   * @example 1\n   */\n  @ApiPropertyOptional({ description: 'Item id', example: 1 })\n  @IsInt()\n  @IsOptional()\n  @Type(() => Number)\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetItemsQueryDto.html":{"url":"classes/GetItemsQueryDto.html","title":"class - GetItemsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetItemsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/get-items-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Final Data transfer object for getting items\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetItemsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsEnum, IsISO8601, IsString } from 'class-validator';\nimport { IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { ItemStatus } from '../enums/itemStatus.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting items\n */\nclass GetItemsBaseDto {\n  /**\n   * The status query\n   */\n  @IsEnum(ItemStatus)\n  @IsOptional()\n  status?: ItemStatus;\n\n  /**\n   * The category query\n   */\n  @IsString()\n  @IsOptional()\n  category?: string;\n\n  /**\n   * The archived query\n   */\n  @IsBoolean()\n  @IsOptional()\n  isArchived?: boolean;\n\n  /**\n   * The from date range query\n   */\n  @IsISO8601()\n  @IsOptional()\n  from?: Date;\n\n  /**\n   * The to date range query\n   */\n  @IsISO8601()\n  @IsOptional()\n  to?: Date;\n}\n\n/**\n * Final Data transfer object for getting items\n */\nexport class GetItemsQueryDto extends IntersectionType(\n  GetItemsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersBaseDto.html":{"url":"classes/GetUsersBaseDto.html","title":"class - GetUsersBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base Data transfer object for getting users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:15\n                        \n                    \n\n            \n                \n                    The name query\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting users\n */\nclass GetUsersBaseDto {\n  /**\n   * The name query\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n}\n\n/**\n * Final Data transfer object for getting users\n */\nexport class GetUsersQueryDto extends IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for getting users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID', example: 1})@IsInt()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:17\n                        \n                    \n\n            \n                \n                    User ID\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * DTO for getting users\n */\nexport class GetUsersParamDto {\n  /**\n   * User ID\n   * @example 1\n   */\n  @ApiPropertyOptional({ description: 'User ID', example: 1 })\n  @IsInt()\n  @IsOptional()\n  @Type(() => Number)\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersQueryDto.html":{"url":"classes/GetUsersQueryDto.html","title":"class - GetUsersQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Final Data transfer object for getting users\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting users\n */\nclass GetUsersBaseDto {\n  /**\n   * The name query\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n}\n\n/**\n * Final Data transfer object for getting users\n */\nexport class GetUsersQueryDto extends IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for hashing\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Service responsible for hashing\n */\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IActiveUser.html":{"url":"interfaces/IActiveUser.html","title":"interface - IActiveUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IActiveUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IActiveUser {\n  sub: number; // User id\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Item.html":{"url":"entities/Item.html","title":"entity - Item","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Item\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/item.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Item Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                claim\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                dateFound\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                isArchived\n                            \n                            \n                                    \n                                locationFound\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, claim => claim.item, {eager: true, onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateFound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isArchived\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locationFound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ItemStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:50\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { JoinColumn, OneToOne } from 'typeorm';\n\nimport { ItemStatus } from './enums/itemStatus.enum';\nimport { Claim } from 'src/claims/claim.entity';\n\n/**\n * Item Entity\n * @description Represents the schema of an Item\n */\n@Entity()\nexport class Item {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  name: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: false })\n  imageUrl: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  category: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: true, default: null })\n  description?: string;\n\n  @Column({\n    type: 'enum',\n    enum: ItemStatus,\n    nullable: false,\n    default: ItemStatus.UNCLAIMED,\n  })\n  status: ItemStatus;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  locationFound: string;\n\n  @Column({ type: 'date', nullable: false })\n  dateFound: Date;\n\n  @Column({ type: 'boolean', nullable: false, default: false })\n  isArchived: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToOne(() => Claim, (claim) => claim.item, {\n    eager: true,\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  claim: Claim;\n\n  // Add any additional methods or decorators as needed\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ItemsController.html":{"url":"controllers/ItemsController.html","title":"controller - ItemsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ItemsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/items.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                items\n            \n\n\n            \n                Description\n            \n            \n                Controller for items\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createItem\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getItem\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getItems\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    createItem(createItemDto: CreateItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new item'})@ApiResponse({status: 201, description: 'Item created successfully'})@ApiBody({required: true, type: CreateItemDto, description: 'Item creation details'})\n                \n            \n\n                    \n                        \n                            Defined in src/items/items.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Route for handling create item request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createItemDto\n                                            \n                                                            CreateItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming POST request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(getItemsParamsDto: GetItemsParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get an item by id'})@ApiResponse({status: 200, description: 'Item fetched successfully'})@ApiParam({name: 'getItemsParamsDto', required: true, type: GetItemsParamDto, description: 'Items Param DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/items/items.controller.ts:78\n                        \n                    \n\n\n            \n                \n                        Route for handling get item request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getItemsParamsDto\n                                            \n                                                            GetItemsParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request params\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Items\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getItems\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItems(getItemsQueryDto: GetItemsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all items'})@ApiResponse({status: 200, description: 'Items fetched successfully'})@ApiQuery({name: 'getItemsQueryDto', required: false, type: GetItemsQueryDto, description: 'Items Query DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/items/items.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Route for handling get items request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getItemsQueryDto\n                                            \n                                                            GetItemsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Items[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateItem(patchItemDto: PatchItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Update a item'})@ApiResponse({status: 200, description: 'Item updated successfully'})@ApiBody({required: true, type: PatchItemDto, description: 'Item update details'})\n                \n            \n\n                    \n                        \n                            Defined in src/items/items.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Route for handling patch item request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchItemDto\n                                            \n                                                            PatchItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming PATCH request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Query } from '@nestjs/common';\nimport { Body, Get, Patch, Post } from '@nestjs/common';\nimport { ApiBody, ApiParam, ApiQuery, ApiTags } from '@nestjs/swagger';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\nimport { CreateItemDto } from './dtos/create-item.dto';\nimport { GetItemsQueryDto } from './dtos/get-items-query.dto';\nimport { GetItemsParamDto } from './dtos/get-items-param.dto';\nimport { PatchItemDto } from './dtos/patch-item.dto';\nimport { ItemsService } from './providers/items.service';\n\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\n\n/**\n * Controller for items\n */\n@Controller('items')\n@ApiTags('Items')\nexport class ItemsController {\n  constructor(private readonly itemsService: ItemsService) {}\n\n  /**\n   * Route for handling create item request\n   * @param createItemDto A DTO used to validate incoming POST request\n   * @example HTTP POST /item\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new item' })\n  @ApiResponse({ status: 201, description: 'Item created successfully' })\n  @ApiBody({\n    required: true,\n    type: CreateItemDto,\n    description: 'Item creation details',\n  })\n  public async createItem(@Body() createItemDto: CreateItemDto) {\n    const item = await this.itemsService.create(createItemDto);\n    return createSuccessResponse('Item created successfully', true, item);\n  }\n\n  /**\n   * Route for handling get items request\n   * @param getItemsQueryDto A DTO used to validate incoming GET request queries\n   * @example HTTP GET /items\n   * @returns Items[]\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all items' })\n  @ApiResponse({ status: 200, description: 'Items fetched successfully' })\n  @ApiQuery({\n    name: 'getItemsQueryDto',\n    required: false,\n    type: GetItemsQueryDto,\n    description: 'Items Query DTO',\n    example: { page: 1, limit: 10 },\n  })\n  public async getItems(@Query() getItemsQueryDto: GetItemsQueryDto) {\n    const items = await this.itemsService.findAll(getItemsQueryDto);\n    return createSuccessResponse('Items fetched successfully', true, items);\n  }\n\n  /**\n   * Route for handling get item request\n   * @param getItemsParamsDto A DTO used to validate incoming GET request params\n   * @example HTTP GET /items/1\n   * @returns Items\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get an item by id' })\n  @ApiResponse({ status: 200, description: 'Item fetched successfully' })\n  @ApiParam({\n    name: 'getItemsParamsDto',\n    required: true,\n    type: GetItemsParamDto,\n    description: 'Items Param DTO',\n    example: { id: 1 },\n  })\n  public async getItem(@Param() getItemsParamsDto: GetItemsParamDto) {\n    const item = await this.itemsService.findOneById(getItemsParamsDto.id);\n    return createSuccessResponse('Item fetched successfully', true, item);\n  }\n\n  /**\n   * Route for handling patch item request\n   * @param patchItemDto A DTO used to validate incoming PATCH request\n   * @example HTTP PATCH /item\n   * @returns response\n   */\n  @Patch()\n  @ApiOperation({ summary: 'Update a item' })\n  @ApiResponse({ status: 200, description: 'Item updated successfully' })\n  @ApiBody({\n    required: true,\n    type: PatchItemDto,\n    description: 'Item update details',\n  })\n  public async updateItem(@Body() patchItemDto: PatchItemDto) {\n    const item = await this.itemsService.update(patchItemDto);\n    return createSuccessResponse('Item updated successfully', true, item);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ItemsModule.html":{"url":"modules/ItemsModule.html","title":"module - ItemsModule","body":"\n                   \n\n\n\n\n    Modules\n    ItemsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ItemsModule\n\n\n\ncluster_ItemsModule_imports\n\n\n\ncluster_ItemsModule_exports\n\n\n\ncluster_ItemsModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nItemsModule\n\nItemsModule\n\nItemsModule -->\n\nPaginationModule->ItemsModule\n\n\n\n\n\nItemsService \n\nItemsService \n\nItemsService  -->\n\nItemsModule->ItemsService \n\n\n\n\n\nItemsService\n\nItemsService\n\nItemsModule -->\n\nItemsService->ItemsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/items/items.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ItemsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ItemsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ItemsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Item } from './item.entity';\nimport { ItemsController } from './items.controller';\nimport { ItemsService } from './providers/items.service';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  imports: [PaginationModule, TypeOrmModule.forFeature([Item])],\n  controllers: [ItemsController],\n  providers: [ItemsService],\n  exports: [ItemsService],\n})\nexport class ItemsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ItemsService.html":{"url":"injectables/ItemsService.html","title":"injectable - ItemsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ItemsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/providers/items.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service dealing with items. It is used to provide the item data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationProvider: PaginationProvider, itemRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/items/providers/items.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        itemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createItemDto: CreateItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:30\n                        \n                    \n\n\n            \n                \n                        The method to create a new item in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createItemDto\n                                            \n                                                            CreateItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: GetItemsQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:52\n                        \n                    \n\n\n            \n                \n                        The method to get all items from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetItemsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GetItemsQueryDto for getting queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Item[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:75\n                        \n                    \n\n\n            \n                \n                        The method to find a single item by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchItemDto: PatchItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:99\n                        \n                    \n\n\n            \n                \n                        The method to create a new item in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchItemDto\n                                            \n                                                            PatchItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NotFoundException } from '@nestjs/common';\nimport { RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Item } from '../item.entity';\nimport { CreateItemDto } from '../dtos/create-item.dto';\nimport { PatchItemDto } from '../dtos/patch-item.dto';\nimport { GetItemsQueryDto } from '../dtos/get-items-query.dto';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n/**\n * Service dealing with items. It is used to provide the item data.\n */\n@Injectable()\nexport class ItemsService {\n  constructor(\n    private readonly paginationProvider: PaginationProvider,\n    @InjectRepository(Item) private readonly itemRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new item in the database\n   * @param createItemDto\n   * @returns Item\n   * @throws RequestTimeoutException\n   */\n  public async create(createItemDto: CreateItemDto): Promise {\n    // Create Item\n    let newItem = this.itemRepository.create(createItemDto);\n\n    try {\n      // Connect to db to save new item\n      newItem = await this.itemRepository.save(newItem);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save item', {\n        description: 'Database connection error',\n      });\n    }\n\n    return newItem;\n  }\n\n  /**\n   * The method to get all items from the database\n   * @param query GetItemsQueryDto for getting queries\n   * @returns Item[]\n   * @throws BadRequestException or RequestTimeoutException\n   */\n  public async findAll(query: GetItemsQueryDto): Promise> {\n    const { page, limit, ...queries } = query;\n\n    const filters = Object.keys(queries).length ? queries : undefined;\n\n    try {\n      // prettier-ignore\n      const items = await this.paginationProvider.paginateQuery({ limit, page }, this.itemRepository, filters);\n\n      return items;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n  }\n\n  /**\n   * The method to find a single item by ID\n   * @param id\n   * @returns Item\n   * @throws NotFoundException or RequestTimeoutException\n   */\n  public async findOneById(id: number): Promise {\n    let item = undefined;\n\n    try {\n      item = await this.itemRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!item) {\n      throw new NotFoundException('Item id does not exist');\n    }\n\n    return item;\n  }\n\n  /**\n   * The method to create a new item in the database\n   * @param patchItemDto\n   * @returns Item\n   * @throws NotFoundException or RequestTimeoutException\n   */\n  public async update(patchItemDto: PatchItemDto): Promise {\n    const item = await this.findOneById(patchItemDto.id);\n\n    item.name = patchItemDto.name ?? item.name;\n    item.category = patchItemDto.category ?? item.category;\n    item.description = patchItemDto.description ?? item.description;\n    item.status = patchItemDto.status ?? item.status;\n    item.imageUrl = patchItemDto.imageUrl ?? item.imageUrl;\n    item.locationFound = patchItemDto.locationFound ?? item.locationFound;\n    item.dateFound = patchItemDto.dateFound ?? item.dateFound;\n\n    try {\n      await this.itemRepository.save(item);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save item', {\n        description: 'Database connection error',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for logging in\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, required: true, format: 'email', description: 'The email of the user', example: 'johndoe@example.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.dto.ts:21\n                        \n                    \n\n            \n                \n                    The email of the user\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, required: true, description: 'The password of the user', example: 'password123@'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.dto.ts:35\n                        \n                    \n\n            \n                \n                    The password of the user\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * Data transfer object for logging in\n */\nexport class LoginDto {\n  /**\n   * The email of the user\n   * @example johndoe@example.com\n   */\n  @ApiProperty({\n    type: String,\n    required: true,\n    format: 'email',\n    description: 'The email of the user',\n    example: 'johndoe@example.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * The password of the user\n   * @example Password123@\n   */\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'The password of the user',\n    example: 'password123@',\n  })\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginProvider.html":{"url":"injectables/LoginProvider.html","title":"injectable - LoginProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/login.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Login provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashingProvider: HashingProvider, jwtService: JwtService, usersService: UsersService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/login.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/login.provider.ts:33\n                        \n                    \n\n\n            \n                \n                        Sign in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService, JwtSignOptions } from '@nestjs/jwt';\n\nimport { HashingProvider } from './hashing.provider';\nimport jwtConfig from '../config/jwt.config';\nimport { LoginDto } from '../dtos/login.dto';\n\nimport { UsersService } from 'src/users/providers/users.service';\nimport { IActiveUser } from '../interfaces/active-user.interface';\n\n/**\n * Login provider\n */\n@Injectable()\nexport class LoginProvider {\n  constructor(\n    private readonly hashingProvider: HashingProvider,\n    private readonly jwtService: JwtService,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Sign in a user\n   * @param loginDto\n   * @returns boolean\n   * @throws RequestTimeoutException or UnauthorizedException\n   */\n  public async login(loginDto: LoginDto) {\n    // Find user by email\n    const user = await this.usersService.findOneByEmail(loginDto.email);\n\n    // Compare password hash\n    let isMatch: boolean = false;\n\n    try {\n      // prettier-ignore\n      isMatch = await this.hashingProvider.comparePassword(loginDto.password, user.password);\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Failed to compare passowrd',\n      });\n    }\n\n    if (!isMatch) {\n      throw new UnauthorizedException('Incorect password');\n    }\n\n    const payload: IActiveUser = { sub: user.id, email: user.email };\n\n    const options: JwtSignOptions = {\n      audience: this.jwtConfiguration.audience,\n      issuer: this.jwtConfiguration.issuer,\n      secret: this.jwtConfiguration.secret,\n      expiresIn: this.jwtConfiguration.accessTokenTTL,\n    };\n\n    const accessToken = this.jwtService.signAsync(payload, options);\n\n    return accessToken;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  message: string;\n  success: boolean;\n  data: T[];\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository, queryConditions?: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:13\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryConditions\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { FindOptionsWhere, ObjectLiteral, Repository } from 'typeorm';\n\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n\n  public async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    queryConditions?: FindOptionsWhere,\n  ): Promise> {\n    const { limit, page } = paginationQuery;\n\n    let results: T[] = [];\n\n    try {\n      const found = await repository.find({\n        where: queryConditions,\n        skip: (page - 1) * limit,\n        take: limit,\n      });\n\n      results = found;\n    } catch (error) {}\n\n    if (!results) {\n      throw new BadRequestException('Adjust page and limit query', {\n        description: 'Posts not found',\n      });\n    }\n\n    const protocol = this.request.protocol;\n    const host = this.request.headers.host;\n    const baseURL = `${protocol}://${host}/`;\n    const newUrl = new URL(this.request.url, baseURL);\n    const { origin, pathname } = newUrl;\n\n    const currentPage = page;\n    const itemsPerPage = limit;\n    const totalItems = await repository.count({ where: queryConditions });\n    const totalPages = Math.ceil(totalItems / limit);\n    const nextPage = page === totalPages ? page : page + 1;\n    const previousPage = page === 1 ? page : page - 1;\n\n    const response: Paginated = {\n      message: 'Data fetched successfully',\n      success: true,\n      data: results,\n      meta: { currentPage, itemsPerPage, totalItems, totalPages },\n      links: {\n        first: `${origin}${pathname}?limit=${limit}&page=1`,\n        last: `${origin}${pathname}?limit=${limit}&page=${totalPages}`,\n        current: `${origin}${pathname}?limit=${limit}&page=${page}`,\n        next: `${origin}${pathname}?limit=${limit}&page=${nextPage}`,\n        previous: `${origin}${pathname}?limit=${limit}&page=${previousPage}`,\n      },\n    };\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive, Min } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  @Min(1)\n  limit?: number = 10;\n\n  @IsOptional()\n  @IsPositive()\n  @Min(1)\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchItemDto.html":{"url":"classes/PatchItemDto.html","title":"class - PatchItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/patch-item.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the data transfer object for patching an item.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateItemDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: true, readOnly: true, format: 'number', description: 'The ID of the item', example: 1})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/patch-item.dto.ts:24\n                        \n                    \n\n            \n                \n                    The ID of the item.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { CreateItemDto } from './create-item.dto';\n\n/**\n * Represents the data transfer object for patching an item.\n */\nexport class PatchItemDto extends PartialType(CreateItemDto) {\n  /**\n   * The ID of the item.\n   * @example 1\n   */\n  @ApiProperty({\n    type: 'number',\n    required: true,\n    readOnly: true,\n    format: 'number',\n    description: 'The ID of the item',\n    example: 1,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for updating a user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: true, readOnly: true, format: 'number', description: 'The ID of the user', example: 1})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/patch-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    The ID of the user.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * Data transfer object (DTO) for updating a user.\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n  /**\n   * The ID of the user.\n   * @example 1\n   */\n  @ApiProperty({\n    type: 'number',\n    required: true,\n    readOnly: true,\n    format: 'number',\n    description: 'The ID of the user',\n    example: 1,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Refresh token DTO class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, required: true, example: 'asaae4223e', description: 'Refresh token of the user'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:21\n                        \n                    \n\n            \n                \n                    Token of the user\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * Refresh token DTO class\n * @description Data transfer object for refreshing token\n */\nexport class RefreshTokenDto {\n  /**\n   * Token of the user\n   * @example asaae4223e\n   */\n  @ApiProperty({\n    type: String,\n    required: true,\n    example: 'asaae4223e',\n    description: 'Refresh token of the user',\n  })\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Confirm password', example: 'password123@'})@IsNotEmpty()@Equals('password', {message: 'Passwords do not match'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:61\n                        \n                    \n\n            \n                \n                    Confirm password\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email', example: 'johndoe@example.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:28\n                        \n                    \n\n            \n                \n                    User email\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User name', example: 'John Doe'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:18\n                        \n                    \n\n            \n                \n                    User name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123@'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:52\n                        \n                    \n\n            \n                \n                    User password\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone number', example: '08012345678'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:37\n                        \n                    \n\n            \n                \n                    User phone number\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsEmail, IsString } from 'class-validator';\nimport { MaxLength, Matches, MinLength, Equals } from 'class-validator';\n\n/**\n * Data transfer object for user registration\n */\nexport class RegisterDto {\n  /**\n   * User name\n   * @example John Doe\n   */\n  @ApiProperty({ description: 'User name', example: 'John Doe' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly name: string;\n\n  /**\n   * User email\n   * @example johndoe@example.com\n   */\n  @ApiProperty({ description: 'User email', example: 'johndoe@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  readonly email: string;\n\n  /**\n   * User phone number\n   * @example 08012345678\n   */\n  @ApiProperty({ description: 'User phone number', example: '08012345678' })\n  @IsString()\n  @IsNotEmpty()\n  readonly phoneNumber: string;\n\n  /**\n   * User password\n   * @example password123@\n   */\n  @ApiProperty({ description: 'User password', example: 'password123@' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  readonly password: string;\n\n  /**\n   * Confirm password\n   * @example password123@\n   */\n  @ApiProperty({ description: 'Confirm password', example: 'password123@' })\n  @IsNotEmpty()\n  @Equals('password', { message: 'Passwords do not match' })\n  readonly confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SuccessResponse.html":{"url":"interfaces/SuccessResponse.html","title":"interface - SuccessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SuccessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/response/interfaces/success-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SuccessResponse {\n  message: string;\n  success: boolean;\n  data: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                claims\n                            \n                            \n                                    \n                                    Readonly\n                                createdAt\n                            \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, claims => claims.author)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { JoinColumn, OneToMany } from 'typeorm';\n\nimport { Claim } from 'src/claims/claim.entity';\n\n/**\n * User Entity\n * @description Represents the schema of a User\n */\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  readonly id: number;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  readonly name: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false, unique: true })\n  readonly email: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  readonly password: string;\n\n  @CreateDateColumn()\n  readonly createdAt: Date;\n\n  @UpdateDateColumn()\n  readonly updatedAt: Date;\n\n  @OneToMany(() => Claim, (claims) => claims.author)\n  @JoinColumn()\n  readonly claims: Claim[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully'})@ApiBody({required: true, type: CreateUserDto, description: 'User creation details'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Route for handling create user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming POST request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a user'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiParam({name: 'id', required: true, type: Number, description: 'User ID', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Route for handling delete user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number describing the ID of user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersQueryDto: GetUsersQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all users'})@ApiResponse({status: 200, description: 'Users fetched successfully'})@ApiQuery({name: 'getUsersQueryDto', required: false, type: GetUsersQueryDto, description: 'User Query DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:56\n                        \n                    \n\n\n            \n                \n                        Route for handling get users request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUsersQueryDto\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                User[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Update a user'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiBody({required: true, type: PatchUserDto, description: 'User update details'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Route for handling patch user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming PATCH request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, ParseIntPipe, Query } from '@nestjs/common';\nimport { Body, Delete, Get, Patch, Post } from '@nestjs/common';\nimport { ApiBody, ApiParam, ApiQuery } from '@nestjs/swagger';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersQueryDto } from './dtos/get-users-query.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\n\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\n\n/**\n * Controller for users\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Route for handling create user request\n   * @param createUserDto A DTO used to validate incoming POST request\n   * @example HTTP POST /user\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully' })\n  @ApiBody({\n    required: true,\n    type: CreateUserDto,\n    description: 'User creation details',\n  })\n  public async createUser(@Body() createUserDto: CreateUserDto) {\n    const user = await this.usersService.create(createUserDto);\n    return createSuccessResponse('User created successfully', true, user);\n  }\n\n  /**\n   * Route for handling get users request\n   * @param getUsersQueryDto A DTO used to validate incoming GET request queries\n   * @example HTTP GET /users\n   * @returns User[]\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ status: 200, description: 'Users fetched successfully' })\n  @ApiQuery({\n    name: 'getUsersQueryDto',\n    required: false,\n    type: GetUsersQueryDto,\n    description: 'User Query DTO',\n    example: { page: 1, limit: 10 },\n  })\n  public getUsers(@Query() getUsersQueryDto: GetUsersQueryDto) {\n    return this.usersService.findAll(getUsersQueryDto);\n  }\n\n  /**\n   * Route for handling patch user request\n   * @param patchUserDto A DTO used to validate incoming PATCH request\n   * @example HTTP PATCH /user\n   * @returns response\n   */\n  @Patch()\n  @ApiOperation({ summary: 'Update a user' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiBody({\n    required: true,\n    type: PatchUserDto,\n    description: 'User update details',\n  })\n  public updateUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n\n  /**\n   * Route for handling delete user request\n   * @param id number describing the ID of user\n   * @example HTTP DELETE /user/1\n   * @returns response\n   */\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a user' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiParam({\n    name: 'id',\n    required: true,\n    type: Number,\n    description: 'User ID',\n    example: 1,\n  })\n  public deleteUser(@Param('id', ParseIntPipe) id: number) {\n    return id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPaginationModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\n\nimport { AuthModule } from 'src/auth/auth.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    PaginationModule,\n  ],\n  controllers: [UsersController],\n  providers: [UsersService, CreateUserProvider, FindOneUserByEmailProvider],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service dealing with users. It is used to provide the user data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneBy\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createUserProvider: CreateUserProvider, paginationProvider: PaginationProvider, findOneByEmailProvider: FindOneUserByEmailProvider, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:33\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                newUser\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: GetUsersQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:42\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GetPostsQueryDto for getting queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                User[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneBy(operator: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:97\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                operator\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:87\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:63\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NotFoundException } from '@nestjs/common';\nimport { RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOptionsWhere, Repository } from 'typeorm';\n\nimport { CreateUserProvider } from './create-user.provider';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { GetUsersQueryDto } from '../dtos/get-users-query.dto';\n\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n/**\n * Service dealing with users. It is used to provide the user data.\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    private readonly createUserProvider: CreateUserProvider,\n    private readonly paginationProvider: PaginationProvider,\n    private readonly findOneByEmailProvider: FindOneUserByEmailProvider,\n    @InjectRepository(User) private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   * @param createUserDto\n   * @returns newUser\n   */\n  public async create(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUser(createUserDto);\n  }\n\n  /**\n   * The method to get all users from the database\n   * @param query GetPostsQueryDto for getting queries\n   * @returns User[]\n   */\n  public async findAll(query: GetUsersQueryDto): Promise> {\n    const { page, limit } = query;\n\n    try {\n      // prettier-ignore\n      const users = await this.paginationProvider.paginateQuery({ limit, page }, this.userRepository);\n\n      return users;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n  }\n\n  /**\n   * The method to find a single user by ID\n   * @param id\n   * @returns User\n   * @throws RequestTimeOutException or NotFoundException\n   */\n  public async findOneById(id: number) {\n    let user = undefined;\n\n    try {\n      user = await this.userRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!user) {\n      throw new NotFoundException('User id does not exist');\n    }\n\n    return user;\n  }\n\n  /**\n   * The method to find a single user by ID\n   * @param id\n   * @returns User\n   * @throws RequestTimeOutException or UnauthorizedException\n   */\n  public async findOneByEmail(email: string): Promise {\n    return await this.findOneByEmailProvider.findOneByEmail(email);\n  }\n\n  /**\n   * The method to find a single user by ID\n   * @param id\n   * @returns User\n   * @throws RequestTimeOutException or NotFoundException\n   */\n  public async findOneBy(operator: FindOptionsWhere) {\n    let user = undefined;\n\n    try {\n      user = await this.userRepository.findOneBy({ ...operator });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user.interface.ts\n            \n            interface\n            IActiveUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/login.provider.ts\n            \n            injectable\n            LoginProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/claims/claim.entity.ts\n            \n            entity\n            Claim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/claims/claims.controller.ts\n            \n            controller\n            ClaimsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/claims/dtos/create-claim.dto.ts\n            \n            class\n            CreateClaimDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/claims/dtos/get-claims-param.dto.ts\n            \n            class\n            GetClaimsParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/claims/dtos/get-claims-query.dto.ts\n            \n            class\n            GetClaimsBaseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/claims/dtos/get-claims-query.dto.ts\n            \n            class\n            GetClaimsQueryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/claims/providers/claims.service.ts\n            \n            injectable\n            ClaimsService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/response/interfaces/error-response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/response/interfaces/success-response.interface.ts\n            \n            interface\n            SuccessResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/response/utils/error-response.util.ts\n            \n            function\n            createErrorResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/response/utils/success-response.util.ts\n            \n            function\n            createSuccessResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/environment.validation.ts\n            \n            variable\n            environmentSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/items/dtos/create-item.dto.ts\n            \n            class\n            CreateItemDto\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/items/dtos/get-items-param.dto.ts\n            \n            class\n            GetItemsParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/items/dtos/get-items-query.dto.ts\n            \n            class\n            GetItemsBaseDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/items/dtos/get-items-query.dto.ts\n            \n            class\n            GetItemsQueryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/items/dtos/patch-item.dto.ts\n            \n            class\n            PatchItemDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/items/item.entity.ts\n            \n            entity\n            Item\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/items/items.controller.ts\n            \n            controller\n            ItemsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/items/providers/items.service.ts\n            \n            injectable\n            ItemsService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-query.dto.ts\n            \n            class\n            GetUsersBaseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-query.dto.ts\n            \n            class\n            GetUsersQueryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            ClaimStatus   (src/.../claimStatus.enum.ts)\n                        \n                        \n                            ItemStatus   (src/.../itemStatus.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/claims/enums/claimStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ClaimStatus\n                    \n                \n                        \n                            \n                                 SUBMITTED\n                            \n                        \n                        \n                            \n                                Value : SUBMITTED\n                            \n                        \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n                        \n                            \n                                 ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : ACCEPTED\n                            \n                        \n                        \n                            \n                                 DECLINED\n                            \n                        \n                        \n                            \n                                Value : DECLINED\n                            \n                        \n            \n        \n\n    src/items/enums/itemStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ItemStatus\n                    \n                \n                        \n                            \n                                 CLAIMED\n                            \n                        \n                        \n                            \n                                Value : CLAIMED\n                            \n                        \n                        \n                            \n                                 UNCLAIMED\n                            \n                        \n                        \n                            \n                                Value : UNCLAIMED\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : PROCESSING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createErrorResponse   (src/.../error-response.util.ts)\n                        \n                        \n                            createSuccessResponse   (src/.../success-response.util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Main function to bootstrap the application\n\n\n                \n            \n        \n    \n    src/common/response/utils/error-response.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createErrorResponse\n                        \n                    \n                \n            \n            \n                \ncreateErrorResponse(error: string, message: string, statusCode: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ErrorResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/response/utils/success-response.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSuccessResponse\n                        \n                    \n                \n            \n            \n                \ncreateSuccessResponse(message: string, success: boolean, data: T)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                success\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SuccessResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ItemsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ClaimsModule\n\n\n\ncluster_ClaimsModule_exports\n\n\n\ncluster_ClaimsModule_providers\n\n\n\ncluster_ItemsModule\n\n\n\ncluster_ItemsModule_exports\n\n\n\ncluster_ItemsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nClaimsModule\n\nClaimsModule\n\nAppModule -->\n\nClaimsModule->AppModule\n\n\n\n\n\nClaimsService \n\nClaimsService \n\nClaimsService  -->\n\nClaimsModule->ClaimsService \n\n\n\n\n\nItemsModule\n\nItemsModule\n\nAppModule -->\n\nItemsModule->AppModule\n\n\n\n\n\nItemsService \n\nItemsService \n\nItemsService  -->\n\nItemsModule->ItemsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nClaimsModule -->\n\nPaginationModule->ClaimsModule\n\n\n\nItemsModule -->\n\nPaginationModule->ItemsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPaginationModule->UsersModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nLoginProvider\n\nLoginProvider\n\nAuthModule -->\n\nLoginProvider->AuthModule\n\n\n\n\n\nClaimsService\n\nClaimsService\n\nClaimsModule -->\n\nClaimsService->ClaimsModule\n\n\n\n\n\nItemsService\n\nItemsService\n\nItemsModule -->\n\nItemsService->ItemsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            environmentSchema   (src/.../environment.validation.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof IActiveUser | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Active user decorator\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    Decorator for setting the auth type\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/config/environment.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environmentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Joi.ObjectSchema\n\n                    \n                \n                \n                    \n                        Default value : Joi.object({\n  NODE_ENV: Joi.string()\n    .valid('development', 'production', 'test', 'staging')\n    .required()\n    .default('development'),\n  DATABASE_PORT: Joi.number().port().default(5432),\n  DATABASE_HOST: Joi.string().required(),\n  DATABASE_USER: Joi.string().required(),\n  DATABASE_PASSWORD: Joi.string().required(),\n  DATABASE_NAME: Joi.string().required(),\n  JWT_SECRET: Joi.string().required(),\n  JWT_TOKEN_AUDIENCE: Joi.string().required(),\n  JWT_TOKEN_ISSUER: Joi.string().required(),\n  JWT_ACCESS_TOKEN_TTL: Joi.number().default(3600),\n  JWT_REFRESH_TOKEN_TTL: Joi.number().default(86400),\n})\n                    \n                \n\n            \n                \n                    Define the environment variables schema\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
