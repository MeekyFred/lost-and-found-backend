var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.766,1,2.766]],["body/guards/AccessTokenGuard.html",[0,3.576,1,3.576,2,2.969,3,0.112,4,0.1,5,0.1,6,5.776,7,4.81,8,3.284,9,0.497,10,5.501,11,3.931,12,0.218,13,1.13,14,1.535,15,5.776,16,2.359,17,5.28,18,1.671,19,3.284,20,6.308,21,4.817,22,5.223,23,0.601,24,3.761,25,1.393,26,0.013,27,1.033,28,0.377,29,0.997,30,4.61,31,4.81,32,3.761,33,2.859,34,3.576,35,5.327,36,4.719,37,3.404,38,1.305,39,2.057,40,3.356,41,5.28,42,3.761,43,0.72,44,2.217,45,0.33,46,0.963,47,1.943,48,0.694,49,2.257,50,1.708,51,2.391,52,2.735,53,2.391,54,2.969,55,2.969,56,3.284,57,0.112,58,0.074,59,2.547,60,0.833,61,2.969,62,1.19,63,4.168,64,1.896,65,3.761,66,3.761,67,3.284,68,3.761,69,2.257,70,2.057,71,1.513,72,3.284,73,1.579,74,4.168,75,0.978,76,3.761,77,3.761,78,1.943,79,1.943,80,3.284,81,1.579,82,3.761,83,2.735,84,1.167,85,1.078,86,3.761,87,3.761,88,2.735,89,3.761,90,3.284,91,3.761,92,3.761,93,3.761,94,3.761,95,3.761,96,0.008,97,0.008]],["title/controllers/AdminController.html",[98,1.482,99,2.969]],["body/controllers/AdminController.html",[3,0.068,4,0.061,5,0.061,9,0.673,12,0.133,13,0.779,14,1.923,23,0.59,25,1.285,26,0.013,27,0.953,28,0.348,29,0.92,37,3.119,38,1.529,45,0.306,46,0.574,57,0.068,58,0.045,60,0.361,62,1.781,64,1.478,75,1.558,78,2.665,79,2.665,84,1.325,85,1.478,96,0.005,97,0.005,98,0.831,99,2.646,100,0.861,101,1.999,102,1.303,103,1.551,104,2.417,105,2.873,106,5.158,107,2.873,108,2.873,109,3.177,110,2.873,111,1.808,112,3.402,113,1.46,114,3.639,115,3.639,116,2.251,117,3.177,118,2.313,119,3.168,120,3.811,121,4.539,122,2.29,123,4.841,124,4.841,125,2.593,126,2.335,127,2.29,128,2.29,129,4.131,130,4.031,131,4.757,132,2.29,133,1.88,134,1.999,135,3.575,136,2.29,137,1.999,138,3.53,139,2.29,140,1.999,141,3.575,142,2.29,143,1.999,144,3.53,145,2.29,146,1.999,147,3.994,148,5.158,149,2.29,150,2.935,151,1.999,152,2.949,153,5.434,154,2.29,155,4.96,156,1.808,157,3.77,158,2.29,159,1.303,160,0.999,161,2.935,162,1.303,163,0.946,164,2.464,165,3.575,166,3.575,167,2.878,168,1.999,169,1.456,170,1.528,171,1.665,172,1.551,173,1.303,174,1.303,175,1.456,176,1.665,177,2.464,178,1.665,179,1.456,180,2.29,181,2.29,182,1.084,183,4.058,184,2.29,185,2.29,186,3.41,187,2.335,188,2.29,189,2.29,190,2.29,191,1.999,192,2.29,193,3.177,194,3.639,195,1.999,196,2.29,197,2.29,198,2.29,199,1.999,200,2.29,201,2.29,202,2.29,203,1.999,204,2.29,205,2.29,206,2.29,207,1.999]],["title/modules/AdminModule.html",[208,1.431,209,2.766]],["body/modules/AdminModule.html",[3,0.144,4,0.128,5,0.128,26,0.013,45,0.349,46,0.765,57,0.144,58,0.095,96,0.009,97,0.009,99,5.047,100,2.355,167,4.948,168,4.231,208,2.432,209,5.702,210,2.294,211,2.294,212,2.504,213,2.504,214,2.294,215,3.586,216,2.504,217,4.231,218,4.231,219,4.231,220,4.948,221,4.671,222,4.214,223,4.429,224,4.948,225,3.236,226,2.504,227,2.201,228,4.846,229,3.565,230,4.846,231,4.846,232,4.846,233,4.231,234,3.524,235,4.231]],["title/injectables/AdminService.html",[48,0.537,167,2.596]],["body/injectables/AdminService.html",[3,0.088,4,0.078,5,0.078,9,0.417,12,0.171,13,0.948,14,2.006,16,1.999,18,1.401,23,0.679,25,1.517,26,0.013,27,1.124,28,0.41,29,1.086,33,4.11,38,1.624,39,2.761,45,0.33,46,0.466,48,0.582,57,0.088,58,0.058,60,0.932,62,2.002,71,1.269,75,1.727,84,1.468,96,0.007,97,0.007,104,2.522,105,3.496,107,3.496,108,3.496,109,3.866,110,3.496,111,3.496,112,3.596,116,1.933,119,3.03,126,1.726,130,3.986,135,3.78,138,2.877,141,3.36,144,2.877,146,3.866,147,4.223,150,3.36,152,2.656,156,3.496,157,3.986,160,2.577,167,2.815,169,1.877,170,1.859,171,2.147,172,1.999,176,2.147,177,2.999,178,2.147,179,1.877,224,4.223,236,0.904,237,2.578,238,2.952,239,3.73,240,3.26,241,3.92,242,2.952,243,2.952,244,1.552,245,2.952,246,4.428,247,2.952,248,3.05,249,2.794,250,3.544,251,4.428,252,2.952,253,3.866,254,0.948,255,2.952,256,2.952,257,2.952,258,2.331,259,2.578,260,2.578,261,2.331,262,1.877,263,3.36,264,2.917,265,2.952,266,2.578,267,2.578,268,2.952,269,2.952,270,2.952]],["title/injectables/AnalyticsProvider.html",[48,0.537,224,2.596]],["body/injectables/AnalyticsProvider.html",[3,0.142,4,0.126,5,0.126,9,0.447,12,0.276,13,1.323,14,1.731,16,2.328,18,1.957,23,0.609,25,1.085,26,0.013,27,0.804,28,0.294,29,0.777,38,1.017,39,2.41,45,0.317,46,0.75,48,0.813,57,0.142,58,0.093,60,1.085,75,1.787,84,1.05,96,0.009,97,0.009,104,2.176,130,4.797,224,3.932,236,1.454,239,4.268,240,3.731,241,4.405,259,4.148,261,3.751,262,3.021,271,4.148,272,2.927,273,4.188,274,3.195,275,3.712,276,1.608,277,4.751,278,4.751,279,4.751,280,6.003,281,4.127,282,5.429,283,6.003,284,4.751,285,4.751,286,4.751]],["title/controllers/AppController.html",[98,1.482,287,2.969]],["body/controllers/AppController.html",[3,0.158,4,0.141,5,0.141,9,0.625,12,0.308,13,1.42,23,0.523,26,0.013,38,1.135,43,0.905,45,0.34,46,0.837,57,0.158,58,0.104,60,0.837,84,1.173,96,0.01,97,0.01,98,2.407,100,1.994,113,1.293,129,3.983,163,1.379,165,3.776,166,3.776,182,2.511,186,3.019,187,2.068,287,4.825,288,4.632,289,6.624,290,5.306,291,5.239,292,5.306,293,4.218,294,3.593,295,5.794,296,5.306,297,4.603,298,4.632,299,2.621,300,5.306,301,3.019,302,5.306,303,3.373,304,3.593,305,2.873,306,5.306]],["title/modules/AppModule.html",[208,1.431,307,2.969]],["body/modules/AppModule.html",[1,3.33,3,0.101,4,0.09,5,0.09,7,2.475,9,0.32,26,0.013,28,0.21,45,0.359,46,0.537,47,1.758,50,1.546,51,2.164,53,2.164,57,0.101,58,0.067,64,0.975,85,0.975,96,0.007,97,0.007,100,1.848,208,2.35,209,4.733,210,1.611,211,1.611,212,1.758,213,1.758,214,2.732,215,2.982,216,1.758,220,4.443,221,4.195,222,3.784,223,3.978,225,2.54,226,1.758,227,1.546,229,3.285,248,2.54,275,2.951,287,4.197,297,4.443,298,2.971,307,6.002,308,2.971,309,2.971,310,2.971,311,4.443,312,4.733,313,4.733,314,2.687,315,4.293,316,4.293,317,3.882,318,3.795,319,4.917,320,4.917,321,2.475,322,2.687,323,2.305,324,1.485,325,3.403,326,3.403,327,2.971,328,3.403,329,3.403,330,3.403,331,3.403,332,3.403,333,2.971,334,3.575,335,3.403,336,3.575,337,3.403,338,2.687,339,3.403,340,3.403,341,3.403,342,3.403,343,4.917,344,3.403,345,4.917,346,3.403,347,3.882,348,3.403,349,4.558,350,2.971,351,2.687,352,4.293,353,3.403,354,3.403,355,3.403,356,3.403,357,5.773,358,3.403,359,2.475,360,3.403,361,2.971,362,3.403,363,2.687,364,3.403,365,2.687,366,3.403,367,2.971,368,3.403,369,1.843,370,3.403,371,3.403,372,3.403,373,3.403,374,3.403,375,3.403,376,2.043,377,3.403,378,3.403,379,3.403,380,2.687,381,2.687,382,4.293,383,3.403,384,3.403,385,3.403,386,3.403]],["title/injectables/AppService.html",[48,0.537,297,2.596]],["body/injectables/AppService.html",[3,0.18,4,0.16,5,0.16,12,0.35,13,1.534,23,0.593,26,0.012,38,1.289,43,0.978,45,0.262,46,0.951,48,0.942,57,0.18,58,0.118,84,1.331,96,0.011,97,0.011,236,1.844,289,6.918,293,3.829,294,3.261,295,5.259,297,4.558,387,5.259,388,6.023]],["title/controllers/AuthController.html",[98,1.482,389,2.969]],["body/controllers/AuthController.html",[3,0.084,4,0.074,5,0.074,9,0.74,11,2.844,12,0.163,13,0.912,14,1.949,23,0.61,25,1.315,26,0.013,27,0.974,28,0.45,29,0.941,38,1.324,45,0.317,46,0.673,57,0.084,58,0.055,60,0.443,64,1.65,71,1.222,75,1.496,78,1.451,79,1.451,83,3.748,84,1.368,85,2.088,96,0.006,97,0.006,98,1.87,100,1.055,102,1.598,103,4.192,104,2.451,113,1.508,118,2.711,120,1.902,121,4.214,126,2.412,129,4.188,159,1.598,161,1.598,162,1.598,163,0.73,165,3.708,166,3.708,173,1.598,174,1.598,175,1.785,182,1.329,186,3.522,187,2.412,227,1.937,254,1.711,299,2.106,301,1.598,303,1.785,304,1.902,389,3.1,390,2.452,391,2.888,392,4.264,393,4.264,394,5.913,395,4.264,396,4.545,397,2.808,398,4.648,399,4.264,400,2.808,401,5.642,402,2.808,403,6.092,404,3.491,405,4.264,406,2.808,407,2.808,408,2.808,409,4.07,410,2.808,411,2.808,412,2.808,413,2.808,414,3.447,415,2.808,416,3.723,417,3.723,418,3.366,419,3.455,420,2.808,421,2.452,422,4.413,423,2.808,424,2.808,425,2.243,426,2.808,427,2.808,428,2.808,429,3.898,430,2.452,431,2.452,432,2.452,433,2.042,434,2.452,435,3.094,436,2.217,437,1.785,438,1.52,439,2.808,440,2.452,441,2.808,442,2.25,443,2.808,444,2.808,445,4.501,446,2.808,447,4.264,448,2.808,449,2.808,450,2.808,451,2.808,452,2.808,453,2.808,454,2.808,455,2.808,456,3.366,457,2.808]],["title/modules/AuthModule.html",[208,1.431,311,2.596]],["body/modules/AuthModule.html",[3,0.129,4,0.114,5,0.114,9,0.407,26,0.013,45,0.357,46,0.682,50,1.962,51,2.746,53,2.746,57,0.129,58,0.085,96,0.009,97,0.009,100,2.182,208,2.564,210,2.044,211,2.044,212,2.231,213,2.231,214,2.044,215,3.388,216,3.388,223,3.304,225,2.999,226,2.231,227,1.962,229,2.458,275,2.592,311,5.237,317,3.41,322,3.41,327,3.771,380,3.41,381,3.41,382,3.771,389,4.769,391,3.932,435,4.887,436,3.41,458,3.771,459,3.771,460,3.771,461,4.044,462,4.523,463,4.791,464,4.791,465,4.319,466,4.222,467,4.769,468,3.485,469,5.806,470,3.771,471,4.222,472,4.319,473,4.319,474,3.41,475,4.319,476,4.319,477,4.319,478,4.319,479,3.771]],["title/injectables/AuthService.html",[48,0.537,435,2.451]],["body/injectables/AuthService.html",[3,0.08,4,0.071,5,0.071,9,0.628,12,0.156,13,0.883,14,1.977,16,1.7,18,1.782,23,0.657,25,1.463,26,0.013,27,1.085,28,0.396,29,1.048,33,4.026,38,1.591,39,2.194,45,0.3,46,0.425,47,1.39,48,0.542,57,0.08,58,0.053,60,0.792,62,1.922,64,1.74,69,2.477,71,1.183,75,1.666,78,2.132,79,2.132,84,1.522,85,1.183,96,0.006,97,0.006,103,2.795,104,2.486,126,2.194,227,1.874,236,0.824,240,3.258,254,1.79,262,1.71,272,2.665,294,3.048,299,2.039,305,2.235,367,4.916,391,2.795,394,5.825,396,4.445,398,4.649,401,5.688,403,5.595,414,3.166,416,4.916,417,3.603,418,3.258,419,3.846,421,3.603,422,4.34,431,2.349,432,2.349,433,1.956,435,2.477,437,1.71,438,1.457,461,3.31,464,4.376,466,3.001,468,1.615,480,2.349,481,3.603,482,4.127,483,2.349,484,2.69,485,3.603,486,2.69,487,3.603,488,2.69,489,2.69,490,4.127,491,4.127,492,2.69,493,4.127,494,2.69,495,5.63,496,4.794,497,2.69,498,2.124,499,2.69,500,1.822,501,2.69,502,1.822,503,2.349,504,2.69,505,2.69,506,2.349,507,3.258,508,2.349,509,2.124,510,2.69,511,4.127,512,2.349,513,2.69,514,2.349,515,2.69,516,1.273]],["title/guards/AuthenticationGuard.html",[0,2.766,334,2.969]],["body/guards/AuthenticationGuard.html",[0,3.678,1,5.082,2,5.583,3,0.117,4,0.104,5,0.104,7,2.847,10,4.288,12,0.227,13,1.162,14,1.569,15,6.551,16,2.477,18,1.719,23,0.535,25,1.24,26,0.013,27,0.919,28,0.336,29,0.888,30,4.742,31,4.895,34,2.652,36,2.652,38,1.162,39,2.116,45,0.327,46,0.984,48,0.713,49,3.259,56,3.419,57,0.117,58,0.077,59,2.652,60,1.155,64,1.93,70,2.116,71,1.122,75,1.018,78,2.805,79,2.805,84,0.866,85,1.787,96,0.008,97,0.008,254,1.334,274,2.023,301,2.229,303,2.49,321,2.847,333,3.419,334,3.949,517,3.419,518,0.894,519,5.431,520,5.431,521,5.431,522,3.916,523,7.504,524,3.916,525,3.916,526,4.288,527,2.847,528,5.431,529,3.419,530,3.916,531,3.916,532,5.878,533,3.916,534,3.916,535,3.916,536,3.916,537,3.419,538,3.916,539,3.916,540,3.916,541,2.35,542,2.756,543,3.916,544,3.916,545,3.916,546,3.419,547,3.419,548,3.916,549,3.916,550,3.916,551,3.916,552,3.916,553,3.916,554,2.35,555,4.742,556,3.916,557,3.916,558,3.916,559,3.916]],["title/injectables/BcryptProvider.html",[48,0.537,471,2.969]],["body/injectables/BcryptProvider.html",[3,0.134,4,0.119,5,0.119,9,0.423,12,0.26,13,1.275,14,1.918,23,0.587,25,1.36,26,0.013,27,1.008,28,0.368,29,0.974,38,1.275,39,2.776,43,1.09,45,0.291,46,0.708,48,0.783,57,0.134,58,0.088,59,3.039,64,1.916,75,1.738,78,2.318,79,2.318,84,1.575,96,0.009,97,0.009,104,2.411,236,1.374,272,2.819,276,1.549,369,3.857,461,3.077,471,4.331,498,3.543,507,4.703,560,3.918,561,5.957,562,5.201,563,5.957,564,5.201,565,5.201,566,5.201,567,6.653,568,6.472,569,4.488,570,5.201,571,4.488,572,6.219,573,2.853,574,6.686,575,4.488,576,3.918,577,3.543,578,5.957,579,4.488,580,4.488,581,3.918,582,4.488,583,3.918]],["title/entities/Claim.html",[152,1.714,584,2.211]],["body/entities/Claim.html",[3,0.119,4,0.105,5,0.105,9,0.517,12,0.231,23,0.743,26,0.013,27,0.93,28,0.482,43,0.749,44,1.671,45,0.32,57,0.119,58,0.078,60,1.161,85,1.574,96,0.008,97,0.008,113,1.836,119,3.047,152,3.088,187,2.45,254,1.574,260,3.475,376,2.389,500,2.696,516,3.209,518,1.254,541,3.296,584,3.671,585,3.475,586,4.572,587,4.965,588,4.259,589,2.058,590,4.965,591,3.98,592,4.795,593,5.492,594,5.492,595,4.795,596,3.98,597,3.794,598,4.572,599,3.98,600,3.993,601,4.929,602,3.98,603,3.993,604,3.98,605,3.475,606,4.795,607,4.795,608,3.98,609,4.817,610,4.069,611,3.98,612,4.572,613,3.98,614,4.572,615,4.965,616,2.894,617,2.744,618,5.492,619,4.795,620,2.894,621,2.53,622,2.894,623,3.98,624,3.98,625,3.98,626,3.98,627,3.143]],["title/controllers/ClaimsController.html",[98,1.482,628,2.969]],["body/controllers/ClaimsController.html",[3,0.082,4,0.073,5,0.073,9,0.733,12,0.16,13,0.9,14,1.789,23,0.502,25,1.164,26,0.013,27,1.039,28,0.439,29,0.834,37,3.264,38,1.385,44,1.766,45,0.316,46,0.664,57,0.082,58,0.054,60,0.435,62,2.048,64,1.461,69,3.884,71,1.206,75,1.325,84,1.127,85,1.855,96,0.006,97,0.006,98,1.85,100,1.037,102,1.57,104,2.25,107,3.321,113,1.242,116,2.489,118,2.674,120,3.453,121,3.495,123,4.383,124,4.383,125,2.631,126,1.987,129,3.423,131,4.159,134,2.408,135,4.428,137,2.408,138,4.179,151,2.408,152,3.404,159,1.57,160,2.225,161,3.495,162,1.57,163,1.325,164,2.849,165,3.246,166,3.246,170,1.158,172,1.868,173,1.57,174,1.57,175,1.754,182,1.305,183,3.453,186,2.902,187,1.987,203,2.408,207,3.673,241,2.902,250,2.525,274,3.343,404,1.868,419,2.525,429,2.849,442,2.68,516,1.991,589,1.377,628,3.058,629,2.408,630,4.207,631,4.207,632,2.758,633,4.52,634,2.178,635,3.321,636,2.758,637,4.127,638,4.705,639,2.849,640,2.758,641,4.705,642,2.408,643,2.408,644,2.178,645,2.758,646,3.321,647,2.178,648,2.178,649,2.758,650,3.321,651,3.321,652,1.656,653,2.674,654,2.408,655,2.408,656,2.758,657,2.758,658,2.758,659,2.758,660,1.494,661,2.278,662,1.494,663,2.006,664,2.758,665,2.758,666,2.408,667,2.758,668,2.758]],["title/modules/ClaimsModule.html",[208,1.431,220,2.596]],["body/modules/ClaimsModule.html",[3,0.145,4,0.129,5,0.129,26,0.013,45,0.35,46,0.768,57,0.145,58,0.095,96,0.009,97,0.009,100,2.361,152,2.044,208,2.437,210,2.304,211,2.304,212,2.515,213,2.515,214,2.304,215,3.594,216,3.594,220,5.296,221,4.677,222,4.219,223,4.434,225,3.245,226,2.515,227,2.211,229,3.575,233,4.25,234,3.539,235,4.25,241,4.718,323,3.297,324,2.124,628,5.058,655,4.25,669,4.25,670,4.25,671,4.868,672,4.25,673,4.868,674,4.25,675,4.868,676,4.868]],["title/injectables/ClaimsService.html",[48,0.537,241,2.324]],["body/injectables/ClaimsService.html",[3,0.068,4,0.06,5,0.06,9,0.563,12,0.132,13,0.776,14,1.869,16,1.742,18,1.148,23,0.589,25,1.283,26,0.013,27,0.951,28,0.347,29,0.918,33,3.722,37,1.583,38,1.471,39,2.679,43,0.616,44,1.523,45,0.32,46,0.713,48,0.476,57,0.068,58,0.045,60,0.812,62,1.628,64,1.714,70,2.331,71,1.97,73,2.358,75,1.824,81,2.358,84,1.242,96,0.005,97,0.005,104,2.35,112,1.235,116,2.451,119,2.887,130,3.59,135,3.404,138,3.722,147,3.802,150,3.404,152,3.287,160,1.97,170,0.957,172,2.456,187,0.889,236,0.698,239,3.238,240,2.968,241,2.064,244,1.271,248,3.551,249,1.716,250,3.088,254,1.101,261,1.8,262,1.45,263,3.196,264,2.955,272,1.716,273,2.456,274,1.873,275,2.177,276,0.943,280,3.942,281,1.368,324,0.995,542,2.614,586,1.658,588,1.544,589,2.13,592,3.942,617,0.995,633,3.57,652,1.368,653,1.45,660,1.964,662,1.964,674,1.991,677,1.991,678,2.863,679,2.863,680,2.28,681,3.569,682,4.515,683,2.658,684,2.28,685,2.28,686,3.627,687,2.28,688,2.863,689,2.28,690,2.863,691,2.28,692,3.271,693,2.863,694,3.627,695,2.28,696,3.565,697,1.298,698,1.45,699,1.368,700,1.8,701,1.8,702,1.368,703,2.28,704,2.28,705,2.28,706,2.28,707,6.272,708,2.28,709,2.28,710,2.28,711,2.28,712,2.28,713,2.87,714,2.28,715,2.28,716,2.28,717,2.28,718,1.991,719,2.28,720,2.28,721,2.28,722,2.28,723,3.271,724,3.271,725,1.45,726,3.166,727,2.28,728,1.8,729,2.28,730,2.456,731,2.28,732,2.28,733,1.544,734,2.28,735,3.627,736,2.28,737,4.515,738,2.28,739,2.28,740,1.658,741,1.658,742,1.658]],["title/classes/CreateClaimDto.html",[58,0.08,633,2.596]],["body/classes/CreateClaimDto.html",[3,0.118,4,0.105,5,0.105,9,0.709,12,0.23,23,0.618,26,0.013,28,0.454,43,1.095,45,0.238,57,0.118,58,0.107,60,1.229,85,2.104,96,0.008,97,0.008,113,1.528,119,3.101,125,2.913,152,2.297,163,1.029,244,1.917,254,1.447,276,1.422,293,4.3,442,3.204,518,1.25,588,4.246,589,2.51,595,5.475,597,3.893,607,5.475,621,3.478,633,3.478,743,1.296,744,5.906,745,3.125,746,2.212,747,4.32,748,3.568,749,4.407,750,6.27,751,6.27,752,3.959,753,3.959,754,5.475,755,5.475,756,3.456,757,3.959,758,6.27,759,6.27,760,3.959,761,3.959,762,3.494,763,3.978,764,2.275,765,3.341,766,1.296,767,4.777,768,5.472,769,5.472]],["title/classes/CreateItemDto.html",[58,0.08,112,2.211]],["body/classes/CreateItemDto.html",[3,0.082,4,0.072,5,0.072,9,0.76,12,0.159,23,0.661,26,0.013,27,1.136,28,0.472,29,0.683,43,1.087,45,0.281,57,0.082,58,0.111,60,1.243,85,2.139,96,0.006,97,0.006,112,2.262,113,1.635,119,3.275,125,2.975,163,0.711,176,5.031,187,2.615,244,1.464,254,0.894,276,1.086,294,3.746,442,3.332,516,1.977,518,0.954,597,3.574,610,4.153,702,3.044,743,0.895,746,1.689,747,3.299,748,3.818,749,4.582,754,4.428,755,4.428,756,2.387,762,3.574,763,3.038,764,2.06,765,3.315,766,1.66,767,3.648,770,2.159,771,4.878,772,4.428,773,4.428,774,4.428,775,3.224,776,2.734,777,2.734,778,2.734,779,6.117,780,6.117,781,2.734,782,2.734,783,5.678,784,6.919,785,4.178,786,4.483,787,2.734,788,2.734,789,5.678,790,2.734,791,2.734,792,2.734,793,2.734,794,2.734,795,2.734,796,1.641,797,4.178,798,1.977,799,2.159,800,2.159,801,1.852,802,1.852,803,5.071,804,3.299,805,3.299,806,3.648,807,2.734,808,3.648,809,2.159,810,4.178,811,2.734,812,4.178]],["title/classes/CreateUserDto.html",[58,0.08,414,2.017]],["body/classes/CreateUserDto.html",[3,0.094,4,0.084,5,0.084,9,0.663,12,0.183,23,0.67,26,0.013,27,1.222,28,0.421,29,0.997,43,1.023,45,0.283,57,0.094,58,0.119,60,1.27,96,0.007,97,0.007,113,1.658,125,2.988,163,0.82,244,1.629,254,1.78,276,1.209,305,2.518,369,3.81,414,2.297,425,2.742,437,4.474,518,1.062,554,4.084,743,1.032,746,1.88,747,3.671,762,3.359,764,2.359,765,3.212,766,1.808,796,1.892,798,2.615,799,2.489,800,2.489,804,4.362,805,4.814,813,2.489,814,3.316,815,3.316,816,3.741,817,5.117,818,5.324,819,2.753,820,3.153,821,4.814,822,3.153,823,3.153,824,3.381,825,4.814,826,3.153,827,3.153,828,2.753,829,5.324,830,4.06,831,4.06,832,4.06,833,4.06,834,3.671,835,4.06,836,3.361,837,4.06,838,4.06,839,3.153,840,5.324,841,2.753,842,3.153,843,3.741,844,3.153,845,3.153,846,4.017,847,3.381,848,2.753,849,2.753,850,2.292,851,4.06,852,4.06,853,3.381,854,4.06,855,3.671,856,2.753,857,3.153]],["title/injectables/CreateUserProvider.html",[48,0.537,858,2.596]],["body/injectables/CreateUserProvider.html",[3,0.105,4,0.094,5,0.094,9,0.476,12,0.205,13,1.081,14,1.484,16,1.997,18,1.599,23,0.498,25,1.154,26,0.013,27,0.855,28,0.312,29,0.826,33,2.736,34,2.394,38,1.081,44,1.484,45,0.33,46,0.798,47,1.826,48,0.664,57,0.105,58,0.069,60,0.931,62,1.119,64,1.69,70,2.298,71,2.029,73,2.122,75,1.77,78,2.611,79,2.611,81,2.122,84,0.782,96,0.007,97,0.007,104,1.866,116,2.574,126,1.378,236,1.082,248,3.324,254,1.647,263,2.012,264,2.913,291,3.99,293,2.248,294,1.914,324,1.543,369,2.736,414,3.601,419,2.122,425,2.508,438,1.914,461,3.851,466,2.571,468,2.122,502,2.394,542,2.508,617,1.543,652,2.122,683,3.324,692,2.248,697,2.012,713,3.749,723,2.248,724,3.213,725,3.213,858,3.213,859,5.149,860,2.791,861,4.412,862,3.536,863,4.249,864,4.656,865,3.536,866,4.412,867,3.536,868,2.394,869,3.087,870,3.536,871,2.791,872,3.536,873,2.571,874,5.898,875,4.412,876,5.149,877,3.087,878,3.536,879,3.99,880,3.536,881,3.536,882,3.536,883,4.412,884,4.412,885,3.087,886,3.087,887,3.536,888,3.536,889,3.536,890,3.99,891,3.536,892,4.656,893,3.536,894,3.536,895,2.791,896,3.99,897,3.536,898,3.536]],["title/injectables/DataResponseInterceptor.html",[48,0.537,336,2.969]],["body/injectables/DataResponseInterceptor.html",[3,0.153,4,0.136,5,0.136,12,0.298,13,1.39,18,1.624,23,0.64,25,1.484,26,0.013,27,1.1,28,0.402,29,1.062,31,5.45,36,3.475,38,1.098,45,0.31,46,0.81,48,0.854,50,2.33,57,0.153,58,0.1,59,3.475,60,0.81,84,1.436,88,5.184,96,0.01,97,0.01,182,2.428,236,1.571,276,1.334,318,4.741,336,4.724,338,5.63,537,4.48,899,6.226,900,4.48,901,6.497,902,3.731,903,5.131,904,6.497,905,7.496,906,5.131,907,7.13,908,6.497,909,4.48,910,5.131,911,5.131,912,4.051,913,4.48]],["title/interfaces/ErrorResponse.html",[914,1.782,915,2.969]],["body/interfaces/ErrorResponse.html",[3,0.177,4,0.157,5,0.157,12,0.344,26,0.012,28,0.47,43,1.116,57,0.177,96,0.011,97,0.011,305,4.267,518,1.621,542,3.071,836,3.755,914,2.586,915,5.162,916,3.556,917,5.173,918,4.678,919,6.881]],["title/injectables/FindOneUserByEmailProvider.html",[48,0.537,920,2.596]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.126,4,0.112,5,0.112,9,0.537,12,0.244,13,1.221,14,1.63,16,1.426,18,2.197,23,0.562,25,1.303,26,0.013,27,0.966,28,0.353,29,0.933,34,2.852,37,1.838,38,1.221,39,2.224,43,0.883,44,2.396,45,0.316,46,0.901,48,0.75,49,3.426,57,0.126,58,0.082,60,0.665,62,1.806,70,2.224,71,1.636,72,3.676,73,1.768,75,1.095,81,1.768,84,0.931,96,0.008,97,0.008,104,2.049,236,1.289,248,2.175,254,1.773,263,2.396,264,2.819,324,1.838,425,3.033,466,3.062,542,2.224,554,4.591,617,1.838,683,3.586,697,2.396,723,2.677,724,2.677,730,2.852,733,2.852,864,5.112,868,2.852,873,3.062,879,3.324,883,3.676,884,3.676,885,3.676,920,4.413,921,5.653,922,3.676,923,3.865,924,5.708,925,4.983,926,4.211,927,4.211,928,4.983,929,4.211,930,5.708,931,4.211]],["title/injectables/GenerateTokensProvider.html",[48,0.537,462,2.451]],["body/injectables/GenerateTokensProvider.html",[3,0.112,4,0.1,5,0.1,9,0.355,11,3.27,12,0.219,13,1.131,14,1.819,16,1.79,18,1.673,19,3.289,20,6.311,21,4.821,22,5.227,23,0.602,25,1.512,26,0.013,27,1.034,28,0.409,29,0.998,38,1.417,43,0.833,45,0.315,46,0.595,47,1.946,48,0.694,50,1.711,51,2.395,53,2.395,57,0.112,58,0.074,60,0.834,61,2.974,62,2.095,64,1.998,74,5.861,75,1.374,84,1.169,96,0.008,97,0.008,104,2.287,126,2.06,236,1.153,254,1.547,272,2.502,425,1.468,462,3.173,470,3.289,500,2.551,547,5.78,573,4.209,589,1.233,814,2.261,815,2.261,816,2.551,817,2.739,836,3.017,932,5.227,933,3.289,934,5.707,935,5.286,936,5.286,937,3.768,938,5.286,939,3.768,940,5.286,941,6.972,942,4.484,943,3.768,944,4.615,945,6.107,946,3.289,947,5.286,948,2.551,949,3.768,950,3.768,951,3.768,952,4.615,953,3.768,954,3.768,955,3.768,956,3.768,957,3.289,958,3.768,959,3.768,960,3.289,961,2.974,962,3.289,963,2.974,964,3.289,965,2.974,966,4.615,967,3.768,968,5.286,969,3.768,970,3.768]],["title/classes/GetClaimsBaseDto.html",[58,0.08,971,2.969]],["body/classes/GetClaimsBaseDto.html",[3,0.135,4,0.12,5,0.12,9,0.428,12,0.264,23,0.663,26,0.013,28,0.416,29,1.25,43,0.82,45,0.324,57,0.135,58,0.14,96,0.009,97,0.009,113,1.639,133,2.347,135,2.586,138,4.14,160,3.337,163,1.181,169,4.55,170,1.908,187,2.9,244,2.357,249,3.184,276,1.749,518,1.372,588,5.041,597,2.967,609,4.556,620,3.304,743,1.487,746,2.72,764,2.179,766,1.965,796,2.727,798,3.388,971,4.891,972,2.586,973,3.818,974,6.499,975,3.587,976,4.544,977,4.544,978,4.544,979,4.544,980,4.544,981,5.244,982,3.818,983,3.103,984,2.586,985,3.587,986,2.889,987,2.347]],["title/classes/GetClaimsParamDto.html",[58,0.08,641,2.969]],["body/classes/GetClaimsParamDto.html",[3,0.16,4,0.142,5,0.142,9,0.63,12,0.312,23,0.529,26,0.013,28,0.332,43,0.912,45,0.291,57,0.16,58,0.131,60,1.149,62,2.116,96,0.01,97,0.01,113,1.309,125,2.764,138,4.126,152,3.199,163,1.396,169,4.251,518,1.527,589,2.652,637,3.805,641,4.862,661,3.62,743,1.758,764,2.426,766,1.758,798,3.165,824,3.905,846,4.862,988,3.905,989,5.371,990,4.24]],["title/classes/GetClaimsQueryDto.html",[58,0.08,135,2.324]],["body/classes/GetClaimsQueryDto.html",[3,0.15,4,0.133,5,0.133,9,0.473,26,0.013,43,0.686,45,0.334,57,0.15,58,0.146,96,0.01,97,0.01,133,3.312,135,3.649,138,3.472,160,3.082,163,1.306,169,3.194,170,2.11,187,2.499,244,2.474,249,3.342,276,1.836,588,4.342,597,2.482,609,4.342,620,3.653,743,1.644,746,2.855,764,2.326,766,2.098,796,3.016,798,3.52,971,5.134,972,2.86,973,3.194,974,5.598,981,5.598,982,4.489,983,3.648,984,2.86,985,3.967,986,4.076,987,3.312]],["title/classes/GetItemsBaseDto.html",[58,0.08,991,2.969]],["body/classes/GetItemsBaseDto.html",[3,0.119,4,0.106,5,0.106,9,0.377,12,0.232,23,0.702,26,0.013,28,0.475,29,1.291,43,0.752,45,0.329,57,0.119,58,0.139,96,0.008,97,0.008,113,1.737,133,4.032,160,3.215,163,1.04,170,1.68,187,2.777,244,2.21,249,2.985,276,1.639,518,1.259,597,3.902,702,3.785,743,1.31,746,2.55,763,4.585,764,2.288,766,1.804,771,5.182,775,4.009,796,2.402,798,3.487,801,2.71,802,2.71,809,3.16,972,2.278,973,3.505,975,4.353,982,3.505,983,2.848,984,2.278,986,2.544,987,2.068,991,4.585,992,5.356,993,5.627,994,4.002,995,5.513,996,4.002,997,4.353,998,5.365,999,4.002,1000,4.002,1001,4.002,1002,4.002,1003,4.813,1004,2.91,1005,2.544]],["title/classes/GetItemsParamDto.html",[58,0.08,1006,2.969]],["body/classes/GetItemsParamDto.html",[3,0.159,4,0.142,5,0.142,9,0.628,12,0.31,23,0.527,26,0.013,28,0.33,29,1.09,43,0.91,45,0.29,57,0.159,58,0.13,60,1.147,62,2.109,96,0.01,97,0.01,113,1.302,119,2.695,125,2.76,133,3.929,152,2.799,163,1.389,518,1.522,589,2.701,637,3.794,743,1.749,764,2.418,766,1.749,798,3.155,824,3.886,846,4.847,988,3.886,990,4.22,992,4.847,1006,4.847,1007,5.345]],["title/classes/GetItemsQueryDto.html",[58,0.08,1005,2.596]],["body/classes/GetItemsQueryDto.html",[3,0.139,4,0.123,5,0.123,9,0.438,26,0.013,28,0.421,43,0.635,45,0.341,57,0.139,58,0.147,96,0.009,97,0.009,133,3.731,160,2.969,163,1.209,170,1.952,187,2.376,244,2.384,249,3.22,276,1.769,597,3.802,702,3.66,743,1.522,746,2.751,763,4.947,764,2.469,766,1.996,771,4.434,775,3.877,796,2.791,798,3.642,801,3.149,802,3.149,809,3.671,972,2.646,973,2.956,982,4.326,983,3.515,984,2.646,986,3.877,987,3.15,991,4.947,992,3.381,993,4.815,997,3.671,998,4.815,1003,4.06,1004,3.381,1005,3.877]],["title/classes/GetUsersBaseDto.html",[58,0.08,1008,2.969]],["body/classes/GetUsersBaseDto.html",[3,0.156,4,0.138,5,0.138,9,0.491,12,0.303,23,0.514,26,0.013,27,1.315,28,0.322,29,1.073,43,0.896,45,0.313,57,0.156,58,0.141,96,0.01,97,0.01,113,1.271,141,2.969,144,4.208,160,2.865,163,1.356,170,2.19,179,4.174,244,2.518,249,3.401,276,1.868,518,1.499,743,1.707,746,2.905,764,2.382,766,1.707,798,3.107,972,2.969,973,4.174,975,4.119,982,4.174,983,3.392,984,2.969,986,3.317,987,2.695,1008,5.224,1009,5.217]],["title/classes/GetUsersParamDto.html",[58,0.08,1010,3.224]],["body/classes/GetUsersParamDto.html",[3,0.159,4,0.142,5,0.142,9,0.628,12,0.31,23,0.527,26,0.013,28,0.33,43,0.91,45,0.29,57,0.159,58,0.13,60,1.147,96,0.01,97,0.01,113,1.302,125,2.76,144,4.119,163,1.389,179,4.238,249,3.155,254,1.628,518,1.522,589,2.649,637,3.794,661,2.894,743,1.749,766,1.749,798,3.155,824,3.886,846,4.847,988,3.886,990,4.22,1010,5.263,1011,6.666,1012,5.345,1013,6.666,1014,5.345]],["title/classes/GetUsersQueryDto.html",[58,0.08,141,2.324]],["body/classes/GetUsersQueryDto.html",[3,0.161,4,0.143,5,0.143,9,0.508,26,0.013,27,1.135,43,0.736,45,0.318,57,0.161,58,0.143,96,0.01,97,0.01,141,3.817,144,4.133,160,2.355,163,1.403,170,2.266,179,3.431,244,2.557,249,3.454,276,1.897,743,1.766,746,2.95,764,2.433,766,1.766,798,3.174,972,3.072,973,3.431,982,4.639,983,3.77,984,3.072,986,4.264,987,3.465,1008,5.306]],["title/controllers/GoogleAuthController.html",[98,1.482,467,2.969]],["body/controllers/GoogleAuthController.html",[3,0.128,4,0.113,5,0.113,9,0.708,11,2.849,12,0.248,13,1.234,16,1.448,18,1.353,23,0.421,25,0.977,26,0.013,27,0.724,28,0.403,29,0.699,37,3.049,38,1.234,45,0.327,46,0.675,57,0.128,58,0.084,60,0.675,62,1.353,69,3.462,84,0.945,85,1.653,96,0.009,97,0.009,98,2.368,100,1.608,102,2.434,113,1.042,121,2.434,123,3.906,124,3.906,125,2.093,129,3.462,159,2.434,161,4.151,162,2.434,163,1.112,165,3.282,166,3.282,183,2.896,186,2.434,187,1.667,254,1.396,274,2.98,299,3.451,301,2.434,303,2.719,304,2.896,391,4.731,404,2.896,409,3.377,429,3.906,430,3.734,434,3.734,440,3.734,442,1.866,463,3.667,467,4.194,479,3.734,634,3.377,638,4.194,639,3.906,1015,5.036,1016,3.734,1017,5.768,1018,5.289,1019,6.099,1020,3.734,1021,5.465,1022,5.768,1023,4.277,1024,5.768,1025,3.734,1026,3.734,1027,4.277,1028,4.277,1029,4.277,1030,4.277,1031,4.277]],["title/injectables/GoogleAuthService.html",[48,0.537,463,2.596]],["body/injectables/GoogleAuthService.html",[3,0.101,4,0.09,5,0.09,9,0.461,11,3.553,12,0.196,13,1.047,14,1.448,16,2.361,18,1.549,21,4.542,22,4.978,23,0.621,25,1.118,26,0.013,27,0.829,28,0.356,29,0.8,33,3.414,38,1.349,43,0.668,45,0.321,46,0.773,47,1.747,48,0.643,49,2.938,50,1.536,53,2.15,54,2.67,57,0.101,58,0.066,59,2.291,60,0.908,61,2.67,62,1.07,63,2.67,64,2.111,70,1.908,71,1.649,73,1.42,74,2.67,75,1.639,81,1.42,84,1.082,96,0.007,97,0.007,104,1.82,116,1.476,126,1.318,236,1.035,240,3.486,248,1.747,254,1.492,262,2.15,272,2.317,294,1.831,299,1.671,391,3.315,396,4.542,425,1.908,462,4.186,463,3.112,468,2.03,474,2.67,502,2.291,518,1.118,542,1.318,555,2.953,573,3.112,577,2.67,589,1.602,692,2.15,814,2.938,815,2.938,879,2.67,892,2.67,932,2.67,934,3.865,957,2.953,1018,4.988,1019,4.274,1020,4.274,1021,4.531,1025,2.953,1026,2.953,1032,5.841,1033,2.953,1034,4.274,1035,5.753,1036,6.975,1037,2.953,1038,4.895,1039,3.382,1040,3.382,1041,4.895,1042,6.975,1043,5.023,1044,2.953,1045,3.382,1046,4.895,1047,3.382,1048,3.382,1049,4.895,1050,3.382,1051,3.382,1052,3.382,1053,3.382,1054,3.382,1055,3.382,1056,3.382,1057,3.382,1058,3.382,1059,4.183,1060,3.382,1061,3.382,1062,3.382,1063,3.382,1064,2.953,1065,3.382,1066,3.382,1067,3.382,1068,3.382]],["title/classes/GoogleTokenDto.html",[58,0.08,1021,2.766]],["body/classes/GoogleTokenDto.html",[3,0.172,4,0.153,5,0.153,9,0.545,11,3.955,12,0.336,23,0.57,26,0.013,28,0.357,43,0.955,45,0.252,57,0.172,58,0.137,96,0.01,97,0.01,113,1.409,244,2.452,276,1.819,518,1.598,743,1.893,746,2.829,764,2.539,765,3.457,766,1.893,1018,4.739,1021,4.739,1069,6.109,1070,4.566,1071,5.784,1072,5.784]],["title/interfaces/GoogleUser.html",[914,1.782,1073,2.969]],["body/interfaces/GoogleUser.html",[3,0.172,4,0.153,5,0.153,12,0.335,26,0.012,28,0.483,43,1.157,57,0.172,96,0.01,97,0.01,254,1.234,425,3.044,518,1.595,814,4.688,815,4.688,914,2.517,916,3.462,1059,5.679,1073,5.079,1074,5.036,1075,5.036]],["title/injectables/HashingProvider.html",[48,0.537,461,2.11]],["body/injectables/HashingProvider.html",[3,0.154,4,0.137,5,0.137,9,0.488,12,0.301,13,1.399,23,0.644,25,1.493,26,0.013,27,1.106,28,0.404,29,1.069,38,1.399,39,2.931,43,1.12,45,0.225,46,0.818,48,0.859,57,0.154,58,0.101,96,0.01,97,0.01,236,1.586,272,3.093,276,1.862,461,3.377,562,5.707,564,6.253,565,5.707,566,4.522,567,6.914,568,6.253,570,5.707,1034,5.707,1076,4.522,1077,8.041,1078,5.18,1079,5.18]],["title/interfaces/IActiveUser.html",[914,1.782,948,2.766]],["body/interfaces/IActiveUser.html",[3,0.161,4,0.143,5,0.143,12,0.313,26,0.013,28,0.494,43,1.159,45,0.235,57,0.161,96,0.01,97,0.01,254,1.155,425,2.974,518,1.532,589,2.569,814,4.581,815,4.581,816,5.169,817,5.55,843,5.169,850,3.924,914,2.355,916,3.239,948,4.542,1080,4.713,1081,4.713,1082,4.261]],["title/entities/Item.html",[119,1.651,584,2.211]],["body/entities/Item.html",[3,0.101,4,0.09,5,0.09,9,0.631,12,0.197,13,0.727,23,0.761,26,0.013,27,0.976,28,0.502,29,0.803,43,1.041,44,2.062,45,0.304,57,0.101,58,0.067,85,1.408,96,0.007,97,0.007,113,1.903,119,2.71,152,3.155,187,2.248,258,2.683,376,2.039,496,2.683,516,3.696,518,1.122,541,3.792,584,3.421,587,4.554,589,1.888,590,4.554,597,3.643,598,4.194,600,5.237,601,5.776,603,3.571,605,2.967,606,2.967,610,4.426,612,4.194,614,5.362,615,3.878,616,2.471,617,2.517,619,4.288,621,2.16,622,2.471,702,4.023,771,4.194,772,5.036,773,5.036,774,5.036,775,4.261,801,2.301,802,2.301,1083,2.967,1084,3.398,1085,4.912,1086,4.912,1087,3.398,1088,3.398,1089,3.398,1090,3.398,1091,5.823,1092,5.362,1093,6.099,1094,3.398,1095,3.398,1096,4.288,1097,3.398,1098,3.398,1099,3.398,1100,3.398,1101,3.398,1102,3.398,1103,2.967,1104,3.398,1105,3.398]],["title/injectables/ItemsAnalyticsProvider.html",[48,0.537,1106,3.224]],["body/injectables/ItemsAnalyticsProvider.html",[3,0.136,4,0.121,5,0.121,9,0.429,12,0.264,13,1.287,14,1.695,16,1.541,18,1.903,23,0.593,25,1.04,26,0.013,27,0.771,28,0.281,29,0.744,38,0.974,39,2.344,45,0.324,46,0.949,48,0.79,57,0.136,58,0.118,60,0.719,70,1.774,71,1.305,73,1.912,75,1.184,81,1.912,84,1.489,96,0.009,97,0.009,104,2.131,119,2.723,130,4.856,133,3.701,208,1.595,236,1.394,264,2.249,272,2.846,273,4.073,274,3.479,275,3.61,276,1.563,281,4.042,282,5.317,324,1.987,376,2.733,542,2.624,617,1.987,683,3.701,697,2.591,740,3.311,741,3.311,742,3.311,923,3.084,1106,4.748,1107,5.88,1108,3.975,1109,4.553,1110,4.553,1111,5.251,1112,4.553,1113,3.595,1114,4.553,1115,4.553,1116,4.553,1117,4.553,1118,3.975,1119,4.553,1120,4.553,1121,4.553]],["title/controllers/ItemsController.html",[98,1.482,1122,2.969]],["body/controllers/ItemsController.html",[3,0.071,4,0.063,5,0.063,9,0.739,12,0.139,13,0.805,14,1.819,23,0.52,25,1.206,26,0.013,27,1.033,28,0.447,29,0.864,37,3.306,38,1.416,44,1.58,45,0.303,46,0.594,57,0.071,58,0.047,60,0.377,62,2.021,64,1.514,69,3.972,71,1.079,75,1.373,84,1.168,85,1.951,96,0.006,97,0.006,98,1.689,100,0.898,102,1.36,104,2.287,105,2.972,110,2.972,111,1.887,112,3.687,113,1.287,116,2.305,117,3.286,118,2.393,119,3.265,120,3.154,121,3.635,123,4.482,124,4.482,125,2.622,126,2.059,129,3.663,131,3.892,133,4.053,150,3.006,153,3.676,155,5.043,156,1.887,157,4.087,159,1.36,160,2.032,161,3.27,162,1.36,163,0.979,164,2.549,165,3.27,166,3.27,170,1.003,173,1.36,174,1.36,175,1.519,177,2.549,182,1.131,183,3.578,186,3.006,187,2.059,191,2.087,193,4.066,195,2.087,239,2.521,250,2.259,266,2.087,267,2.087,274,3.419,404,2.549,419,3.171,429,3.154,442,2.664,516,1.781,589,1.232,634,1.887,635,2.972,637,4.113,638,4.812,639,3.578,642,2.087,643,2.087,644,1.887,646,2.972,647,1.887,648,1.887,650,2.972,651,2.972,652,1.434,653,2.393,654,2.087,660,1.294,661,2.038,662,1.294,663,1.738,666,2.087,698,1.519,1005,4.519,1006,4.438,1122,2.737,1123,2.087,1124,3.764,1125,3.764,1126,2.39,1127,2.39,1128,5.747,1129,2.39,1130,2.39,1131,2.39,1132,2.39,1133,2.087,1134,2.39,1135,2.087,1136,2.39,1137,2.39,1138,2.39,1139,2.39,1140,2.39,1141,2.39,1142,2.39]],["title/modules/ItemsModule.html",[208,1.431,221,2.451]],["body/modules/ItemsModule.html",[3,0.149,4,0.132,5,0.132,26,0.013,45,0.355,46,0.788,50,2.266,51,3.172,53,3.172,54,3.94,57,0.149,58,0.098,96,0.009,97,0.009,100,2.399,119,2.018,208,2.466,210,2.362,211,2.362,212,2.578,213,2.578,214,2.362,215,3.636,216,3.636,221,4.894,222,4.247,225,3.298,226,2.578,227,2.266,229,3.633,234,3.628,239,4.504,317,3.94,322,3.94,323,3.38,324,2.178,380,3.94,381,3.94,1113,3.94,1122,5.118,1135,4.357,1143,4.357,1144,4.99,1145,4.357,1146,4.357,1147,4.99,1148,4.99,1149,4.99]],["title/injectables/ItemsService.html",[48,0.537,239,2.211]],["body/injectables/ItemsService.html",[3,0.061,4,0.055,5,0.055,9,0.538,12,0.119,13,0.714,14,1.826,16,1.13,18,1.056,23,0.563,25,1.217,26,0.013,27,1.061,28,0.329,29,0.872,33,3.604,34,2.261,35,1.796,37,1.457,38,1.424,39,2.594,43,0.821,44,2.238,45,0.312,46,0.665,48,0.439,57,0.061,58,0.04,60,0.527,62,1.534,64,1.724,70,2.225,71,1.856,73,2.238,75,1.484,81,2.238,84,1.471,85,0.957,96,0.005,97,0.006,104,2.296,112,3.092,116,2.492,119,3.19,130,3.427,133,3.438,150,2.759,152,0.863,157,3.427,160,2.116,170,0.863,177,2.261,227,0.934,236,0.63,239,1.807,244,1.476,248,3.438,249,1.58,250,2.529,263,3.034,264,2.821,272,1.58,273,2.261,274,1.724,275,2.004,276,0.868,281,1.234,282,3.326,324,0.898,516,0.973,542,2.524,589,1.869,597,1.016,610,1.234,617,1.457,627,1.624,646,1.624,652,1.234,653,1.308,660,1.807,662,1.807,678,2.636,679,2.636,681,3.249,683,2.754,688,2.636,690,2.636,692,2.122,693,2.636,696,3.326,697,1.17,698,1.308,699,1.234,700,1.624,701,1.624,702,2.529,713,2.678,718,2.915,723,3.082,724,3.082,725,1.308,726,2.915,728,1.624,730,2.261,733,1.393,740,1.495,741,1.495,742,1.495,775,2.678,801,1.393,802,1.393,836,1.016,875,1.796,876,1.796,960,1.796,993,3.326,998,1.624,1005,3.63,1103,1.796,1111,3.679,1113,1.624,1118,1.796,1150,1.796,1151,2.057,1152,2.057,1153,2.057,1154,3.338,1155,2.057,1156,2.057,1157,2.057,1158,3.338,1159,2.057,1160,4.849,1161,2.057,1162,2.057,1163,3.338,1164,2.057,1165,4.213,1166,2.057,1167,2.057,1168,4.213,1169,1.624,1170,2.057,1171,2.057,1172,2.057,1173,4.213,1174,4.213,1175,2.057,1176,2.057,1177,2.057,1178,4.373,1179,1.796,1180,2.057,1181,3.338,1182,2.057,1183,2.057,1184,2.057,1185,2.057,1186,3.338,1187,2.057,1188,2.057,1189,2.057,1190,2.057,1191,2.057,1192,3.338,1193,2.057,1194,2.057,1195,2.057,1196,2.057,1197,2.057,1198,4.213,1199,2.057,1200,2.057,1201,2.057,1202,1.796,1203,2.057,1204,2.057,1205,2.057,1206,2.057,1207,2.057,1208,3.338,1209,2.057,1210,3.338,1211,2.057,1212,3.338,1213,2.057,1214,2.057,1215,3.338,1216,2.057,1217,3.338,1218,2.057,1219,3.338,1220,2.057,1221,4.213,1222,2.057,1223,2.057]],["title/injectables/LocalStrategy.html",[48,0.537,1224,3.224]],["body/injectables/LocalStrategy.html",[3,0.147,4,0.131,5,0.131,12,0.287,13,1.358,14,1.764,18,1.565,23,0.625,25,1.449,26,0.013,27,1.074,28,0.392,29,1.037,38,1.058,39,2.473,45,0.346,46,1.002,48,0.834,49,2.968,57,0.147,58,0.097,60,0.78,64,1.417,69,3.809,70,1.927,71,1.417,75,1.286,84,1.093,96,0.009,97,0.009,182,2.34,236,1.514,254,1.582,398,4.589,425,1.927,433,3.595,435,4.696,436,3.904,500,3.349,987,3.278,1224,5.011,1225,4.318,1226,6.346,1227,4.945,1228,4.945,1229,6.346,1230,4.945,1231,4.945,1232,4.318,1233,4.945,1234,4.318,1235,4.318,1236,4.945,1237,4.945,1238,4.945,1239,4.945,1240,4.945]],["title/classes/LoginDto.html",[58,0.08,398,2.451]],["body/classes/LoginDto.html",[3,0.14,4,0.124,5,0.124,9,0.708,12,0.272,23,0.604,26,0.013,28,0.448,43,1.088,45,0.267,57,0.14,58,0.12,60,1.217,85,2.077,96,0.009,97,0.009,113,1.494,125,2.892,163,1.219,244,2.149,254,1.705,276,1.594,369,4.255,398,3.681,425,3.141,442,3.162,518,1.4,743,1.535,746,2.479,748,3.49,749,3.681,762,3.53,764,2.225,765,3.375,766,1.535,847,4.459,853,4.459,855,4.842,1241,4.095,1242,6.132,1243,4.095,1244,4.69,1245,4.69,1246,4.69]],["title/injectables/LoginProvider.html",[48,0.537,464,2.596]],["body/injectables/LoginProvider.html",[3,0.099,4,0.088,5,0.088,9,0.535,10,3.805,11,3.083,12,0.192,13,1.031,14,1.742,16,1.924,18,1.525,23,0.56,25,1.298,26,0.013,27,0.962,28,0.351,29,0.929,38,1.336,40,4.401,45,0.311,46,0.761,47,1.71,48,0.633,49,3.411,57,0.099,58,0.065,60,0.897,62,1.525,64,1.901,70,2.698,71,1.984,73,2.023,75,1.8,78,2.49,79,2.49,81,2.023,83,2.407,84,1.065,96,0.007,97,0.007,103,3.264,104,2.191,126,1.878,236,1.013,240,3.466,254,1.529,262,2.105,263,2.743,264,2.807,369,3.38,398,4.613,401,5.237,425,1.878,433,2.407,456,3.805,461,3.691,462,4.155,464,3.064,468,1.987,474,2.614,481,4.208,485,4.208,487,4.208,498,2.614,502,2.242,506,4.208,507,5.466,508,4.208,509,3.805,514,2.89,516,2.281,542,1.878,573,3.613,576,4.208,581,5.45,692,3.064,843,2.242,850,2.407,923,3.264,934,4.928,944,5.45,965,2.614,1037,2.89,1064,4.208,1082,2.614,1247,2.89,1248,3.31,1249,3.31,1250,3.31,1251,3.805,1252,4.819,1253,4.819,1254,4.819,1255,3.31,1256,4.208,1257,2.89,1258,3.31,1259,3.31]],["title/controllers/MailController.html",[98,1.482,1260,2.969]],["body/controllers/MailController.html",[3,0.157,4,0.139,5,0.139,12,0.305,13,1.411,14,1.814,23,0.518,25,1.2,26,0.013,27,0.889,28,0.325,29,0.859,38,1.124,45,0.346,46,0.829,57,0.157,58,0.103,60,0.829,75,1.366,84,1.162,96,0.01,97,0.01,98,1.906,100,1.975,102,2.99,113,1.28,126,2.048,159,2.99,161,2.99,162,2.99,163,1.366,182,2.487,299,2.596,301,2.99,303,3.34,304,3.559,414,3.926,437,3.34,438,2.845,527,3.82,863,4.327,1260,4.796,1261,4.588,1262,4.588,1263,5.207,1264,5.255,1265,6.596,1266,5.255,1267,4.588,1268,4.588,1269,5.255,1270,5.255,1271,5.255,1272,5.255]],["title/modules/MailModule.html",[208,1.431,312,2.766]],["body/modules/MailModule.html",[3,0.131,4,0.117,5,0.117,14,1.107,26,0.013,45,0.342,46,0.694,47,2.272,50,1.997,57,0.131,58,0.086,71,1.26,85,1.26,96,0.009,97,0.009,100,2.209,208,2.319,210,2.081,211,2.081,212,2.272,213,2.272,214,2.081,215,3.419,216,3.419,225,3.036,226,2.272,227,1.997,229,2.502,254,0.941,293,2.795,294,2.381,299,2.172,312,5.445,318,3.972,361,3.839,363,3.472,365,3.472,516,3.133,863,4.901,952,3.839,1202,3.839,1260,4.812,1262,3.839,1267,3.839,1273,3.839,1274,3.839,1275,3.839,1276,5.191,1277,4.397,1278,5.877,1279,4.397,1280,4.64,1281,3.472,1282,5.877,1283,4.397,1284,3.839,1285,2.978,1286,4.397,1287,4.397,1288,4.397,1289,4.397,1290,4.397,1291,4.397,1292,4.397,1293,4.397,1294,4.397,1295,4.397,1296,4.397,1297,4.397,1298,4.397,1299,3.472,1300,4.397,1301,4.397,1302,4.397,1303,4.397,1304,4.397,1305,4.397,1306,4.397]],["title/injectables/MailService.html",[48,0.537,863,2.451]],["body/injectables/MailService.html",[3,0.117,4,0.104,5,0.104,9,0.513,12,0.229,13,1.166,14,1.845,16,1.845,18,1.725,23,0.616,25,1.428,26,0.013,27,1.199,28,0.386,29,1.022,36,4.57,38,1.338,39,2.63,43,0.853,45,0.308,46,0.621,48,0.716,57,0.117,58,0.077,60,0.86,62,1.246,64,1.792,70,1.534,71,1.128,73,1.653,75,1.417,78,2.034,79,2.034,81,1.653,84,0.87,96,0.008,97,0.008,144,2.952,236,1.205,254,1.74,264,1.945,272,2.58,291,5.328,293,2.503,294,2.132,414,3.334,425,2.856,437,2.503,438,2.132,500,2.666,512,3.438,542,1.534,863,3.272,890,3.109,895,5.328,896,5.787,961,4.304,963,4.936,1043,4.759,1251,3.109,1263,4.304,1276,4.777,1280,3.109,1281,3.109,1299,4.936,1307,3.438,1308,4.759,1309,5.451,1310,5.451,1311,3.937,1312,7.33,1313,3.937,1314,5.451,1315,3.937,1316,5.451,1317,3.937,1318,3.937,1319,3.937,1320,3.438,1321,3.438,1322,3.937,1323,3.937,1324,3.937,1325,3.937]],["title/injectables/MailjetProvider.html",[48,0.537,1276,2.596]],["body/injectables/MailjetProvider.html",[3,0.128,4,0.114,5,0.114,9,0.403,11,2.117,12,0.249,13,1.236,14,1.644,16,2.212,18,1.356,23,0.644,25,1.319,26,0.013,27,1.235,28,0.404,29,0.944,36,4.424,37,2.851,38,0.917,43,1.026,45,0.284,46,0.676,48,0.759,50,1.946,57,0.128,58,0.084,60,1.103,64,1.655,70,1.67,71,1.228,73,1.799,75,1.114,81,1.799,83,3.116,84,0.947,85,1.228,96,0.009,97,0.009,126,1.67,182,2.028,236,1.312,318,4.513,359,3.116,425,2.844,518,1.319,542,2.251,589,1.402,895,3.383,896,5.936,902,3.116,923,3.911,1263,4.56,1276,3.672,1299,3.383,1308,3.741,1326,3.741,1327,6.822,1328,5.776,1329,5.776,1330,4.285,1331,5.776,1332,3.741,1333,4.285,1334,4.285,1335,4.285,1336,4.285,1337,4.285,1338,3.741,1339,4.285,1340,4.285,1341,4.285,1342,4.285,1343,4.285,1344,5.776,1345,4.285,1346,4.285,1347,4.285,1348,4.285,1349,4.285,1350,3.741,1351,4.285,1352,4.285,1353,4.285]],["title/interfaces/Paginated.html",[699,2.451,914,1.782]],["body/interfaces/Paginated.html",[3,0.155,4,0.138,5,0.138,12,0.301,26,0.013,28,0.511,29,1.07,40,4.558,43,1.136,57,0.155,88,3.775,96,0.01,97,0.01,276,1.957,305,4.076,351,4.099,518,1.495,660,2.811,662,2.811,699,3.929,821,4.099,825,4.099,836,3.719,912,5.943,914,2.266,916,3.116,942,4.855,1354,4.533,1355,6.573,1356,6.573,1357,5.473,1358,7.528,1359,4.533,1360,4.533,1361,4.533]],["title/modules/PaginationModule.html",[208,1.431,222,2.211]],["body/modules/PaginationModule.html",[3,0.169,4,0.15,5,0.15,26,0.012,45,0.301,46,0.896,57,0.169,58,0.111,96,0.01,97,0.01,208,2.615,210,2.687,211,2.687,212,2.933,213,2.933,214,2.687,215,3.856,216,3.856,222,4.44,225,3.575,226,2.933,227,2.579,681,4.815,1362,4.958,1363,4.958,1364,4.958,1365,5.678,1366,5.678]],["title/injectables/PaginationProvider.html",[48,0.537,681,2.324]],["body/injectables/PaginationProvider.html",[3,0.107,4,0.095,5,0.095,12,0.209,13,1.095,14,1.499,16,1.733,18,1.62,23,0.504,25,1.36,26,0.013,27,0.866,28,0.368,29,0.837,37,3.268,38,0.77,39,1.995,43,0.813,45,0.319,46,0.568,47,1.86,48,0.673,50,1.635,52,2.617,57,0.107,58,0.07,60,0.808,64,2.263,70,1.403,71,1.467,73,1.511,75,1.331,81,1.511,84,0.796,85,1.032,88,2.617,96,0.01,97,0.008,104,1.885,121,2.049,131,2.438,170,1.511,236,1.102,276,1.331,294,3.225,305,1.949,318,4.275,321,2.617,351,2.842,363,2.842,542,1.403,617,1.571,639,3.467,660,4.126,661,3.513,662,3.711,681,2.913,683,3.785,699,3.072,821,2.842,825,2.842,902,2.617,912,2.842,913,3.143,942,3.467,946,4.469,983,3.351,1179,3.143,1355,3.143,1356,3.143,1357,2.617,1359,4.469,1360,5.201,1361,3.143,1367,3.143,1368,5.957,1369,3.6,1370,3.6,1371,6.854,1372,5.664,1373,6.854,1374,3.6,1375,5.957,1376,2.842,1377,3.6,1378,3.6,1379,3.6,1380,3.6,1381,3.6,1382,3.6,1383,2.842,1384,3.6,1385,3.6,1386,3.6,1387,5.119,1388,3.6,1389,5.119,1390,3.6,1391,3.6,1392,3.6,1393,3.6,1394,3.6,1395,3.6,1396,3.6,1397,3.6,1398,3.6,1399,3.6,1400,3.6,1401,3.6]],["title/classes/PaginationQueryDto.html",[58,0.08,983,2.11]],["body/classes/PaginationQueryDto.html",[3,0.164,4,0.146,5,0.146,12,0.319,23,0.668,26,0.013,28,0.419,29,1.256,45,0.239,57,0.164,58,0.133,96,0.01,97,0.01,113,1.652,518,1.548,541,4.069,660,3.982,661,3.671,662,3.982,663,4.93,743,1.797,766,1.797,798,3.481,836,3.794,972,3.126,983,3.502,984,4.185,1178,4.93,1402,6.78,1403,5.493,1404,5.493,1405,7.355,1406,5.493,1407,6.78]],["title/classes/PatchClaimDto.html",[58,0.08,147,2.596]],["body/classes/PatchClaimDto.html",[3,0.132,4,0.117,5,0.117,9,0.695,12,0.257,23,0.581,26,0.013,28,0.438,43,1.035,45,0.308,57,0.132,58,0.115,60,1.164,85,2.175,96,0.009,97,0.009,113,1.438,116,1.931,119,3.068,125,2.855,147,3.751,152,2.973,163,1.15,171,4.827,172,2.996,187,3.019,244,2.067,276,1.534,442,3.091,518,1.347,589,2.608,609,4.496,610,4.251,620,3.217,621,3.751,633,2.812,743,1.448,745,3.493,746,2.386,748,3.358,749,4.251,762,3.43,764,2.141,765,3.28,766,1.448,796,2.655,985,3.493,987,3.048,1408,5.152,1409,5.9,1410,3.863,1411,4.424,1412,4.424,1413,4.424,1414,3.493,1415,5.152]],["title/classes/PatchItemDto.html",[58,0.08,157,2.451]],["body/classes/PatchItemDto.html",[3,0.149,4,0.132,5,0.132,9,0.663,12,0.29,23,0.492,26,0.013,28,0.395,43,1.07,45,0.306,57,0.149,58,0.125,60,1.21,85,2.126,96,0.009,97,0.009,112,2.702,113,1.216,116,2.178,119,3.171,125,2.692,157,3.831,163,1.297,177,3.38,178,4.641,244,2.237,276,1.659,442,2.786,518,1.458,589,2.642,621,4.058,661,2.702,743,1.633,746,2.581,748,2.84,749,3.831,762,3.298,764,2.316,765,3.153,766,1.633,770,3.94,987,3.298,1408,5.573,1410,4.357,1414,3.94,1416,6.384,1417,4.99]],["title/classes/PatchUserDto.html",[58,0.08,1418,2.596]],["body/classes/PatchUserDto.html",[3,0.148,4,0.131,5,0.131,9,0.661,12,0.288,23,0.488,26,0.013,28,0.393,43,1.068,45,0.305,57,0.148,58,0.124,60,1.208,85,2.121,96,0.009,97,0.009,113,1.208,116,2.163,125,2.685,163,1.288,244,2.227,254,1.675,276,1.652,414,2.448,438,2.684,442,2.774,518,1.451,589,2.605,637,3.617,661,2.684,743,1.622,746,2.57,748,2.821,749,3.814,762,3.283,764,2.306,765,3.14,766,1.622,813,3.913,987,3.283,1414,3.913,1418,4.04,1419,5.549,1420,6.356,1421,6.356,1422,4.956,1423,4.956,1424,4.956,1425,6.126]],["title/classes/RefreshTokenDto.html",[58,0.08,1426,3.224]],["body/classes/RefreshTokenDto.html",[3,0.155,4,0.138,5,0.138,9,0.709,11,3.974,12,0.301,23,0.512,26,0.013,28,0.405,43,1.027,45,0.285,57,0.155,58,0.147,85,1.876,96,0.01,97,0.01,113,1.265,125,2.731,163,1.35,244,1.819,254,1.534,276,1.35,442,2.857,518,1.495,637,3.725,743,1.699,746,2.099,748,2.955,762,3.382,764,2.375,765,3.234,766,1.699,966,6.26,1070,4.099,1256,6.573,1426,5.168,1427,5.715,1428,7.169,1429,5.192,1430,5.192,1431,5.192]],["title/classes/RegisterDto.html",[58,0.08,1432,3.224]],["body/classes/RegisterDto.html",[3,0.103,4,0.092,5,0.092,9,0.662,12,0.201,23,0.666,26,0.013,27,1.227,28,0.418,43,1.046,45,0.254,57,0.103,58,0.114,60,1.267,96,0.007,97,0.007,113,1.646,125,2.981,163,0.902,244,1.746,254,1.744,276,1.296,305,3.454,369,4.202,418,3.935,425,2.824,518,1.138,554,4.222,583,4.352,743,1.135,746,2.015,762,3.634,764,2.314,765,3.475,766,1.631,799,2.738,800,2.738,804,3.935,805,4.606,816,3.951,818,5.899,819,3.028,828,3.028,829,5.569,830,4.352,831,4.352,832,4.352,833,4.352,834,3.935,835,4.352,836,3.475,837,4.352,838,4.352,840,5.569,841,3.028,847,3.624,848,3.028,851,5.094,852,4.352,853,3.624,854,4.352,855,5.036,856,3.028,1432,3.935,1433,3.028,1434,5.835,1435,6.379,1436,3.468,1437,4.984,1438,3.468,1439,3.468,1440,3.468,1441,3.468,1442,3.468,1443,3.468,1444,3.468,1445,3.468]],["title/interfaces/SuccessResponse.html",[914,1.782,1446,2.969]],["body/interfaces/SuccessResponse.html",[3,0.177,4,0.157,5,0.157,12,0.344,26,0.012,28,0.47,40,4.833,43,1.037,57,0.177,96,0.011,97,0.011,276,2.049,305,4.267,518,1.621,914,2.586,916,3.556,918,4.678,942,5.148,1357,5.73,1446,5.162,1447,5.173]],["title/injectables/UpdateUserProvider.html",[48,0.537,1448,2.596]],["body/injectables/UpdateUserProvider.html",[3,0.115,4,0.102,5,0.102,9,0.506,12,0.224,13,1.149,14,1.556,16,1.818,18,1.7,23,0.529,25,1.226,26,0.013,27,0.909,28,0.332,29,0.878,33,2.908,37,1.682,38,1.149,39,2.093,44,1.618,45,0.325,46,0.848,47,1.991,48,0.706,57,0.115,58,0.075,60,0.848,62,1.22,64,1.539,70,2.409,71,2.015,73,2.255,75,1.607,81,2.255,84,0.852,96,0.008,97,0.008,104,1.956,150,3.056,236,1.18,248,3.454,254,1.677,263,2.193,264,2.653,324,1.682,369,2.908,438,2.087,461,3.859,468,2.313,483,3.365,502,2.61,509,4.24,542,2.606,589,1.758,617,1.682,683,3.454,697,2.193,698,2.45,713,2.45,723,3.414,724,3.414,725,3.414,730,2.61,733,2.61,860,3.043,864,4.88,868,2.61,869,3.365,873,2.802,877,3.365,886,3.365,961,4.24,962,4.689,963,4.24,964,4.689,965,4.24,1418,4.749,1448,3.414,1449,5.397,1450,4.689,1451,3.854,1452,4.689,1453,3.854,1454,3.854,1455,3.854,1456,3.854,1457,3.854,1458,3.854,1459,3.854,1460,3.854,1461,3.854]],["title/entities/Upload.html",[584,2.211,1462,2.451]],["body/entities/Upload.html",[3,0.121,4,0.108,5,0.108,9,0.383,12,0.236,23,0.761,26,0.013,27,1.077,28,0.51,43,1.053,44,1.708,45,0.277,57,0.121,58,0.08,96,0.008,97,0.008,113,1.881,376,2.442,516,3.75,518,1.273,541,3.347,584,3.705,589,2.082,597,3.381,598,4.625,600,5.213,601,5.761,603,4.054,610,4.107,612,4.625,614,5.384,616,2.959,617,2.434,836,2.755,1091,6.096,1092,5.614,1096,6.465,1285,4.308,1462,4.107,1463,3.553,1464,6.362,1465,5.023,1466,5.023,1467,6.362,1468,4.069,1469,4.069,1470,5.576,1471,4.069,1472,4.069,1473,4.069,1474,4.069,1475,5.213,1476,4.069,1477,4.069,1478,3.213,1479,3.213,1480,3.553]],["title/interfaces/UploadFile.html",[914,1.782,1481,2.766]],["body/interfaces/UploadFile.html",[3,0.166,4,0.147,5,0.147,12,0.323,26,0.012,27,1.306,28,0.514,43,1.134,45,0.242,57,0.166,96,0.01,97,0.01,518,1.56,836,3.654,914,2.427,916,3.338,1285,5.224,1465,6.09,1466,6.09,1475,5.609,1478,4.392,1479,4.392,1481,4.627,1482,4.857,1483,4.857]],["title/injectables/UploadToAwsProvider.html",[48,0.537,1484,2.596]],["body/injectables/UploadToAwsProvider.html",[3,0.115,4,0.102,5,0.218,9,0.582,12,0.224,13,1.149,14,1.556,16,2.093,18,1.22,23,0.609,25,1.412,26,0.013,27,1.327,28,0.382,29,1.011,38,1.149,39,1.502,43,0.526,45,0.317,46,0.848,48,0.706,50,1.75,57,0.115,58,0.075,60,0.608,62,1.7,63,4.24,64,2.015,70,1.502,71,2.087,73,1.618,75,1.002,81,1.618,84,1.478,96,0.008,97,0.008,104,1.956,126,1.502,159,2.193,182,1.824,236,1.18,264,1.904,318,4.37,542,1.502,573,3.93,627,3.043,902,2.802,923,3.637,1251,3.043,1285,3.637,1321,4.689,1462,4.645,1484,3.414,1485,5.838,1486,3.365,1487,5.371,1488,5.551,1489,5.371,1490,5.371,1491,3.854,1492,5.371,1493,5.748,1494,3.854,1495,5.371,1496,3.854,1497,5.838,1498,3.365,1499,3.854,1500,3.854,1501,3.365,1502,3.854,1503,3.365,1504,3.854,1505,3.854,1506,3.854,1507,3.854,1508,3.365,1509,3.854,1510,3.854,1511,3.854,1512,3.854,1513,3.854,1514,3.854,1515,3.854,1516,6.182,1517,3.854,1518,3.854,1519,3.854]],["title/controllers/UploadsController.html",[98,1.482,1520,2.969]],["body/controllers/UploadsController.html",[3,0.128,4,0.114,5,0.214,9,0.709,11,2.125,12,0.25,13,1.239,14,1.647,23,0.424,25,0.982,26,0.013,27,1.185,28,0.358,29,0.703,38,0.92,45,0.34,46,0.914,52,4.759,57,0.128,58,0.084,60,0.679,62,1.361,64,1.233,67,3.756,71,1.66,75,1.118,84,0.951,85,1.233,96,0.009,97,0.009,98,2.375,100,1.617,102,2.448,104,2.071,113,1.048,118,3.681,121,3.725,126,1.676,161,2.448,162,2.448,163,1.505,164,3.922,165,3.295,166,3.295,173,2.448,174,2.448,175,2.735,182,2.036,186,2.448,187,1.676,276,1.702,786,3.396,1169,3.396,1462,4.518,1481,3.922,1493,5.168,1520,4.21,1521,3.756,1522,5.168,1523,3.756,1524,4.302,1525,4.302,1526,4.302,1527,6.546,1528,4.302,1529,4.302,1530,3.756,1531,4.302,1532,3.756,1533,5.791,1534,4.161,1535,3.756,1536,4.302,1537,4.302,1538,4.302,1539,4.302,1540,4.302,1541,4.302,1542,3.756,1543,4.302,1544,4.302,1545,4.302]],["title/modules/UploadsModule.html",[208,1.431,313,2.766]],["body/modules/UploadsModule.html",[3,0.156,4,0.139,5,0.139,9,0.494,26,0.013,45,0.346,46,0.827,57,0.156,58,0.103,96,0.01,97,0.01,100,2.475,208,2.727,210,2.481,211,2.481,212,2.708,213,2.708,214,2.481,215,3.72,216,2.708,225,3.402,226,2.708,227,2.381,229,2.983,313,5.522,323,3.55,324,2.288,1462,3.146,1484,5.05,1520,5.236,1522,5.199,1534,5.05,1535,4.577,1546,4.577,1547,4.577,1548,5.242,1549,4.577,1550,5.242,1551,5.242,1552,4.577,1553,5.242]],["title/injectables/UploadsService.html",[48,0.537,1534,2.596]],["body/injectables/UploadsService.html",[3,0.117,4,0.104,5,0.206,9,0.513,12,0.229,13,1.166,14,1.574,16,2.117,18,1.725,23,0.537,25,1.245,26,0.013,27,1.142,28,0.417,29,0.891,38,0.842,45,0.338,46,0.86,48,0.716,50,1.788,57,0.117,58,0.077,60,0.86,62,1.246,64,1.934,70,2.436,71,1.792,73,1.653,75,1.417,81,1.653,84,0.87,96,0.008,97,0.008,104,1.979,116,1.718,126,1.534,236,1.205,248,2.034,272,2.58,318,4.51,324,1.718,419,2.363,529,3.438,542,2.124,573,2.503,617,1.718,683,3.486,697,2.241,713,2.503,725,2.503,1285,2.666,1376,3.109,1383,3.109,1462,4.725,1465,3.109,1466,3.109,1475,2.863,1478,3.109,1479,3.109,1480,3.438,1481,4.799,1484,4.66,1488,3.109,1493,4.936,1497,3.438,1503,3.438,1508,3.438,1522,4.304,1523,4.759,1534,3.465,1549,3.438,1552,3.438,1554,3.438,1555,3.937,1556,6.252,1557,3.937,1558,3.937,1559,3.937,1560,3.937,1561,3.937,1562,3.937,1563,3.937,1564,3.937,1565,3.937,1566,3.937,1567,3.937,1568,3.937,1569,3.438,1570,3.937,1571,3.937,1572,3.937,1573,3.937,1574,3.438,1575,3.937,1576,3.937,1577,3.937,1578,3.937]],["title/entities/User.html",[254,0.874,584,2.211]],["body/entities/User.html",[3,0.09,4,0.08,5,0.08,9,0.426,12,0.176,23,0.76,26,0.013,28,0.503,29,0.978,40,3.805,43,1.079,44,1.898,45,0.292,57,0.09,58,0.088,60,1.281,85,2.047,96,0.007,97,0.007,113,1.88,138,3.465,152,2.513,254,1.369,258,2.396,369,2.925,376,1.821,425,2.105,456,4.265,496,4.265,516,3.686,518,1.032,541,4.459,584,3.241,587,4.265,589,1.768,590,4.265,597,2.957,598,3.927,600,5.307,601,5.819,603,3.286,610,3.592,612,3.927,614,5.402,615,3.569,616,2.206,617,2.357,621,1.929,622,2.206,814,3.242,815,3.242,816,3.658,817,3.927,843,4.334,849,2.649,850,2.206,890,4.265,1004,2.206,1059,3.927,1091,6.149,1092,5.551,1093,6.666,1257,2.649,1579,2.649,1580,3.034,1581,3.034,1582,3.034,1583,3.034,1584,4.52,1585,3.034,1586,3.034,1587,4.52,1588,3.034,1589,3.034,1590,3.034,1591,3.034,1592,3.034,1593,3.034,1594,3.034,1595,3.034,1596,3.034,1597,5.402,1598,4.52,1599,3.034]],["title/controllers/UsersController.html",[98,1.482,1600,2.969]],["body/controllers/UsersController.html",[3,0.072,4,0.064,5,0.064,9,0.739,12,0.139,13,0.809,14,1.54,23,0.522,25,1.21,26,0.013,27,1.035,28,0.447,29,0.866,37,3.243,38,1.419,43,0.905,44,1.009,45,0.315,46,0.738,57,0.072,58,0.047,60,0.379,62,1.823,64,1.083,69,3.672,71,1.083,75,0.983,84,1.171,85,1.9,96,0.006,97,0.006,98,1.695,100,0.903,102,1.368,104,2.29,108,2.985,113,1.291,116,2.312,118,2.403,120,3.165,121,3.482,123,4.49,124,4.49,125,2.625,126,1.473,129,3.672,131,2.56,140,2.098,141,4.051,143,2.098,144,3.78,150,3.015,153,3.69,155,5.053,159,1.368,160,2.039,161,3.279,162,1.368,163,0.983,164,2.56,165,3.279,166,3.279,170,1.009,173,1.368,174,1.368,175,1.528,182,1.137,183,3.589,186,3.015,187,2.065,199,2.098,240,2.212,250,2.269,254,1.752,274,3.16,299,1.187,301,1.368,303,1.528,304,1.627,404,2.56,409,3.69,414,3.369,419,3.18,429,3.165,438,2.047,442,2.67,445,3.301,503,2.098,516,1.789,527,1.747,589,2.285,635,2.985,637,3.773,638,4.448,639,4.143,644,1.897,647,1.897,648,1.897,650,2.985,651,2.985,652,1.442,653,1.528,660,1.301,661,1.301,662,1.301,663,1.747,698,1.528,861,3.301,866,2.098,1133,2.098,1268,2.098,1418,4.336,1425,5.955,1530,2.098,1600,2.749,1601,2.098,1602,3.78,1603,3.78,1604,2.403,1605,2.403,1606,2.403,1607,2.403,1608,6.118,1609,3.78,1610,3.78,1611,2.403,1612,3.78,1613,2.403,1614,2.403,1615,2.403,1616,2.403,1617,2.098,1618,2.403,1619,2.403,1620,2.403,1621,2.403,1622,2.403,1623,2.403,1624,2.403,1625,2.403,1626,2.403,1627,2.403]],["title/modules/UsersModule.html",[208,1.431,223,2.324]],["body/modules/UsersModule.html",[3,0.136,4,0.121,5,0.121,26,0.013,45,0.352,46,0.722,57,0.136,58,0.089,96,0.009,97,0.009,100,2.267,208,2.364,210,2.164,211,2.164,212,2.362,213,2.362,214,2.164,215,3.486,216,3.486,222,4.147,223,4.743,225,3.115,226,2.362,227,2.077,229,3.432,234,3.324,240,3.888,254,1.29,311,3.834,323,3.096,324,1.995,468,3.62,554,2.744,858,4.87,868,3.096,920,4.87,1448,4.87,1600,4.907,1617,3.992,1628,3.992,1629,4.572,1630,3.992,1631,3.992,1632,4.572,1633,4.572,1634,4.572,1635,5.266,1636,4.572,1637,3.992,1638,4.572,1639,4.572,1640,4.572]],["title/injectables/UsersService.html",[48,0.537,240,1.933]],["body/injectables/UsersService.html",[3,0.056,4,0.05,5,0.05,9,0.515,12,0.109,13,0.663,14,1.959,16,1.719,18,0.98,23,0.652,25,1.474,26,0.013,27,1.093,28,0.399,29,1.055,33,4.043,37,1.725,38,1.598,39,2.634,43,0.855,44,1.3,45,0.309,46,0.624,48,0.407,49,1.126,57,0.056,58,0.037,60,0.801,62,1.913,64,1.133,70,2.356,71,2.034,73,2.295,75,1.572,78,0.969,79,0.969,81,2.295,84,1.385,96,0.005,97,0.005,104,2.493,116,2.638,126,1.788,130,3.628,141,2.611,144,3.66,150,2.25,160,1.725,170,0.788,236,0.574,240,1.466,244,1.608,248,3.237,249,1.466,250,1.859,253,2.704,254,1.759,263,3.291,264,2.857,272,1.466,273,2.097,274,1.6,275,1.859,276,0.805,281,1.126,283,3.452,324,0.819,414,2.701,425,1.207,438,1.677,542,2.442,554,1.126,577,2.445,589,2.212,617,0.819,652,1.126,653,1.193,660,1.677,662,1.677,678,2.445,679,2.445,681,3.291,683,2.371,688,2.445,690,2.445,692,3.984,693,4.773,696,3.122,697,1.068,698,1.193,699,1.126,700,1.481,701,1.481,713,2.514,723,2.514,724,2.514,725,1.193,728,1.481,730,2.678,733,2.097,740,1.364,741,1.364,742,1.364,814,1.126,815,1.126,858,3.475,868,1.271,873,1.364,892,2.445,914,0.819,920,2.917,925,2.704,928,2.704,1018,2.097,1059,3.975,1073,3.975,1372,4.006,1376,2.445,1383,1.481,1418,3.475,1448,3.676,1450,2.704,1452,2.704,1635,2.704,1637,1.638,1641,1.638,1642,3.097,1643,3.097,1644,3.097,1645,1.876,1646,3.954,1647,3.954,1648,1.876,1649,1.876,1650,3.097,1651,1.876,1652,3.097,1653,1.876,1654,3.097,1655,1.876,1656,3.097,1657,1.876,1658,3.097,1659,1.876,1660,3.097,1661,1.876,1662,1.876,1663,3.097,1664,1.876,1665,1.876,1666,1.876,1667,1.876,1668,1.876,1669,3.954,1670,3.097,1671,1.876,1672,1.876,1673,1.876,1674,1.876,1675,1.876,1676,1.876,1677,3.097,1678,1.876,1679,1.876,1680,1.876]],["title/classes/VerifyEmailDto.html",[58,0.08,422,2.766]],["body/classes/VerifyEmailDto.html",[3,0.146,4,0.13,5,0.13,9,0.693,11,3.92,12,0.284,23,0.621,26,0.013,28,0.431,43,1.064,45,0.274,57,0.146,58,0.123,85,2.11,96,0.009,97,0.009,113,1.535,125,2.917,163,1.271,254,1.575,422,4.267,425,3.166,442,3.042,518,1.439,743,1.6,748,2.783,749,3.781,762,3.601,764,2.286,765,3.444,766,1.6,847,4.581,853,4.581,1243,4.269,1681,6.086,1682,4.269,1683,4.89,1684,4.89,1685,7.363,1686,4.89,1687,4.89,1688,6.301]],["title/coverage.html",[1689,4.413]],["body/coverage.html",[0,2.73,1,1.768,5,0.069,6,2.279,7,1.898,8,2.279,26,0.013,28,0.161,48,1.054,55,2.061,58,0.156,71,0.748,96,0.006,97,0.006,98,2.538,99,1.898,101,2.279,112,1.413,119,1.055,133,2.545,135,1.485,138,2.667,141,1.485,144,2.667,147,1.659,152,1.096,157,1.566,167,1.659,169,3.132,171,1.898,173,1.485,174,1.485,176,1.898,178,1.898,179,3.132,214,1.235,224,1.659,237,2.279,239,1.413,240,1.235,241,1.485,254,1.054,271,2.279,281,4.747,287,1.898,288,2.279,297,1.659,299,1.289,314,2.061,334,1.898,336,1.898,338,2.061,347,2.061,349,2.061,387,2.279,389,1.898,390,2.279,398,1.566,414,1.289,422,1.768,435,1.566,437,1.659,461,1.348,462,1.566,463,1.659,464,1.659,467,1.898,471,1.898,480,2.279,517,2.279,526,2.061,554,1.566,560,2.279,584,3,585,2.279,628,1.898,629,2.279,633,1.659,641,1.898,677,2.279,681,1.485,699,1.566,744,2.279,745,3.183,770,3.183,813,3.183,858,1.659,859,2.279,860,3.183,863,1.566,871,2.061,899,2.279,900,2.279,914,2.763,915,1.898,917,2.279,918,3.183,920,1.659,921,2.279,922,2.279,932,2.061,933,2.279,948,1.768,971,1.898,972,3.756,983,1.348,984,1.485,988,3.582,991,1.898,992,3.582,1005,1.659,1006,1.898,1008,1.898,1010,2.061,1015,2.279,1016,2.279,1021,1.768,1032,2.279,1033,2.279,1069,2.279,1070,3.183,1073,1.898,1074,2.279,1075,2.279,1076,2.279,1080,2.279,1081,2.279,1083,2.279,1106,2.061,1107,2.279,1108,2.279,1122,1.898,1123,2.279,1150,2.279,1224,2.061,1225,2.279,1241,2.279,1247,2.279,1260,1.898,1261,2.279,1276,1.659,1307,2.279,1326,2.279,1354,2.279,1367,2.279,1418,1.659,1419,2.279,1426,2.061,1427,2.279,1432,2.061,1433,2.279,1446,1.898,1447,2.279,1448,1.659,1449,2.279,1462,1.566,1463,2.279,1481,1.768,1482,2.279,1483,2.279,1484,1.659,1485,2.279,1486,2.279,1520,1.898,1521,2.279,1534,1.659,1554,2.279,1574,2.279,1579,2.279,1600,1.898,1601,2.279,1641,2.279,1681,2.279,1682,2.279,1689,2.061,1690,2.61,1691,2.61,1692,2.61,1693,4.926,1694,4.926,1695,5.541,1696,2.61,1697,6.331,1698,6.331,1699,4.926,1700,6.6,1701,6.331,1702,2.61,1703,2.61,1704,3.52,1705,2.279,1706,2.279,1707,2.279,1708,8.257,1709,7.273,1710,2.279,1711,4.926,1712,6.996,1713,4.032,1714,4.032,1715,4.032,1716,4.926,1717,4.032,1718,4.032,1719,4.032,1720,4.032,1721,4.926,1722,2.61,1723,2.61,1724,2.61,1725,5.541,1726,4.926,1727,4.032,1728,2.279,1729,3.52,1730,4.301,1731,2.279,1732,2.279,1733,4.032,1734,2.61,1735,2.61,1736,2.279,1737,2.61,1738,2.61,1739,2.61,1740,2.61,1741,2.279,1742,2.61]],["title/dependencies.html",[211,2.327,1743,2.971]],["body/dependencies.html",[26,0.013,46,0.827,50,2.381,51,3.332,52,3.811,58,0.129,96,0.01,97,0.01,163,1.363,211,2.481,299,2.589,321,3.811,324,2.288,572,4.577,617,2.288,766,1.715,909,4.577,1004,3.811,1018,3.55,1044,4.577,1232,4.577,1234,4.577,1235,4.577,1280,4.139,1281,4.139,1320,4.577,1327,4.577,1332,4.577,1488,4.139,1498,4.577,1501,4.577,1532,4.577,1569,4.577,1744,5.242,1745,5.242,1746,5.242,1747,7.554,1748,5.242,1749,5.242,1750,5.242,1751,5.242,1752,5.242,1753,5.242,1754,5.242,1755,5.242,1756,5.242,1757,5.242,1758,5.242,1759,5.242,1760,5.242,1761,5.242,1762,5.242,1763,5.242,1764,5.242,1765,5.242,1766,5.242,1767,5.242,1768,5.242,1769,5.242,1770,5.242,1771,5.242,1772,5.242,1773,5.242]],["title/miscellaneous/enumerations.html",[1774,2.163,1775,4.292]],["body/miscellaneous/enumerations.html",[12,0.294,26,0.013,96,0.01,97,0.01,103,4.361,254,1.378,301,3.665,527,3.679,609,4.361,702,3.865,775,4.094,786,5.084,806,5.623,808,5.623,843,4.361,1082,3.995,1178,6.181,1415,5.623,1475,4.682,1542,4.418,1774,3.217,1775,4.418,1776,5.06,1777,6.44,1778,5.06,1779,5.06,1780,6.44,1781,5.06,1782,5.06,1783,5.06,1784,6.44,1785,5.06,1786,5.06,1787,6.44,1788,6.44,1789,6.44,1790,5.06,1791,5.06,1792,6.44,1793,6.44,1794,6.44,1795,6.44,1796,6.44,1797,5.06,1798,6.44,1799,6.44,1800,6.44]],["title/miscellaneous/functions.html",[1774,2.163,1801,4.292]],["body/miscellaneous/functions.html",[12,0.324,25,1.565,26,0.012,27,1.16,28,0.424,29,1.121,38,1.467,40,4.358,43,1.101,96,0.01,97,0.01,173,3.901,174,3.182,214,3.657,276,1.782,305,4.014,315,4.881,316,4.881,542,2.179,836,3.386,915,4.065,919,5.985,942,4.642,1357,4.984,1446,4.065,1728,4.881,1729,6.747,1730,4.881,1731,5.985,1736,4.881,1774,3.554,1801,4.881,1802,5.591,1803,5.591,1804,5.591,1805,5.591,1806,5.591]],["title/index.html",[12,0.197,249,1.61,1807,3.402]],["body/index.html",[4,0.137,9,0.488,26,0.013,90,4.522,96,0.01,97,0.01,125,2.598,546,4.522,586,3.766,683,2.676,997,4.089,1284,4.522,1689,4.089,1808,5.18,1809,5.18,1810,6.536,1811,5.18,1812,5.18,1813,5.18,1814,5.18,1815,5.18,1816,5.18,1817,7.162,1818,5.18,1819,5.18,1820,8.041,1821,5.18,1822,5.18,1823,5.18,1824,7.919,1825,5.18,1826,6.536,1827,5.18,1828,4.522,1829,5.18,1830,5.18,1831,6.536,1832,5.707,1833,5.18,1834,5.18,1835,5.18,1836,6.536,1837,6.536,1838,5.18,1839,5.18,1840,5.18,1841,5.18,1842,5.18,1843,4.522,1844,5.18,1845,5.18,1846,5.18,1847,5.18,1848,5.18,1849,5.18,1850,5.18,1851,5.18,1852,5.18,1853,5.18,1854,5.18,1855,5.18,1856,5.18,1857,5.18,1858,4.522]],["title/modules.html",[210,2.645]],["body/modules.html",[26,0.01,96,0.01,97,0.01,209,3.969,210,2.774,220,3.726,221,3.518,222,3.174,223,3.335,307,4.262,311,3.726,312,3.969,313,3.969,1843,7.317,1859,8.38,1860,8.38,1861,8.38]],["title/overview.html",[1862,4.88]],["body/overview.html",[2,2.778,26,0.013,96,0.007,97,0.007,100,1.323,167,3.739,208,1.233,209,5.447,210,1.665,211,1.665,212,1.818,213,1.818,214,1.665,215,1.818,216,1.818,217,3.072,218,3.072,219,3.072,220,5.042,221,4.615,222,4.163,223,4.603,224,3.739,225,2.602,226,1.818,227,1.598,236,1.077,239,3.941,240,3.445,241,4.142,297,3.739,307,5.985,308,3.072,309,3.072,310,3.072,311,5.042,312,5.132,313,4.929,376,2.112,435,4.368,458,3.072,459,3.072,460,3.072,461,3.317,462,3.53,463,3.739,464,3.739,669,3.072,670,3.072,672,3.072,681,4.142,743,1.151,858,3.739,863,4.368,916,2.112,920,3.739,1143,3.072,1145,3.072,1146,3.072,1273,3.072,1274,3.072,1275,3.072,1276,4.627,1362,3.072,1363,3.072,1364,3.072,1448,3.739,1484,3.739,1534,3.739,1546,3.072,1547,3.072,1628,3.072,1630,3.072,1631,3.072,1862,3.072,1863,5.036,1864,3.519,1865,3.519,1866,3.519,1867,3.519,1868,3.519]],["title/properties.html",[518,1.123,1743,2.971]],["body/properties.html",[9,0.609,26,0.012,96,0.011,97,0.011,518,1.477,586,4.703,1338,5.648,1858,5.648,1869,6.469,1870,6.469]],["title/miscellaneous/variables.html",[359,3.574,1774,2.163]],["body/miscellaneous/variables.html",[12,0.249,26,0.013,28,0.432,31,3.122,37,1.874,43,0.789,44,1.803,55,4.566,64,2.005,80,3.749,84,0.949,96,0.009,97,0.009,254,1.497,281,2.577,299,3.23,301,3.291,314,3.39,347,4.566,349,4.566,350,3.749,352,3.749,359,4.205,365,3.39,442,1.874,526,4.566,532,5.049,541,4.615,622,3.122,834,3.39,836,2.121,871,4.566,948,2.908,1092,3.122,1169,4.566,1178,5.59,1350,3.749,1704,3.749,1705,3.749,1706,5.049,1707,5.049,1710,3.749,1732,3.749,1741,3.749,1774,2.73,1828,3.749,1832,3.749,1871,4.294,1872,4.294,1873,5.783,1874,4.294,1875,4.294,1876,4.294,1877,4.294,1878,4.294,1879,4.294,1880,4.294,1881,4.294,1882,4.294,1883,5.783,1884,4.294,1885,4.294,1886,4.294,1887,4.294,1888,4.294,1889,4.294,1890,4.294,1891,4.294,1892,4.294,1893,4.294,1894,4.294,1895,4.294,1896,4.294,1897,8.387,1898,4.294,1899,4.294,1900,4.294,1901,4.294,1902,4.294,1903,4.294,1904,4.294,1905,4.294,1906,4.294,1907,4.294,1908,4.294,1909,4.294,1910,4.294,1911,4.294,1912,4.294,1913,4.294,1914,4.294,1915,4.294,1916,4.294,1917,4.294,1918,4.294,1919,4.294,1920,4.294,1921,4.294,1922,4.294,1923,4.294,1924,4.294,1925,4.294]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":281,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"injectables/ClaimsService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1869,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1758,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1771,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1773,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1757,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1701,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1699,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1725,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1727,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1718,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1737,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1719,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":767,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{}}}],["01'})@isdate()@isnotempty",{"_index":756,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{}}}],["08012345678",{"_index":854,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["08012345678'})@isstring()@isnotempty",{"_index":841,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["09",{"_index":755,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{}}}],["1",{"_index":661,"title":{},"body":{"controllers/ClaimsController.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/ItemsController.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["1.0.0",{"_index":1766,"title":{},"body":{"dependencies.html":{}}}],["1.1.25",{"_index":1745,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1709,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1722,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1698,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1735,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1703,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":663,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1747,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1754,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1752,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1749,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1708,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":1096,"title":{},"body":{"entities/Item.html":{},"entities/Upload.html":{}}}],["11/12",{"_index":1740,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":780,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["128",{"_index":1470,"title":{},"body":{"entities/Upload.html":{}}}],["16",{"_index":1702,"title":{},"body":{"coverage.html":{}}}],["17.13.3",{"_index":1762,"title":{},"body":{"dependencies.html":{}}}],["1})@isstring()@isnotempty",{"_index":1422,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["1})@isstring()@isoptional",{"_index":989,"title":{},"body":{"classes/GetClaimsParamDto.html":{}}}],["2",{"_index":1867,"title":{},"body":{"overview.html":{}}}],["2.0.2",{"_index":1746,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":1751,"title":{},"body":{"dependencies.html":{}}}],["2.1687.0",{"_index":1755,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1712,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1715,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1717,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":129,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":118,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["2021",{"_index":754,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{}}}],["21",{"_index":1866,"title":{},"body":{"overview.html":{}}}],["23",{"_index":1865,"title":{},"body":{"overview.html":{}}}],["24735rebufiwt",{"_index":1688,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["24735rebufiwt'})@isnotempty()@isstring",{"_index":1686,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["25",{"_index":1734,"title":{},"body":{"coverage.html":{}}}],["3.1.10",{"_index":1759,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1748,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1711,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1721,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1724,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1697,"title":{},"body":{"coverage.html":{}}}],["3fj3",{"_index":1425,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["4",{"_index":1864,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":1726,"title":{},"body":{"coverage.html":{}}}],["5.1.1",{"_index":1756,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1733,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1716,"title":{},"body":{"coverage.html":{}}}],["5000",{"_index":1297,"title":{},"body":{"modules/MailModule.html":{}}}],["6",{"_index":1868,"title":{},"body":{"overview.html":{}}}],["6.0.6",{"_index":1763,"title":{},"body":{"dependencies.html":{}}}],["6.9.15",{"_index":1765,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1713,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1694,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":1696,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1723,"title":{},"body":{"coverage.html":{}}}],["6287072",{"_index":1346,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["66",{"_index":1714,"title":{},"body":{"coverage.html":{}}}],["7.4.0",{"_index":1753,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1772,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1738,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1695,"title":{},"body":{"coverage.html":{}}}],["7654f3",{"_index":1610,"title":{},"body":{"controllers/UsersController.html":{}}}],["8.12.0",{"_index":1768,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1720,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1693,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1863,"title":{},"body":{"overview.html":{}}}],["9.14.0",{"_index":1760,"title":{},"body":{"dependencies.html":{}}}],["91",{"_index":1739,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":1093,"title":{},"body":{"entities/Item.html":{},"entities/User.html":{}}}],["_",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["__dirname",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["ab123",{"_index":758,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz1234567890",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":1077,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accepted",{"_index":1789,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acces",{"_index":550,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["access",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/LoginProvider.html":{}}}],["accesstoken",{"_index":547,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["active",{"_index":1882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activeuser",{"_index":1707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":1303,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":1103,"title":{},"body":{"entities/Item.html":{},"injectables/ItemsService.html":{}}}],["additional",{"_index":1104,"title":{},"body":{"entities/Item.html":{}}}],["address",{"_index":1342,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["admin",{"_index":103,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginProvider.html":{},"miscellaneous/enumerations.html":{}}}],["admin'})@apiresponse({status",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin.controller",{"_index":230,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin/admin.module",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["admin/analytics",{"_index":184,"title":{},"body":{"controllers/AdminController.html":{}}}],["admin/claims",{"_index":201,"title":{},"body":{"controllers/AdminController.html":{}}}],["admin/create",{"_index":190,"title":{},"body":{"controllers/AdminController.html":{}}}],["admin/update",{"_index":194,"title":{},"body":{"controllers/AdminController.html":{}}}],["admin/users",{"_index":197,"title":{},"body":{"controllers/AdminController.html":{}}}],["admincontroller",{"_index":99,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminlogin",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["adminlogin(logindto",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["adminmodule",{"_index":209,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminservice",{"_index":167,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["allow",{"_index":1186,"title":{},"body":{"injectables/ItemsService.html":{}}}],["already",{"_index":883,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["amazing",{"_index":1844,"title":{},"body":{"index.html":{}}}],["analytics",{"_index":130,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/ClaimsService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["analytics'})@apiresponse({status",{"_index":128,"title":{},"body":{"controllers/AdminController.html":{}}}],["analytics.provider",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["analytics.provider.ts",{"_index":1108,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{},"coverage.html":{}}}],["analytics.provider.ts:12",{"_index":1110,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["analytics.provider.ts:20",{"_index":1112,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["analyticsprovider",{"_index":224,"title":{"injectables/AnalyticsProvider.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"coverage.html":{},"overview.html":{}}}],["another",{"_index":888,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["api",{"_index":295,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["api_version",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":164,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apiheaders",{"_index":1533,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apioperation",{"_index":165,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":650,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":762,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["apiproperty({description",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({required",{"_index":1684,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["apiproperty({type",{"_index":748,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/VerifyEmailDto.html":{}}}],["apipropertyoptional",{"_index":846,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":824,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":651,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":166,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":162,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/MailController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":181,"title":{},"body":{"controllers/AdminController.html":{}}}],["apitags('auth",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthController.html":{}}}],["apitags('claims",{"_index":657,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["apitags('items",{"_index":1137,"title":{},"body":{"controllers/ItemsController.html":{}}}],["apitags('mail",{"_index":1270,"title":{},"body":{"controllers/MailController.html":{}}}],["apitags('uploads",{"_index":1537,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apitags('users",{"_index":1620,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":912,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["app",{"_index":1822,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":298,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":287,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appended",{"_index":1322,"title":{},"body":{"injectables/MailService.html":{}}}],["application",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["application/pdf",{"_index":1567,"title":{},"body":{"injectables/UploadsService.html":{}}}],["applications",{"_index":1816,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":307,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":297,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archived",{"_index":1798,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["array",{"_index":1024,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["asaae4223e",{"_index":1428,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["associate",{"_index":717,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["async",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["atomicity",{"_index":710,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["audience",{"_index":953,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["auth",{"_index":299,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":304,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthController.html":{},"controllers/MailController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":469,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.controller.ts",{"_index":1016,"title":{},"body":{"controllers/GoogleAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:34",{"_index":1023,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["auth.service",{"_index":479,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthController.html":{}}}],["auth.service.ts",{"_index":1033,"title":{},"body":{"injectables/GoogleAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:17",{"_index":1038,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["auth.service.ts:32",{"_index":1040,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["auth.service.ts:43",{"_index":1039,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["auth/auth.module",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/auth.decorator",{"_index":300,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/enums/auth",{"_index":302,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/google",{"_index":1017,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["auth/guards/access",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":526,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":389,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1019,"title":{},"body":{"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{}}}],["authenticate(@body",{"_index":1030,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["authenticate(googletokendto",{"_index":1020,"title":{},"body":{"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{}}}],["authentication",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{}}}],["authenticationguard",{"_index":334,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":536,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authenticted",{"_index":1022,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["authmodule",{"_index":311,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":586,"title":{},"body":{"entities/Claim.html":{},"injectables/ClaimsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":595,"title":{},"body":{"entities/Claim.html":{},"classes/CreateClaimDto.html":{}}}],["authorised",{"_index":555,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GoogleAuthService.html":{}}}],["authorization",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UploadsController.html":{}}}],["authorized",{"_index":1259,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["authorname",{"_index":974,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{}}}],["authservice",{"_index":435,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":301,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthController.html":{},"controllers/MailController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":528,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":531,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":519,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":532,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((authtype",{"_index":538,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1323,"title":{},"body":{"injectables/MailService.html":{}}}],["available",{"_index":1324,"title":{},"body":{"injectables/MailService.html":{}}}],["await",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1488,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["aws.provider",{"_index":1552,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["aws.provider.ts",{"_index":1486,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:12",{"_index":1491,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:19",{"_index":1494,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:43",{"_index":1496,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws_access_key_id",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aws_cloudfront_url",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aws_public_bucket_name",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aws_region",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aws_secret_access_key",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backers",{"_index":1845,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":725,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('mime",{"_index":1571,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('user",{"_index":886,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["base",{"_index":973,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["baseurl",{"_index":1387,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":572,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":582,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(10",{"_index":575,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":579,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":471,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1542,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["between",{"_index":1161,"title":{},"body":{"injectables/ItemsService.html":{}}}],["between(from",{"_index":1199,"title":{},"body":{"injectables/ItemsService.html":{}}}],["body",{"_index":159,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/MailController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UsersController.html":{}}}],["books",{"_index":1794,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/LoginProvider.html":{},"interfaces/Paginated.html":{},"interfaces/SuccessResponse.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":214,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1861,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1859,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1503,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["buffer",{"_index":567,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1811,"title":{},"body":{"index.html":{}}}],["cache",{"_index":1306,"title":{},"body":{"modules/MailModule.html":{}}}],["callhandler",{"_index":905,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":606,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{}}}],["cascade'})@joincolumn",{"_index":1087,"title":{},"body":{"entities/Item.html":{}}}],["catch",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["catch((e",{"_index":558,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["category",{"_index":771,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{}}}],["cd456",{"_index":759,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["character",{"_index":838,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["characters",{"_index":834,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"miscellaneous/variables.html":{}}}],["characters.length",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["characterslength",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{}}}],["claim",{"_index":152,"title":{"entities/Claim.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{},"classes/PatchClaimDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["claim')@apioperation({summary",{"_index":149,"title":{},"body":{"controllers/AdminController.html":{}}}],["claim'})@apiresponse({status",{"_index":151,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{}}}],["claim.dto",{"_index":172,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/PatchClaimDto.html":{}}}],["claim.dto.ts",{"_index":745,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/PatchClaimDto.html":{},"coverage.html":{}}}],["claim.dto.ts:21",{"_index":757,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["claim.dto.ts:25",{"_index":1411,"title":{},"body":{"classes/PatchClaimDto.html":{}}}],["claim.dto.ts:36",{"_index":761,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["claim.dto.ts:40",{"_index":1413,"title":{},"body":{"classes/PatchClaimDto.html":{}}}],["claim.dto.ts:51",{"_index":753,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["claim.entity",{"_index":674,"title":{},"body":{"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{}}}],["claim.item",{"_index":1085,"title":{},"body":{"entities/Item.html":{}}}],["claim.status",{"_index":735,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["claimed",{"_index":1799,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["claimrepository",{"_index":682,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["claims",{"_index":138,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["claims'})@apiresponse({status",{"_index":137,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{}}}],["claims.author",{"_index":1599,"title":{},"body":{"entities/User.html":{}}}],["claims.author)@joincolumn",{"_index":1581,"title":{},"body":{"entities/User.html":{}}}],["claims.controller",{"_index":675,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["claims/1",{"_index":665,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["claims/claims.module",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["claimscontroller",{"_index":628,"title":{"controllers/ClaimsController.html":{}},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"coverage.html":{}}}],["claimsmodule",{"_index":220,"title":{"modules/ClaimsModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimsservice",{"_index":241,"title":{"injectables/ClaimsService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimstatus",{"_index":609,"title":{},"body":{"entities/Claim.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/PatchClaimDto.html":{},"miscellaneous/enumerations.html":{}}}],["claimstatus.submitted",{"_index":623,"title":{},"body":{"entities/Claim.html":{}}}],["class",{"_index":58,"title":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LoginDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":743,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LoginDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1616,"title":{},"body":{"controllers/UsersController.html":{}}}],["client",{"_index":1046,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["clientid",{"_index":1047,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["clientsecret",{"_index":1049,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["clothing",{"_index":1792,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cluster_adminmodule",{"_index":217,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":218,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":219,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_claimsmodule",{"_index":669,"title":{},"body":{"modules/ClaimsModule.html":{},"overview.html":{}}}],["cluster_claimsmodule_exports",{"_index":672,"title":{},"body":{"modules/ClaimsModule.html":{},"overview.html":{}}}],["cluster_claimsmodule_imports",{"_index":671,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["cluster_claimsmodule_providers",{"_index":670,"title":{},"body":{"modules/ClaimsModule.html":{},"overview.html":{}}}],["cluster_itemsmodule",{"_index":1143,"title":{},"body":{"modules/ItemsModule.html":{},"overview.html":{}}}],["cluster_itemsmodule_exports",{"_index":1146,"title":{},"body":{"modules/ItemsModule.html":{},"overview.html":{}}}],["cluster_itemsmodule_imports",{"_index":1144,"title":{},"body":{"modules/ItemsModule.html":{}}}],["cluster_itemsmodule_providers",{"_index":1145,"title":{},"body":{"modules/ItemsModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":1273,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1274,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1275,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1362,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1363,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1364,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":1546,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":1547,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1628,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1631,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1629,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1630,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":614,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["column({type",{"_index":600,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["common/interceptors/data",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":581,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/LoginProvider.html":{}}}],["comparepassword",{"_index":564,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":566,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1744,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":1289,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.mailhost",{"_index":1291,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.mailjetapikey",{"_index":1294,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.mailjetsecretkey",{"_index":1295,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.mailport",{"_index":1292,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":470,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["configmodule",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ItemsModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ItemsModule.html":{}}}],["configmodule.forroot",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":375,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{}}}],["configuration",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":1435,"title":{},"body":{"classes/RegisterDto.html":{}}}],["confirmpassword",{"_index":1434,"title":{},"body":{"classes/RegisterDto.html":{}}}],["conflictexception",{"_index":1376,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["conflictexception('failed",{"_index":1680,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception(error",{"_index":1383,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["connect",{"_index":875,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{}}}],["connection",{"_index":724,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["console.error('error",{"_index":1352,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["console.error('items",{"_index":1120,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["const",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["constructor(analyticsprovider",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{}}}],["constructor(authservice",{"_index":1227,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(claimsservice",{"_index":277,"title":{},"body":{"injectables/AnalyticsProvider.html":{}}}],["constructor(configservice",{"_index":902,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["constructor(createuserprovider",{"_index":1645,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(generatetokensprovider",{"_index":1037,"title":{},"body":{"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{}}}],["constructor(hashingprovider",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UpdateUserProvider.html":{}}}],["constructor(itemsrepository",{"_index":1109,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["constructor(itemsservice",{"_index":680,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["constructor(jwtservice",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["constructor(mailerservice",{"_index":1311,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(mailservice",{"_index":862,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["constructor(paginationprovider",{"_index":1151,"title":{},"body":{"injectables/ItemsService.html":{}}}],["constructor(private",{"_index":182,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/ItemsController.html":{},"injectables/LocalStrategy.html":{},"controllers/MailController.html":{},"injectables/MailjetProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":522,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(uploadtoawsprovider",{"_index":1555,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(userrepository",{"_index":926,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["content",{"_index":1540,"title":{},"body":{"controllers/UploadsController.html":{}}}],["contenttype",{"_index":1507,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{}}}],["context.getclass",{"_index":535,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":534,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.name",{"_index":1344,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["context.switchtohttp().getrequest",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["context.token",{"_index":1349,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["controller",{"_index":98,"title":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/MailController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/MailController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":180,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('auth",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":1028,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["controller('claims",{"_index":656,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["controller('items",{"_index":1136,"title":{},"body":{"controllers/ItemsController.html":{}}}],["controller('mail",{"_index":1269,"title":{},"body":{"controllers/MailController.html":{}}}],["controller('uploads",{"_index":1536,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controller('users",{"_index":1618,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":100,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":742,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["coverage",{"_index":1689,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":116,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(createclaimdto",{"_index":686,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["create(createitemdto",{"_index":1154,"title":{},"body":{"injectables/ItemsService.html":{}}}],["create(createuserdto",{"_index":1650,"title":{},"body":{"injectables/UsersService.html":{}}}],["createclaim",{"_index":630,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["createclaim(@body",{"_index":658,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["createclaim(createclaimdto",{"_index":632,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["createclaimdto",{"_index":633,"title":{"classes/CreateClaimDto.html":{}},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/PatchClaimDto.html":{},"coverage.html":{}}}],["createclaimdto.datelost",{"_index":715,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["created",{"_index":120,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["createdat",{"_index":587,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["createdate",{"_index":1464,"title":{},"body":{"entities/Upload.html":{}}}],["createdatecolumn",{"_index":598,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["createerrorresponse",{"_index":1731,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createerrorresponse(error",{"_index":1805,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creategoogleuser",{"_index":1642,"title":{},"body":{"injectables/UsersService.html":{}}}],["creategoogleuser(googleuser",{"_index":1652,"title":{},"body":{"injectables/UsersService.html":{}}}],["createitem",{"_index":105,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ItemsController.html":{}}}],["createitem(@body",{"_index":191,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ItemsController.html":{}}}],["createitem(createitemdto",{"_index":111,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ItemsController.html":{}}}],["createitemdto",{"_index":112,"title":{"classes/CreateItemDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/ClaimsService.html":{},"classes/CreateItemDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createsuccessresponse",{"_index":173,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsuccessresponse('admin",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{}}}],["createsuccessresponse('analytics",{"_index":189,"title":{},"body":{"controllers/AdminController.html":{}}}],["createsuccessresponse('claim",{"_index":207,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{}}}],["createsuccessresponse('file",{"_index":1545,"title":{},"body":{"controllers/UploadsController.html":{}}}],["createsuccessresponse('item",{"_index":193,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ItemsController.html":{}}}],["createsuccessresponse('user",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["createsuccessresponse(message",{"_index":1806,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createuser",{"_index":861,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":1621,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":866,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["createuserdto",{"_index":414,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":878,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":858,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":747,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{}}}],["creation",{"_index":635,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["credentials",{"_index":1240,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["ctx",{"_index":1879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":351,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":276,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"controllers/UploadsController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["database",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["database_host",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_name",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_password",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_port",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_user",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":336,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":597,"title":{},"body":{"entities/Claim.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["date().gettime().tostring().trim",{"_index":1517,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["datefound",{"_index":772,"title":{},"body":{"classes/CreateItemDto.html":{},"entities/Item.html":{}}}],["datelost",{"_index":588,"title":{},"body":{"entities/Claim.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{}}}],["db",{"_index":876,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{}}}],["dealing",{"_index":273,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"injectables/ClaimsService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":213,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":540,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["declined",{"_index":1415,"title":{},"body":{"classes/PatchClaimDto.html":{},"miscellaneous/enumerations.html":{}}}],["declined'})@isenum(claimstatus)@isnotempty",{"_index":1412,"title":{},"body":{"classes/PatchClaimDto.html":{}}}],["decorator",{"_index":1883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":113,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthController.html":{},"classes/GoogleTokenDto.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"entities/Upload.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{}}}],["decorators/auth.decorator",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthController.html":{}}}],["default",{"_index":541,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"entities/Item.html":{},"classes/PaginationQueryDto.html":{},"entities/Upload.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":521,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaults",{"_index":1298,"title":{},"body":{"modules/MailModule.html":{}}}],["define",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["delete",{"_index":1608,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":1626,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1607,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1609,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser",{"_index":1602,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(@param('id",{"_index":1627,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":1606,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":211,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["describing",{"_index":1612,"title":{},"body":{"controllers/UsersController.html":{}}}],["description",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ClaimsController.html":{},"injectables/CreateUserProvider.html":{},"controllers/ItemsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{}}}],["details'})@httpcode(httpstatus.ok",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["development",{"_index":1823,"title":{},"body":{"index.html":{}}}],["dfej45",{"_index":1424,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["dir",{"_index":1300,"title":{},"body":{"modules/MailModule.html":{}}}],["disable",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["documentation",{"_index":1690,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":852,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":1440,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":826,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dto",{"_index":637,"title":{},"body":{"controllers/ClaimsController.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/ItemsController.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/UsersController.html":{}}}],["dtos/create",{"_index":652,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":653,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/google",{"_index":1025,"title":{},"body":{"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{}}}],["dtos/login.dto",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{}}}],["dtos/pagination",{"_index":1378,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":698,"title":{},"body":{"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/verify",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e",{"_index":559,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["e2e",{"_index":1833,"title":{},"body":{"index.html":{}}}],["eager",{"_index":593,"title":{},"body":{"entities/Claim.html":{}}}],["ef456",{"_index":750,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["ef789",{"_index":768,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["ef789'})@isnotempty()@isstring",{"_index":760,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["efficient",{"_index":1812,"title":{},"body":{"index.html":{}}}],["eight",{"_index":833,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["ejs",{"_index":1320,"title":{},"body":{"injectables/MailService.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":1282,"title":{},"body":{"modules/MailModule.html":{}}}],["electronics",{"_index":806,"title":{},"body":{"classes/CreateItemDto.html":{},"miscellaneous/enumerations.html":{}}}],["electronics'})@isenum(itemcategory)@isnotempty",{"_index":776,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["email",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"interfaces/GoogleUser.html":{},"interfaces/IActiveUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["email'})@apiresponse({status",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["email.dto",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["email.dto.ts",{"_index":1682,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:18",{"_index":1683,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["email.dto.ts:31",{"_index":1687,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["email.provider",{"_index":1637,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":922,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:12",{"_index":927,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:28",{"_index":929,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["emails",{"_index":1309,"title":{},"body":{"injectables/MailService.html":{}}}],["empty",{"_index":1173,"title":{},"body":{"injectables/ItemsService.html":{}}}],["encrypted",{"_index":568,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["end",{"_index":1003,"title":{},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["ensure",{"_index":709,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["ensures",{"_index":624,"title":{},"body":{"entities/Claim.html":{}}}],["entities",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"entities/Claim.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"entities/Upload.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":584,"title":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{},"coverage.html":{}}}],["entitymanager",{"_index":712,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["entitymanager.save(item",{"_index":721,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["entitymanager.save(newclaim",{"_index":716,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["entitymanager.save(user",{"_index":722,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["entity{.ts,.js",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["entries",{"_index":1193,"title":{},"body":{"injectables/ItemsService.html":{}}}],["enum",{"_index":610,"title":{},"body":{"entities/Claim.html":{},"classes/CreateItemDto.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{},"classes/PatchClaimDto.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1775,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthController.html":{}}}],["enums/claimstatus.enum",{"_index":620,"title":{},"body":{"entities/Claim.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/PatchClaimDto.html":{}}}],["enums/file",{"_index":1478,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["enums/itemcategory.enum",{"_index":801,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{}}}],["enums/itemstatus.enum",{"_index":802,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{}}}],["enums/user",{"_index":849,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["env",{"_index":349,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["environmentschema",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["equals",{"_index":1444,"title":{},"body":{"classes/RegisterDto.html":{}}}],["equals('password",{"_index":1445,"title":{},"body":{"classes/RegisterDto.html":{}}}],["error",{"_index":542,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["error('failed",{"_index":1353,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["errorresponse",{"_index":915,"title":{"interfaces/ErrorResponse.html":{}},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["eslint/no",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["even",{"_index":553,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["example",{"_index":125,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{},"index.html":{}}}],["exception",{"_index":879,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthService.html":{}}}],["exclude",{"_index":1597,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":733,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["existinguser",{"_index":874,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":884,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["expiresin",{"_index":941,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["exports",{"_index":216,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1493,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["extends",{"_index":987,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/LocalStrategy.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{}}}],["extension",{"_index":1321,"title":{},"body":{"injectables/MailService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["extractrequestfromheader",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":1252,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["fails",{"_index":1121,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["false",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"classes/CreateItemDto.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"modules/MailModule.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":1061,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["featured",{"_index":785,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["fetch",{"_index":741,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["fetched",{"_index":131,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["fgffg5",{"_index":1011,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["field",{"_index":1169,"title":{},"body":{"injectables/ItemsService.html":{},"controllers/UploadsController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1505,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.interface",{"_index":1560,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.interface.ts",{"_index":1483,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["file.mimetype",{"_index":1508,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["file.originalname.split('.')[0",{"_index":1510,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":1576,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fileinterceptor",{"_index":1531,"title":{},"body":{"controllers/UploadsController.html":{}}}],["filename",{"_index":1518,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["files",{"_index":1487,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["filetypes",{"_index":1475,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":1480,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["fileupload",{"_index":1489,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload(file",{"_index":1492,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["filter",{"_index":1172,"title":{},"body":{"injectables/ItemsService.html":{}}}],["filtered",{"_index":1192,"title":{},"body":{"injectables/ItemsService.html":{}}}],["filteredqueries",{"_index":1176,"title":{},"body":{"injectables/ItemsService.html":{}}}],["filtering",{"_index":1195,"title":{},"body":{"injectables/ItemsService.html":{}}}],["filters",{"_index":726,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{}}}],["filters.datefound",{"_index":1198,"title":{},"body":{"injectables/ItemsService.html":{}}}],["final",{"_index":986,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["find",{"_index":692,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":678,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":688,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["finding",{"_index":924,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["findoneby",{"_index":1643,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneby(operator",{"_index":1656,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":925,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":928,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemailprovider",{"_index":1646,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebygoogleid",{"_index":1644,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebygoogleid(googleid",{"_index":1660,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":679,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":690,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["findoneuserbyemailprovider",{"_index":920,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findoperator",{"_index":1160,"title":{},"body":{"injectables/ItemsService.html":{}}}],["findoptionswhere",{"_index":1372,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["finds",{"_index":930,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["fired",{"_index":548,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"interfaces/GoogleUser.html":{},"interfaces/IActiveUser.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["foreign",{"_index":626,"title":{},"body":{"entities/Claim.html":{}}}],["format",{"_index":749,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/VerifyEmailDto.html":{}}}],["forwardref",{"_index":468,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{},"injectables/UpdateUserProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":294,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateItemDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{}}}],["framework",{"_index":1810,"title":{},"body":{"index.html":{}}}],["function",{"_index":1730,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1801,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furniture",{"_index":1793,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["generate",{"_index":573,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["generated",{"_index":1685,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["generatefilename",{"_index":1490,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(file",{"_index":1495,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetokens",{"_index":935,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":938,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":462,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generateverifytoken",{"_index":871,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generateverifytoken(32",{"_index":891,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["get(':id",{"_index":666,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["get(':id')@apioperation({summary",{"_index":642,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["get('analytics",{"_index":185,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('analytics')@apioperation({summary",{"_index":127,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('claims",{"_index":202,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('claims')@apioperation({summary",{"_index":136,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('users",{"_index":198,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('users')@apioperation({summary",{"_index":142,"title":{},"body":{"controllers/AdminController.html":{}}}],["get()@apioperation({summary",{"_index":647,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["get()@auth(authtype.none)@apioperation({summary",{"_index":290,"title":{},"body":{"controllers/AppController.html":{}}}],["getanalytics",{"_index":106,"title":{},"body":{"controllers/AdminController.html":{}}}],["getclaim",{"_index":631,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["getclaim(@param",{"_index":667,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["getclaim(getclaimsquerydto",{"_index":640,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["getclaims",{"_index":107,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ClaimsController.html":{}}}],["getclaims(@query",{"_index":203,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{}}}],["getclaims(getclaimsquerydto",{"_index":134,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{}}}],["getclaims(query",{"_index":246,"title":{},"body":{"injectables/AdminService.html":{}}}],["getclaimsbasedto",{"_index":971,"title":{"classes/GetClaimsBaseDto.html":{}},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"coverage.html":{}}}],["getclaimsparamdto",{"_index":641,"title":{"classes/GetClaimsParamDto.html":{}},"body":{"controllers/ClaimsController.html":{},"classes/GetClaimsParamDto.html":{},"coverage.html":{}}}],["getclaimsquerydto",{"_index":135,"title":{"classes/GetClaimsQueryDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"coverage.html":{}}}],["gethello",{"_index":289,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getitem",{"_index":1124,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitem(@param",{"_index":1141,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitem(getitemsparamsdto",{"_index":1127,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitems",{"_index":1125,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitems(@query",{"_index":1138,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitems(getitemsquerydto",{"_index":1130,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitemsbasedto",{"_index":991,"title":{"classes/GetItemsBaseDto.html":{}},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"coverage.html":{}}}],["getitemsparamdto",{"_index":1006,"title":{"classes/GetItemsParamDto.html":{}},"body":{"classes/GetItemsParamDto.html":{},"controllers/ItemsController.html":{},"coverage.html":{}}}],["getitemsparamsdto",{"_index":1128,"title":{},"body":{"controllers/ItemsController.html":{}}}],["getitemsquerydto",{"_index":1005,"title":{"classes/GetItemsQueryDto.html":{}},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"coverage.html":{}}}],["getpostsquerydto",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":249,"title":{"index.html":{}},"body":{"injectables/AdminService.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":108,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/UsersController.html":{}}}],["getusers(@query",{"_index":199,"title":{},"body":{"controllers/AdminController.html":{},"controllers/UsersController.html":{}}}],["getusers(getusersquerydto",{"_index":140,"title":{},"body":{"controllers/AdminController.html":{},"controllers/UsersController.html":{}}}],["getusers(query",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{}}}],["getusersbasedto",{"_index":1008,"title":{"classes/GetUsersBaseDto.html":{}},"body":{"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["getusersparamdto",{"_index":1010,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["getusersquerydto",{"_index":141,"title":{"classes/GetUsersQueryDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["gh789",{"_index":751,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["given_name",{"_index":1060,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["global",{"_index":1278,"title":{},"body":{"modules/MailModule.html":{}}}],["google",{"_index":1018,"title":{},"body":{"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["google_client_id",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google_client_secret",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleauthcontroller",{"_index":467,"title":{"controllers/GoogleAuthController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":1029,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["googleauthservice",{"_index":463,"title":{"injectables/GoogleAuthService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":1059,"title":{},"body":{"injectables/GoogleAuthService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["googletokendto",{"_index":1021,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":1053,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["googleuser",{"_index":1073,"title":{"interfaces/GoogleUser.html":{}},"body":{"interfaces/GoogleUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["googleuser.email",{"_index":1676,"title":{},"body":{"injectables/UsersService.html":{}}}],["googleuser.firstname",{"_index":1673,"title":{},"body":{"injectables/UsersService.html":{}}}],["googleuser.googleid",{"_index":1675,"title":{},"body":{"injectables/UsersService.html":{}}}],["googleuser.lastname",{"_index":1674,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":1840,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["guard.canactivate(context",{"_index":557,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handle",{"_index":466,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["handling",{"_index":124,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["hash",{"_index":576,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/LoginProvider.html":{}}}],["hashed",{"_index":580,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashedpassword",{"_index":578,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing",{"_index":562,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashing.provider",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/LoginProvider.html":{}}}],["hashingprovider",{"_index":461,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/LoginProvider.html":{},"injectables/UpdateUserProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":565,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":570,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["here",{"_index":546,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["holds",{"_index":625,"title":{},"body":{"entities/Claim.html":{}}}],["host",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{}}}],["http",{"_index":183,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["httpcode",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://example.com/image.jpg",{"_index":810,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["https://example.com/image.jpg'})@isurl()@isnotempty()@maxlength(1024",{"_index":787,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["https://nestjs.com",{"_index":1855,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{}}}],["iactiveuser",{"_index":948,"title":{"interfaces/IActiveUser.html":{}},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/IActiveUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":589,"title":{},"body":{"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthService.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/MailjetProvider.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":643,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["id'})@isstring()@isnotempty",{"_index":1410,"title":{},"body":{"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{}}}],["id'})@isstring()@isoptional",{"_index":1007,"title":{},"body":{"classes/GetItemsParamDto.html":{}}}],["identifier",{"_index":1691,"title":{},"body":{"coverage.html":{}}}],["idtoken",{"_index":1057,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["ignore",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/UsersService.html":{}}}],["ij012",{"_index":769,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["ij012'})@isnotempty()@isstring",{"_index":752,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["ilike",{"_index":1163,"title":{},"body":{"injectables/ItemsService.html":{}}}],["ilike(`%${search",{"_index":1170,"title":{},"body":{"injectables/ItemsService.html":{}}}],["image",{"_index":786,"title":{},"body":{"classes/CreateItemDto.html":{},"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["image/gif",{"_index":1563,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpeg",{"_index":1564,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpg",{"_index":1565,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/png",{"_index":1566,"title":{},"body":{"injectables/UploadsService.html":{}}}],["imageurl",{"_index":773,"title":{},"body":{"classes/CreateItemDto.html":{},"entities/Item.html":{}}}],["image})@apiresponse({status",{"_index":1526,"title":{},"body":{"controllers/UploadsController.html":{}}}],["implementation",{"_index":563,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["implements",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthService.html":{}}}],["import",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["imports",{"_index":229,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["incoming",{"_index":638,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["information",{"_index":881,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["initialize",{"_index":1041,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["initializes",{"_index":1045,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["inject",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["inject(forwardref",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["inject(jwtconfig.key",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{}}}],["inject(request",{"_index":1380,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":48,"title":{"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":697,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(claim",{"_index":704,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["injectrepository(item",{"_index":1118,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{}}}],["injectrepository(upload",{"_index":1561,"title":{},"body":{"injectables/UploadsService.html":{}}}],["injectrepository(user",{"_index":873,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["injects",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["inlinecssenabled",{"_index":1304,"title":{},"body":{"modules/MailModule.html":{}}}],["installation",{"_index":1819,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1821,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1187,"title":{},"body":{"injectables/ItemsService.html":{}}}],["instances",{"_index":1175,"title":{},"body":{"injectables/ItemsService.html":{}}}],["intercept",{"_index":901,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":904,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":914,"title":{"interfaces/ErrorResponse.html":{},"interfaces/GoogleUser.html":{},"interfaces/IActiveUser.html":{},"interfaces/Paginated.html":{},"interfaces/SuccessResponse.html":{},"interfaces/UploadFile.html":{}},"body":{"interfaces/ErrorResponse.html":{},"interfaces/GoogleUser.html":{},"interfaces/IActiveUser.html":{},"interfaces/Paginated.html":{},"interfaces/SuccessResponse.html":{},"interfaces/UploadFile.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interface.ts",{"_index":1075,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":916,"title":{},"body":{"interfaces/ErrorResponse.html":{},"interfaces/GoogleUser.html":{},"interfaces/IActiveUser.html":{},"interfaces/Paginated.html":{},"interfaces/SuccessResponse.html":{},"interfaces/UploadFile.html":{},"overview.html":{}}}],["interfaces/active",{"_index":949,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces/google",{"_index":1666,"title":{},"body":{"injectables/UsersService.html":{}}}],["interfaces/paginated.interface",{"_index":1379,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interfaces/upload",{"_index":1559,"title":{},"body":{"injectables/UploadsService.html":{}}}],["intersectiontype",{"_index":982,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{}}}],["iphone",{"_index":779,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["isdate",{"_index":763,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["isdate()@isoptional()@type(undefined",{"_index":995,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["isemail",{"_index":847,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["isemailverified",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoginProvider.html":{},"entities/User.html":{}}}],["isenum",{"_index":796,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/PatchClaimDto.html":{}}}],["isenum(claimstatus",{"_index":985,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/PatchClaimDto.html":{}}}],["isenum(claimstatus)@isoptional",{"_index":979,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["isenum(itemcategory",{"_index":807,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["isenum(itemstatus",{"_index":809,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{}}}],["isenum(itemstatus)@isoptional",{"_index":1000,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["isenum(userrole",{"_index":857,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":1013,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":981,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{}}}],["isiso8601()@isoptional",{"_index":977,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["ismatch",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/LoginProvider.html":{}}}],["isnotempty",{"_index":765,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["isoptional",{"_index":798,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@ispositive()@min(1",{"_index":1402,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":1405,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":764,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["isstring()@isnotempty",{"_index":1071,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["isstring()@isoptional",{"_index":975,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetUsersBaseDto.html":{}}}],["issuer",{"_index":955,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["istokenmatch",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["isurl",{"_index":797,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["it's",{"_index":1180,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item",{"_index":119,"title":{"entities/Item.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"entities/Claim.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/GetItemsParamDto.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["item')@apioperation({summary",{"_index":115,"title":{},"body":{"controllers/AdminController.html":{}}}],["item'})@apiresponse({status",{"_index":117,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ItemsController.html":{}}}],["item.category",{"_index":1210,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.claim",{"_index":720,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["item.datefound",{"_index":1219,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.description",{"_index":1212,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.dto",{"_index":177,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{}}}],["item.dto.ts",{"_index":770,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["item.dto.ts:107",{"_index":791,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:122",{"_index":778,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:24",{"_index":1417,"title":{},"body":{"classes/PatchItemDto.html":{}}}],["item.dto.ts:28",{"_index":793,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:43",{"_index":777,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:58",{"_index":782,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:73",{"_index":795,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.dto.ts:89",{"_index":788,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["item.entity",{"_index":1113,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{}}}],["item.imageurl",{"_index":1215,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.locationfound",{"_index":1217,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.name",{"_index":1208,"title":{},"body":{"injectables/ItemsService.html":{}}}],["item.status",{"_index":718,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{}}}],["itemcategory",{"_index":775,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{},"miscellaneous/enumerations.html":{}}}],["itemid",{"_index":607,"title":{},"body":{"entities/Claim.html":{},"classes/CreateClaimDto.html":{}}}],["itemqueries",{"_index":1171,"title":{},"body":{"injectables/ItemsService.html":{}}}],["items",{"_index":133,"title":{},"body":{"controllers/AdminController.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"coverage.html":{}}}],["items'})@apiresponse({status",{"_index":1131,"title":{},"body":{"controllers/ItemsController.html":{}}}],["items.controller",{"_index":1148,"title":{},"body":{"modules/ItemsModule.html":{}}}],["items/1",{"_index":1140,"title":{},"body":{"controllers/ItemsController.html":{}}}],["items/items.module",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["itemsanalyticsprovider",{"_index":1106,"title":{"injectables/ItemsAnalyticsProvider.html":{}},"body":{"injectables/ItemsAnalyticsProvider.html":{},"coverage.html":{}}}],["itemscontroller",{"_index":1122,"title":{"controllers/ItemsController.html":{}},"body":{"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"coverage.html":{}}}],["itemsmodule",{"_index":221,"title":{"modules/ItemsModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules.html":{},"overview.html":{}}}],["itemsrepository",{"_index":1111,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{}}}],["itemsservice",{"_index":239,"title":{"injectables/ItemsService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"coverage.html":{},"overview.html":{}}}],["itemstatus",{"_index":702,"title":{},"body":{"injectables/ClaimsService.html":{},"classes/CreateItemDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{},"miscellaneous/enumerations.html":{}}}],["itemstatus.processing",{"_index":719,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["itemstatus.unclaimed",{"_index":1102,"title":{},"body":{"entities/Item.html":{}}}],["jdvj5",{"_index":1014,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["jdvj5'})@isint()@isoptional",{"_index":1012,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["jesse.juwe@gotrustcrow.com",{"_index":1341,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["jewelry",{"_index":1795,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["john",{"_index":851,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["john'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@example.com",{"_index":853,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{}}}],["johndoe@example.com'})@isemail()@isnotempty()@maxlength(96",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["johndoe@example.com'})@isnotempty()@isemail",{"_index":1243,"title":{},"body":{"classes/LoginDto.html":{},"classes/VerifyEmailDto.html":{}}}],["joi",{"_index":1761,"title":{},"body":{"dependencies.html":{}}}],["joi.number().default(3600",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().default(86400",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().port().default(2525",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().port().default(3000",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().port().default(5432",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.objectschema",{"_index":1886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string",{"_index":1889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":1284,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1301,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":615,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["jwt_access_token_ttl",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_token_ttl",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_token_audience",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_token_issuer",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"modules/ItemsModule.html":{}}}],["jwtconfiguration",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{}}}],["jwtmodule",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ItemsModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ItemsModule.html":{}}}],["jwtservice",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtsignoptions",{"_index":947,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["kamil",{"_index":1852,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1183,"title":{},"body":{"injectables/ItemsService.html":{}}}],["key",{"_index":627,"title":{},"body":{"entities/Claim.html":{},"injectables/ItemsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["keyof",{"_index":1878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lagos",{"_index":812,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["lagos'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":790,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["last",{"_index":825,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"interfaces/GoogleUser.html":{},"interfaces/IActiveUser.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["later",{"_index":551,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["legend",{"_index":212,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1092,"title":{},"body":{"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["lessthanorequal",{"_index":1162,"title":{},"body":{"injectables/ItemsService.html":{}}}],["lessthanorequal(to",{"_index":1201,"title":{},"body":{"injectables/ItemsService.html":{}}}],["letter",{"_index":835,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["library",{"_index":1044,"title":{},"body":{"injectables/GoogleAuthService.html":{},"dependencies.html":{}}}],["license",{"_index":1858,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1837,"title":{},"body":{"index.html":{}}}],["limit",{"_index":662,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["line",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["links",{"_index":1355,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["literal",{"_index":1358,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1235,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":1224,"title":{"injectables/LocalStrategy.html":{}},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["location",{"_index":789,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["locationfound",{"_index":774,"title":{},"body":{"classes/CreateItemDto.html":{},"entities/Item.html":{}}}],["log",{"_index":880,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["logged",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logging",{"_index":1242,"title":{},"body":{"classes/LoginDto.html":{}}}],["login",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["login')@apioperation({summary",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["login.provider",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginadmin",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginadmin(@body",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginadmin(logindto",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":398,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"coverage.html":{}}}],["loginprovider",{"_index":464,"title":{"injectables/LoginProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LoginProvider.html":{},"coverage.html":{},"overview.html":{}}}],["logintoken",{"_index":1055,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["logintoken.getpayload",{"_index":1062,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["loginuser",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@body",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(logindto",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loop",{"_index":543,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["lost",{"_index":293,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateClaimDto.html":{},"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["mail",{"_index":1262,"title":{},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{}}}],["mail.controller",{"_index":1286,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["mail_from",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mail_host",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mail_port",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mailcontroller",{"_index":1260,"title":{"controllers/MailController.html":{}},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["mailermodule",{"_index":1279,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":1288,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":1312,"title":{},"body":{"injectables/MailService.html":{}}}],["mailjet",{"_index":1327,"title":{},"body":{"injectables/MailjetProvider.html":{},"dependencies.html":{}}}],["mailjet.client",{"_index":1331,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["mailjet.client.apiconnect",{"_index":1334,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["mailjet.provider",{"_index":1318,"title":{},"body":{"injectables/MailService.html":{}}}],["mailjet_api_key",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mailjet_secret_key",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mailjetprovider",{"_index":1276,"title":{"injectables/MailjetProvider.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"coverage.html":{},"overview.html":{}}}],["mailmodule",{"_index":312,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":863,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["manytoone",{"_index":618,"title":{},"body":{"entities/Claim.html":{}}}],["manytoone(undefined",{"_index":591,"title":{},"body":{"entities/Claim.html":{}}}],["map",{"_index":537,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":911,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":583,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/RegisterDto.html":{}}}],["matches",{"_index":848,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^(?=.*[a",{"_index":856,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":1394,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":799,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["maxlength(1024",{"_index":811,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["maxlength(96",{"_index":805,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["meekness",{"_index":1343,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["message",{"_index":305,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"miscellaneous/functions.html":{}}}],["message'})@apiresponse({status",{"_index":292,"title":{},"body":{"controllers/AppController.html":{}}}],["messages",{"_index":1340,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["meta",{"_index":1356,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1770,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mime",{"_index":1465,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["min",{"_index":1406,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["min(1",{"_index":1407,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["minimum",{"_index":832,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["minlength",{"_index":800,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(3",{"_index":804,"title":{},"body":{"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":1774,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1836,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1826,"title":{},"body":{"index.html":{}}}],["module",{"_index":208,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"injectables/ItemsAnalyticsProvider.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":210,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1281,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":1283,"title":{},"body":{"modules/MailModule.html":{}}}],["more",{"_index":1849,"title":{},"body":{"index.html":{}}}],["morethanorequal",{"_index":1164,"title":{},"body":{"injectables/ItemsService.html":{}}}],["morethanorequal(from",{"_index":1200,"title":{},"body":{"injectables/ItemsService.html":{}}}],["multipart/form",{"_index":1541,"title":{},"body":{"controllers/UploadsController.html":{}}}],["multiple",{"_index":552,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["myśliwiec",{"_index":1853,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"classes/RegisterDto.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name.replace(/\\s/g",{"_index":1513,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["needed",{"_index":1105,"title":{},"body":{"entities/Item.html":{}}}],["nest",{"_index":1817,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1857,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":908,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":1280,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"modules/ItemsModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1750,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":1232,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1532,"title":{},"body":{"controllers/UploadsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":163,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newclaim",{"_index":707,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["newitem",{"_index":1165,"title":{},"body":{"injectables/ItemsService.html":{}}}],["newurl",{"_index":1389,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":892,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":910,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":1395,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node",{"_index":1332,"title":{},"body":{"injectables/MailjetProvider.html":{},"dependencies.html":{}}}],["node.js",{"_index":1809,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":1888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nodemailer",{"_index":1764,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":1184,"title":{},"body":{"injectables/ItemsService.html":{}}}],["none",{"_index":1785,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":696,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('claim",{"_index":732,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["notfoundexception('item",{"_index":1206,"title":{},"body":{"injectables/ItemsService.html":{}}}],["notfoundexception('user",{"_index":1670,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1820,"title":{},"body":{"index.html":{}}}],["null",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["nullable",{"_index":601,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["number",{"_index":836,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/ItemsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterDto.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":1190,"title":{},"body":{"injectables/ItemsService.html":{}}}],["oauth",{"_index":1654,"title":{},"body":{"injectables/UsersService.html":{}}}],["oauth2client",{"_index":1042,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["oauth2client(clientid",{"_index":1052,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["oauthclient",{"_index":1035,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["object",{"_index":244,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/GoogleTokenDto.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{}}}],["object.entries(itemqueries).filter",{"_index":1177,"title":{},"body":{"injectables/ItemsService.html":{}}}],["object.fromentries(filteredqueries",{"_index":1194,"title":{},"body":{"injectables/ItemsService.html":{}}}],["object.keys(queries).length",{"_index":727,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["object.values(itemcategory).includes(value",{"_index":1188,"title":{},"body":{"injectables/ItemsService.html":{}}}],["object.values(itemstatus).includes(value",{"_index":1189,"title":{},"body":{"injectables/ItemsService.html":{}}}],["objectliteral",{"_index":1377,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":907,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["ondelete",{"_index":1086,"title":{},"body":{"entities/Item.html":{}}}],["one",{"_index":554,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/RegisterDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1598,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1580,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":619,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{}}}],["onetoone(undefined",{"_index":605,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{}}}],["onmoduleinit",{"_index":1036,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["open",{"_index":1838,"title":{},"body":{"index.html":{}}}],["operator",{"_index":1658,"title":{},"body":{"injectables/UsersService.html":{}}}],["optional",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":952,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"modules/MailModule.html":{}}}],["origin",{"_index":1391,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=${nextpage",{"_index":1400,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=${page",{"_index":1399,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=${pages",{"_index":1398,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=${previouspage",{"_index":1401,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["origin}${pathname}?limit=${limit}&page=1",{"_index":1397,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["otherqueries",{"_index":1168,"title":{},"body":{"injectables/ItemsService.html":{}}}],["otherwise",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":227,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1862,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1743,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":660,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":1360,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["paginated",{"_index":699,"title":{"interfaces/Paginated.html":{}},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":1368,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":1370,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1203,"title":{},"body":{"injectables/ItemsService.html":{}}}],["paginationmodule",{"_index":222,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":681,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":1375,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":983,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":654,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{}}}],["param.dto.ts",{"_index":988,"title":{},"body":{"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:15",{"_index":990,"title":{},"body":{"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":646,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{}}}],["partial",{"_index":960,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/ItemsService.html":{}}}],["partialtype",{"_index":1414,"title":{},"body":{"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createclaimdto",{"_index":1409,"title":{},"body":{"classes/PatchClaimDto.html":{}}}],["partialtype(createitemdto",{"_index":1416,"title":{},"body":{"classes/PatchItemDto.html":{}}}],["partialtype(createuserdto",{"_index":1421,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pass",{"_index":1202,"title":{},"body":{"injectables/ItemsService.html":{},"modules/MailModule.html":{}}}],["passowrd",{"_index":1253,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["passport",{"_index":1234,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1231,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1226,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"classes/RegisterDto.html":{},"injectables/UpdateUserProvider.html":{},"entities/User.html":{}}}],["password123",{"_index":855,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["password123@'})@isnotempty()@equals('password",{"_index":1436,"title":{},"body":{"classes/RegisterDto.html":{}}}],["password123@'})@isnotempty()@isstring",{"_index":1245,"title":{},"body":{"classes/LoginDto.html":{}}}],["password123@'})@isstring()@isnotempty()@minlength(3)@maxlength(96)@matches(/^(?=.*[a",{"_index":828,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["passwords",{"_index":1437,"title":{},"body":{"classes/RegisterDto.html":{}}}],["patch",{"_index":155,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["patch('update",{"_index":148,"title":{},"body":{"controllers/AdminController.html":{}}}],["patch()@apioperation({summary",{"_index":1133,"title":{},"body":{"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["patchclaimdto",{"_index":147,"title":{"classes/PatchClaimDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/ClaimsService.html":{},"classes/PatchClaimDto.html":{},"coverage.html":{}}}],["patchclaimdto.status",{"_index":736,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["patching",{"_index":1408,"title":{},"body":{"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{}}}],["patchitemdto",{"_index":157,"title":{"classes/PatchItemDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["patchitemdto.category",{"_index":1211,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.datefound",{"_index":1220,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.description",{"_index":1213,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.imageurl",{"_index":1216,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.locationfound",{"_index":1218,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.name",{"_index":1209,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchitemdto.status",{"_index":1214,"title":{},"body":{"injectables/ItemsService.html":{}}}],["patchuser",{"_index":1603,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1623,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1614,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":1418,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"injectables/UpdateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["patchuserdto.email",{"_index":1458,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["patchuserdto.firstname",{"_index":1456,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["patchuserdto.lastname",{"_index":1457,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["patchuserdto.password",{"_index":1454,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["patchuserdto.phonenumber",{"_index":1460,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["patchuserdto.role",{"_index":1459,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["path",{"_index":1285,"title":{},"body":{"modules/MailModule.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["path.extname(file.originalname",{"_index":1515,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["pathname",{"_index":1392,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["payload",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{}}}],["payloaddata",{"_index":951,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["pending",{"_index":1788,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["permissions",{"_index":549,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["pg",{"_index":1767,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":840,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["phonenumber",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"interfaces/IActiveUser.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["placeholder",{"_index":1114,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["please",{"_index":1847,"title":{},"body":{"index.html":{}}}],["port",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":161,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/MailController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["post('admin",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":114,"title":{},"body":{"controllers/AdminController.html":{}}}],["post('file",{"_index":1538,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post('file')@useinterceptors(undefined)@apiheaders(['undefined",{"_index":1524,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post('login",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apioperation({summary",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apioperation({summary",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('mailjet",{"_index":1265,"title":{},"body":{"controllers/MailController.html":{}}}],["post('register",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apioperation({summary",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('verify",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('verify')@apioperation({summary",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":634,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{}}}],["post()@auth(authtype.none)@apioperation({summary",{"_index":1604,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":102,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/MailController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/UsersService.html":{}}}],["previous",{"_index":1361,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":1396,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":616,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":603,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["private",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["pro",{"_index":803,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["pro'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":792,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["pro.'})@isstring()@isoptional",{"_index":781,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["process",{"_index":730,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["processing",{"_index":1800,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["production",{"_index":1828,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1808,"title":{},"body":{"index.html":{}}}],["project",{"_index":1839,"title":{},"body":{"index.html":{}}}],["promise",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":967,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":545,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":518,"title":{"properties.html":{}},"body":{"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"classes/LoginDto.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"classes/VerifyEmailDto.html":{},"properties.html":{}}}],["protect",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["protocol",{"_index":1384,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["protocol}://${host",{"_index":1388,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["provide",{"_index":275,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/ClaimsService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["provider",{"_index":923,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/LoginProvider.html":{},"injectables/MailjetProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["providers",{"_index":215,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/admin.service",{"_index":168,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["providers/analytics.provider",{"_index":231,"title":{},"body":{"modules/AdminModule.html":{}}}],["providers/auth.service",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["providers/bcrypt.provider",{"_index":472,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/claims.service",{"_index":655,"title":{},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{}}}],["providers/create",{"_index":1634,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/find",{"_index":1636,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":473,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":1027,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["providers/hashing.provider",{"_index":475,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/items.service",{"_index":1135,"title":{},"body":{"controllers/ItemsController.html":{},"modules/ItemsModule.html":{}}}],["providers/login.provider",{"_index":476,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":1267,"title":{},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{}}}],["providers/mailjet.provider",{"_index":1287,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/pagination.provider",{"_index":1366,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/update",{"_index":1638,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/upload",{"_index":1551,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/uploads.service",{"_index":1535,"title":{},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{}}}],["providers/users.service",{"_index":1617,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providing",{"_index":561,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["public",{"_index":104,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["queries",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":160,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto",{"_index":170,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto.ts",{"_index":972,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":1404,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:15",{"_index":1009,"title":{},"body":{"classes/GetUsersBaseDto.html":{}}}],["query.dto.ts:18",{"_index":980,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["query.dto.ts:19",{"_index":999,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:25",{"_index":978,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["query.dto.ts:26",{"_index":1001,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:32",{"_index":976,"title":{},"body":{"classes/GetClaimsBaseDto.html":{}}}],["query.dto.ts:33",{"_index":994,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:41",{"_index":996,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:49",{"_index":1002,"title":{},"body":{"classes/GetItemsBaseDto.html":{}}}],["query.dto.ts:7",{"_index":1403,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryconditions",{"_index":1371,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["range",{"_index":998,"title":{},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"injectables/ItemsService.html":{}}}],["read",{"_index":1848,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1115,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["rebuild",{"_index":1191,"title":{},"body":{"injectables/ItemsService.html":{}}}],["record",{"_index":529,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UploadsService.html":{}}}],["reflect",{"_index":1769,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":523,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":1256,"title":{},"body":{"injectables/LoginProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshing",{"_index":1431,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["refreshtoken",{"_index":966,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":1426,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["register",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(createuserdto",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":1432,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["registered",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registeruser",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(@body",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruser(createuserdto",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{}}}],["related",{"_index":1117,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["relations",{"_index":1373,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["remove",{"_index":1511,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["repository",{"_index":683,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":1393,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1381,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["represents",{"_index":621,"title":{},"body":{"entities/Claim.html":{},"classes/CreateClaimDto.html":{},"entities/Item.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"entities/User.html":{}}}],["request",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('failed",{"_index":740,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('unable",{"_index":723,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception(error",{"_index":1251,"title":{},"body":{"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["required",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":226,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":556,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["response",{"_index":639,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["response.interceptor",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":900,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:11",{"_index":903,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:14",{"_index":906,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interface.ts",{"_index":918,"title":{},"body":{"interfaces/ErrorResponse.html":{},"interfaces/SuccessResponse.html":{},"coverage.html":{}}}],["response.util",{"_index":175,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["response.util.ts",{"_index":1729,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["response/data",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["responses",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["responsible",{"_index":1034,"title":{},"body":{"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{}}}],["result",{"_index":1350,"title":{},"body":{"injectables/MailjetProvider.html":{},"miscellaneous/variables.html":{}}}],["result.body",{"_index":1351,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["results",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"interfaces/IActiveUser.html":{},"entities/User.html":{}}}],["role.enum",{"_index":850,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IActiveUser.html":{},"injectables/LoginProvider.html":{},"entities/User.html":{}}}],["role.enum.ts",{"_index":1784,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["route",{"_index":123,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["routes",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":1824,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":909,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":1497,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["salt",{"_index":574,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":885,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["save",{"_index":713,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["save(user",{"_index":1663,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":1813,"title":{},"body":{"index.html":{}}}],["schema",{"_index":622,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["sdk",{"_index":1498,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["search",{"_index":993,"title":{},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"injectables/ItemsService.html":{}}}],["secret",{"_index":957,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{}}}],["secure",{"_index":1293,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":895,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{}}}],["sending",{"_index":1308,"title":{},"body":{"injectables/MailService.html":{},"injectables/MailjetProvider.html":{}}}],["sendmailjetemail",{"_index":1263,"title":{},"body":{"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{}}}],["sendmailjetemail(@body",{"_index":1271,"title":{},"body":{"controllers/MailController.html":{}}}],["sendmailjetemail(createuserdto",{"_index":1264,"title":{},"body":{"controllers/MailController.html":{}}}],["sendmailjetemail(to",{"_index":1329,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["sendmailjetemail(user",{"_index":1314,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome",{"_index":1310,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome(user",{"_index":1316,"title":{},"body":{"injectables/MailService.html":{}}}],["sensitive",{"_index":882,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["sent",{"_index":1054,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["server",{"_index":1814,"title":{},"body":{"index.html":{}}}],["service",{"_index":272,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ClaimsService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/HashingProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/MailService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["setmetadata(auth_type_key",{"_index":1884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":1885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1815,"title":{},"body":{"index.html":{}}}],["sign",{"_index":944,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{}}}],["signtoken",{"_index":936,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":940,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["simple",{"_index":1196,"title":{},"body":{"injectables/ItemsService.html":{}}}],["single",{"_index":693,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["size",{"_index":1466,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["skip",{"_index":1179,"title":{},"body":{"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{}}}],["social/google",{"_index":477,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":478,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"modules/ItemsModule.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"index.html":{}}}],["spaces",{"_index":1512,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["special",{"_index":837,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["sponsors",{"_index":1842,"title":{},"body":{"index.html":{}}}],["sports",{"_index":1796,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../active",{"_index":1871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1776,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../claimstatus.enum.ts",{"_index":1778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../environment.validation.ts",{"_index":1875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":1803,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../file",{"_index":1779,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":1876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../itemcategory.enum.ts",{"_index":1781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../itemstatus.enum.ts",{"_index":1782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1802,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../success",{"_index":1804,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":1783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/admin/admin.controller.ts",{"_index":101,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:29",{"_index":132,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:43",{"_index":122,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:57",{"_index":158,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:71",{"_index":145,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:84",{"_index":139,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:97",{"_index":154,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.module.ts",{"_index":228,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/providers/admin.service.ts",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/providers/admin.service.ts:17",{"_index":242,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:30",{"_index":243,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:40",{"_index":245,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:50",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:59",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:68",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:78",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/analytics.provider.ts",{"_index":271,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"coverage.html":{}}}],["src/admin/providers/analytics.provider.ts:11",{"_index":278,"title":{},"body":{"injectables/AnalyticsProvider.html":{}}}],["src/admin/providers/analytics.provider.ts:18",{"_index":279,"title":{},"body":{"injectables/AnalyticsProvider.html":{}}}],["src/app.controller.ts",{"_index":288,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:16",{"_index":296,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":387,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":388,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:45",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:74",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1639,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthService.html":{},"modules/ItemsModule.html":{}}}],["src/auth/constants/auth.constants",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":1705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1268,"title":{},"body":{"controllers/MailController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":1241,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:21",{"_index":1244,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dtos/login.dto.ts:35",{"_index":1246,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dtos/refresh",{"_index":1427,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/register.dto.ts",{"_index":1433,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dtos/register.dto.ts:18",{"_index":1441,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/register.dto.ts:28",{"_index":1439,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/register.dto.ts:37",{"_index":1443,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/register.dto.ts:52",{"_index":1442,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/register.dto.ts:61",{"_index":1438,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dtos/verify",{"_index":1681,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["src/auth/enums/auth",{"_index":527,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/MailController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":517,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:19",{"_index":524,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:26",{"_index":525,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":1080,"title":{},"body":{"interfaces/IActiveUser.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:16",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:33",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:43",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:52",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:61",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:78",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:87",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":560,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:11",{"_index":571,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:23",{"_index":569,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":932,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":869,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":1076,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:10",{"_index":1078,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":1079,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/login.provider.ts",{"_index":1247,"title":{},"body":{"injectables/LoginProvider.html":{},"coverage.html":{}}}],["src/auth/providers/login.provider.ts:15",{"_index":1248,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["src/auth/providers/login.provider.ts:29",{"_index":1250,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["src/auth/providers/login.provider.ts:67",{"_index":1249,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["src/auth/social/dtos/google",{"_index":1069,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":1015,"title":{},"body":{"controllers/GoogleAuthController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":1032,"title":{},"body":{"injectables/GoogleAuthService.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1225,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":1228,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:17",{"_index":1230,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/claims/claim.entity",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["src/claims/claim.entity.ts",{"_index":585,"title":{},"body":{"entities/Claim.html":{},"coverage.html":{}}}],["src/claims/claim.entity.ts:17",{"_index":604,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:25",{"_index":611,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:31",{"_index":602,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:34",{"_index":599,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:37",{"_index":613,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:41",{"_index":596,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claim.entity.ts:45",{"_index":608,"title":{},"body":{"entities/Claim.html":{}}}],["src/claims/claims.controller.ts",{"_index":629,"title":{},"body":{"controllers/ClaimsController.html":{},"coverage.html":{}}}],["src/claims/claims.controller.ts:37",{"_index":636,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.controller.ts:58",{"_index":649,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.controller.ts:79",{"_index":645,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.module",{"_index":232,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/claims/claims.module.ts",{"_index":673,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["src/claims/dtos/create",{"_index":744,"title":{},"body":{"classes/CreateClaimDto.html":{},"coverage.html":{}}}],["src/claims/dtos/get",{"_index":169,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"coverage.html":{}}}],["src/claims/dtos/patch",{"_index":171,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/PatchClaimDto.html":{},"coverage.html":{}}}],["src/claims/enums/claimstatus.enum.ts",{"_index":1786,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/claims/providers/claims.service",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{}}}],["src/claims/providers/claims.service.ts",{"_index":677,"title":{},"body":{"injectables/ClaimsService.html":{},"coverage.html":{}}}],["src/claims/providers/claims.service.ts:108",{"_index":691,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/providers/claims.service.ts:132",{"_index":695,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/providers/claims.service.ts:155",{"_index":685,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/providers/claims.service.ts:22",{"_index":684,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/providers/claims.service.ts:37",{"_index":687,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/providers/claims.service.ts:81",{"_index":689,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/common/interceptors/data",{"_index":899,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":984,"title":{},"body":{"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":700,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":1354,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":234,"title":{},"body":{"modules/AdminModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/UsersModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":1365,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":701,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":1367,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:11",{"_index":1369,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:17",{"_index":1374,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/response/interfaces/error",{"_index":917,"title":{},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/common/response/interfaces/success",{"_index":1447,"title":{},"body":{"interfaces/SuccessResponse.html":{},"coverage.html":{}}}],["src/common/response/utils/error",{"_index":1728,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/response/utils/success",{"_index":174,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/environment.validation.ts",{"_index":1732,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/items/dtos/create",{"_index":176,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/CreateItemDto.html":{},"coverage.html":{}}}],["src/items/dtos/get",{"_index":992,"title":{},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"coverage.html":{}}}],["src/items/dtos/patch",{"_index":178,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/PatchItemDto.html":{},"coverage.html":{}}}],["src/items/enums/itemcategory.enum.ts",{"_index":1791,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/items/enums/itemstatus.enum",{"_index":703,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/items/enums/itemstatus.enum.ts",{"_index":1797,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/items/item.entity",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{},"entities/Claim.html":{}}}],["src/items/item.entity.ts",{"_index":1083,"title":{},"body":{"entities/Item.html":{},"coverage.html":{}}}],["src/items/item.entity.ts:17",{"_index":1095,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:20",{"_index":1099,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:23",{"_index":1097,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:26",{"_index":1084,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:29",{"_index":1094,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:37",{"_index":1100,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:40",{"_index":1098,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:43",{"_index":1090,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:46",{"_index":1089,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:49",{"_index":1101,"title":{},"body":{"entities/Item.html":{}}}],["src/items/item.entity.ts:53",{"_index":1088,"title":{},"body":{"entities/Item.html":{}}}],["src/items/items.controller.ts",{"_index":1123,"title":{},"body":{"controllers/ItemsController.html":{},"coverage.html":{}}}],["src/items/items.controller.ts:38",{"_index":1126,"title":{},"body":{"controllers/ItemsController.html":{}}}],["src/items/items.controller.ts:59",{"_index":1132,"title":{},"body":{"controllers/ItemsController.html":{}}}],["src/items/items.controller.ts:80",{"_index":1129,"title":{},"body":{"controllers/ItemsController.html":{}}}],["src/items/items.controller.ts:99",{"_index":1134,"title":{},"body":{"controllers/ItemsController.html":{}}}],["src/items/items.module",{"_index":233,"title":{},"body":{"modules/AdminModule.html":{},"modules/ClaimsModule.html":{}}}],["src/items/items.module.ts",{"_index":1147,"title":{},"body":{"modules/ItemsModule.html":{}}}],["src/items/providers/items",{"_index":1107,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{},"coverage.html":{}}}],["src/items/providers/items.service",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/ClaimsService.html":{}}}],["src/items/providers/items.service.ts",{"_index":1150,"title":{},"body":{"injectables/ItemsService.html":{},"coverage.html":{}}}],["src/items/providers/items.service.ts:125",{"_index":1157,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:149",{"_index":1159,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:178",{"_index":1153,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:22",{"_index":1152,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:34",{"_index":1155,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/items/providers/items.service.ts:56",{"_index":1156,"title":{},"body":{"injectables/ItemsService.html":{}}}],["src/mail/mail.controller.ts",{"_index":1261,"title":{},"body":{"controllers/MailController.html":{},"coverage.html":{}}}],["src/mail/mail.controller.ts:17",{"_index":1266,"title":{},"body":{"controllers/MailController.html":{}}}],["src/mail/mail.module.ts",{"_index":1277,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service",{"_index":870,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":1307,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/providers/mail.service.ts:12",{"_index":1313,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:23",{"_index":1317,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:42",{"_index":1315,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mailjet.provider.ts",{"_index":1326,"title":{},"body":{"injectables/MailjetProvider.html":{},"coverage.html":{}}}],["src/mail/providers/mailjet.provider.ts:10",{"_index":1328,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["src/mail/providers/mailjet.provider.ts:19",{"_index":1330,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["src/main.ts",{"_index":1736,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/uploads/enums/file",{"_index":1790,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/uploads/interfaces/upload",{"_index":1482,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["src/uploads/providers/upload",{"_index":1485,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts",{"_index":1554,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts:16",{"_index":1557,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/uploads.service.ts:28",{"_index":1558,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/upload.entity.ts",{"_index":1463,"title":{},"body":{"entities/Upload.html":{},"coverage.html":{}}}],["src/uploads/upload.entity.ts:12",{"_index":1469,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:15",{"_index":1472,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:18",{"_index":1473,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:26",{"_index":1476,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:29",{"_index":1471,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:32",{"_index":1474,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:35",{"_index":1468,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:38",{"_index":1477,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":1521,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.controller.ts:33",{"_index":1528,"title":{},"body":{"controllers/UploadsController.html":{}}}],["src/uploads/uploads.module.ts",{"_index":1548,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dtos/create",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":179,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":1419,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/enums/user",{"_index":1082,"title":{},"body":{"interfaces/IActiveUser.html":{},"injectables/LoginProvider.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/interfaces/google",{"_index":1074,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":859,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":921,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/update",{"_index":1449,"title":{},"body":{"injectables/UpdateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/AuthService.html":{},"injectables/ClaimsService.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1641,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:101",{"_index":1657,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:124",{"_index":1661,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:134",{"_index":1653,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:156",{"_index":1665,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:165",{"_index":1649,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:182",{"_index":1664,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:23",{"_index":1648,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:37",{"_index":1651,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:46",{"_index":1655,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:67",{"_index":1662,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:91",{"_index":1659,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"entities/Claim.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{}}}],["src/users/user.entity.ts",{"_index":1579,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:17",{"_index":1589,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":1586,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":1591,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:26",{"_index":1585,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":1593,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:33",{"_index":1592,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:37",{"_index":1588,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:45",{"_index":1594,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:48",{"_index":1583,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:51",{"_index":1595,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:55",{"_index":1582,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:58",{"_index":1596,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:61",{"_index":1590,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1601,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:101",{"_index":1611,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":1605,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":1613,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":1615,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":235,"title":{},"body":{"modules/AdminModule.html":{},"modules/ClaimsModule.html":{}}}],["src/users/users.module.ts",{"_index":1632,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/utils",{"_index":872,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/utils/index.ts",{"_index":1741,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["staging",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":997,"title":{},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"index.html":{}}}],["start:dev",{"_index":1827,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1829,"title":{},"body":{"index.html":{}}}],["started",{"_index":1807,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1818,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1692,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":520,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":187,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateItemDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"controllers/GoogleAuthController.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"classes/PatchClaimDto.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":919,"title":{},"body":{"interfaces/ErrorResponse.html":{},"miscellaneous/functions.html":{}}}],["stay",{"_index":1850,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1233,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["strict",{"_index":1305,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1185,"title":{},"body":{"injectables/ItemsService.html":{}}}],["sub",{"_index":1058,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["subject",{"_index":896,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{}}}],["submitted",{"_index":1787,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["success",{"_index":1357,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"interfaces/SuccessResponse.html":{},"miscellaneous/functions.html":{}}}],["successfully",{"_index":121,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apibody({required",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiparam({name",{"_index":644,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiquery({name",{"_index":648,"title":{},"body":{"controllers/ClaimsController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["successresponse",{"_index":1446,"title":{"interfaces/SuccessResponse.html":{}},"body":{"interfaces/SuccessResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["summary",{"_index":186,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1236,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["support",{"_index":1843,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1572,"title":{},"body":{"injectables/UploadsService.html":{}}}],["supportedmimetypes",{"_index":1562,"title":{},"body":{"injectables/UploadsService.html":{}}}],["supportedmimetypes.includes(file.mimetype",{"_index":1570,"title":{},"body":{"injectables/UploadsService.html":{}}}],["svg",{"_index":1860,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":942,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"interfaces/SuccessResponse.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":1574,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1742,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":783,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["take",{"_index":1382,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["template",{"_index":1299,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{}}}],["templateid",{"_index":1345,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["templatelanguage",{"_index":1347,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["templates",{"_index":1302,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1832,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1835,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1834,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1831,"title":{},"body":{"index.html":{}}}],["textpart",{"_index":1348,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["thanks",{"_index":1841,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":530,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.adminservice.analytics",{"_index":188,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.createitem(createitemdto",{"_index":192,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.getclaims(getclaimsquerydto",{"_index":204,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.getusers(getusersquerydto",{"_index":200,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.updateclaim(patchclaimdto",{"_index":206,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.updateitem(patchitemdto",{"_index":196,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.analyticsprovider.analytics",{"_index":265,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.appservice.gethello",{"_index":306,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminlogin(logindto",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(createuserdto",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(logindto",{"_index":1238,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.verify(verifyemaildto",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[authtype]).flat",{"_index":539,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.claimrepository",{"_index":729,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.count",{"_index":739,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.create",{"_index":714,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.findoneby",{"_index":731,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.manager.transaction(async",{"_index":711,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.save(claim",{"_index":738,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimsservice.analytics",{"_index":284,"title":{},"body":{"injectables/AnalyticsProvider.html":{}}}],["this.claimsservice.create(createclaimdto",{"_index":659,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.findall(getclaimsquerydto",{"_index":664,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.findall(query",{"_index":269,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.claimsservice.findonebyid(getclaimsquerydto.id",{"_index":668,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.update(patchclaimdto",{"_index":270,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":913,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/PaginationProvider.html":{}}}],["this.configservice.get('appconfig.awscloudfronturl')}/${name",{"_index":1575,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.configservice.get('appconfig.mailjetapikey",{"_index":1335,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["this.configservice.get('appconfig.mailjetsecretkey",{"_index":1336,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["this.configservice.get('aws_public_bucket_name",{"_index":1504,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1667,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.extractrequestfromheader(request",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebyemailprovider.findonebyemail(email",{"_index":1671,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyid(patchclaimdto.id",{"_index":734,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.findonebyid(patchitemdto.id",{"_index":1207,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.generatefilename(file",{"_index":1506,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":1067,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":1064,"title":{},"body":{"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":1031,"title":{},"body":{"controllers/GoogleAuthController.html":{}}}],["this.hashingprovider.comparepassword(logindto.password",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":889,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.hashingprovider.hashpassword(patchuserdto.password",{"_index":1455,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["this.itemsrepository",{"_index":1204,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemsrepository.count",{"_index":1223,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemsrepository.count().catch((error",{"_index":1119,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["this.itemsrepository.create(createitemdto",{"_index":1166,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemsrepository.findoneby",{"_index":1205,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemsrepository.save(item",{"_index":1222,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemsrepository.save(newitem",{"_index":1167,"title":{},"body":{"injectables/ItemsService.html":{}}}],["this.itemsservice.analytics",{"_index":285,"title":{},"body":{"injectables/AnalyticsProvider.html":{}}}],["this.itemsservice.create(createitemdto",{"_index":266,"title":{},"body":{"injectables/AdminService.html":{},"controllers/ItemsController.html":{}}}],["this.itemsservice.findall(getitemsquerydto",{"_index":1139,"title":{},"body":{"controllers/ItemsController.html":{}}}],["this.itemsservice.findonebyid(createclaimdto.itemid",{"_index":706,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.itemsservice.findonebyid(getitemsparamsdto.id",{"_index":1142,"title":{},"body":{"controllers/ItemsController.html":{}}}],["this.itemsservice.update(patchitemdto",{"_index":267,"title":{},"body":{"injectables/AdminService.html":{},"controllers/ItemsController.html":{}}}],["this.jwtconfiguration",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":969,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":954,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":1048,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":1050,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":956,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":970,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":958,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.signasync(payloaddata",{"_index":959,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.loginprovider.adminlogin(logindto",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loginprovider.login(logindto",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailerservice.sendmail",{"_index":1319,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailjet",{"_index":1333,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["this.mailjet.post('send",{"_index":1337,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["this.mailjetprovider.sendmailjetemail(to",{"_index":1325,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendmailjetemail(createuserdto",{"_index":1272,"title":{},"body":{"controllers/MailController.html":{}}}],["this.mailservice.sendmailjetemail(newuser",{"_index":898,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.mailservice.senduserwelcome(newuser",{"_index":897,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.oauthclient",{"_index":1051,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":1056,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":728,"title":{},"body":{"injectables/ClaimsService.html":{},"injectables/ItemsService.html":{},"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride",{"_index":533,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.request.headers.host",{"_index":1386,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1385,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signtoken(user.id",{"_index":968,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.updateuserprovider.updateuser(patchuserdto",{"_index":1678,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.uploadsrepository.create(uploadfile",{"_index":1577,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsrepository.save(upload",{"_index":1578,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsservice.uploadfile(file",{"_index":1544,"title":{},"body":{"controllers/UploadsController.html":{}}}],["this.uploadtoawsprovider.fileupload(file",{"_index":1573,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.userrepository.create",{"_index":893,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findone",{"_index":877,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":931,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["this.userrepository.save(newuser",{"_index":894,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":1461,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["this.usersrepository",{"_index":1668,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.count",{"_index":1679,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":1672,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":1669,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1677,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.analytics",{"_index":286,"title":{},"body":{"injectables/AnalyticsProvider.html":{}}}],["this.usersservice.create(createuserdto",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.creategoogleuser(userdata",{"_index":1066,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["this.usersservice.findall(getusersquerydto",{"_index":1622,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(query",{"_index":268,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.usersservice.findonebyemail(logindto.email",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["this.usersservice.findonebyemail(verifyemaildto.email",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebygoogleid(googleid",{"_index":1063,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["this.usersservice.findonebyid(createclaimdto.authorid",{"_index":705,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.usersservice.save(user",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuser(patchuserdto",{"_index":1624,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":544,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["timeout",{"_index":1296,"title":{},"body":{"modules/MailModule.html":{}}}],["timestamp",{"_index":1516,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["token",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"injectables/LoginProvider.html":{},"injectables/MailjetProvider.html":{},"classes/RefreshTokenDto.html":{},"controllers/UploadsController.html":{},"classes/VerifyEmailDto.html":{}}}],["token.dto",{"_index":1026,"title":{},"body":{"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{}}}],["token.dto.ts",{"_index":1070,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:10",{"_index":1072,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:21",{"_index":1430,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:14",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:26",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:48",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":934,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{}}}],["tokens.provider",{"_index":474,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{}}}],["tokens.provider.ts",{"_index":933,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:14",{"_index":937,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:28",{"_index":943,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:48",{"_index":939,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["total",{"_index":1359,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalclaims",{"_index":280,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"injectables/ClaimsService.html":{}}}],["totalitems",{"_index":282,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{}}}],["totalusers",{"_index":283,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":1851,"title":{},"body":{"index.html":{}}}],["track",{"_index":1116,"title":{},"body":{"injectables/ItemsAnalyticsProvider.html":{}}}],["transaction",{"_index":708,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["transfer",{"_index":746,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LoginDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{}}}],["transform",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["transformer",{"_index":1004,"title":{},"body":{"classes/GetItemsBaseDto.html":{},"classes/GetItemsQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":1290,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":1514,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"controllers/GoogleAuthController.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{}}}],["true})@joincolumn({name",{"_index":594,"title":{},"body":{"entities/Claim.html":{}}}],["try",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/LoginProvider.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1856,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/MailjetProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"interfaces/SuccessResponse.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":303,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthController.html":{},"controllers/MailController.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1777,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeof",{"_index":1181,"title":{},"body":{"injectables/ItemsService.html":{}}}],["typeorm",{"_index":617,"title":{},"body":{"entities/Claim.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Item.html":{},"injectables/ItemsAnalyticsProvider.html":{},"injectables/ItemsService.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([claim",{"_index":676,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["typeormmodule.forfeature([item",{"_index":1149,"title":{},"body":{"modules/ItemsModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":1553,"title":{},"body":{"modules/UploadsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1640,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1569,"title":{},"body":{"injectables/UploadsService.html":{},"dependencies.html":{}}}],["types.enum",{"_index":1479,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["types.enum.ts",{"_index":1780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"index.html":{}}}],["unauthorised",{"_index":1068,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["unauthorizedexception",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginProvider.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('access",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('email",{"_index":1255,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["unauthorizedexception('incorect",{"_index":1254,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["unauthorizedexception('invalid",{"_index":1239,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('not",{"_index":1258,"title":{},"body":{"injectables/LoginProvider.html":{}}}],["unauthorizedexception('user",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["unclaimed",{"_index":808,"title":{},"body":{"classes/CreateItemDto.html":{},"miscellaneous/enumerations.html":{}}}],["unclaimed'})@isenum(itemstatus)@isnotempty",{"_index":794,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"entities/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Item.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":1525,"title":{},"body":{"controllers/UploadsController.html":{}}}],["undefined})@exclude",{"_index":1587,"title":{},"body":{"entities/User.html":{}}}],["unique",{"_index":1584,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":1830,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":126,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ClaimsController.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthService.html":{},"controllers/ItemsController.html":{},"injectables/LoginProvider.html":{},"controllers/MailController.html":{},"injectables/MailjetProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1870,"title":{},"body":{"properties.html":{}}}],["unsupported",{"_index":1568,"title":{},"body":{"injectables/UploadsService.html":{}}}],["unused",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["update",{"_index":150,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/ClaimsService.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"injectables/UpdateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(patchclaimdto",{"_index":694,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["update(patchitemdto",{"_index":1158,"title":{},"body":{"injectables/ItemsService.html":{}}}],["updateclaim",{"_index":109,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["updateclaim(@body",{"_index":205,"title":{},"body":{"controllers/AdminController.html":{}}}],["updateclaim(patchclaimdto",{"_index":146,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["updated",{"_index":153,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ItemsController.html":{},"controllers/UsersController.html":{}}}],["updatedat",{"_index":590,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/User.html":{}}}],["updatedate",{"_index":1467,"title":{},"body":{"entities/Upload.html":{}}}],["updatedatecolumn",{"_index":612,"title":{},"body":{"entities/Claim.html":{},"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["updatedclaim",{"_index":737,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["updateditem",{"_index":1221,"title":{},"body":{"injectables/ItemsService.html":{}}}],["updateitem",{"_index":110,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ItemsController.html":{}}}],["updateitem(@body",{"_index":195,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ItemsController.html":{}}}],["updateitem(patchitemdto",{"_index":156,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/ItemsController.html":{}}}],["updateuser",{"_index":1450,"title":{},"body":{"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["updateuser(patchuserdto",{"_index":1452,"title":{},"body":{"injectables/UpdateUserProvider.html":{},"injectables/UsersService.html":{}}}],["updateuserprovider",{"_index":1448,"title":{"injectables/UpdateUserProvider.html":{}},"body":{"injectables/UpdateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["updating",{"_index":1420,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["upload",{"_index":1462,"title":{"entities/Upload.html":{}},"body":{"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["upload.entity",{"_index":1549,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["uploaded",{"_index":1527,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadedfile",{"_index":1529,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile",{"_index":1481,"title":{"interfaces/UploadFile.html":{}},"body":{"interfaces/UploadFile.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["uploadfile(@uploadedfile",{"_index":1543,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile(file",{"_index":1523,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadresult",{"_index":1502,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1509,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploads",{"_index":1522,"title":{},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["uploads.controller",{"_index":1550,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads/uploads.module",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadscontroller",{"_index":1520,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadsmodule",{"_index":313,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsrepository",{"_index":1556,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadsservice",{"_index":1534,"title":{"injectables/UploadsService.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadtoawsprovider",{"_index":1484,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":784,"title":{},"body":{"classes/CreateItemDto.html":{}}}],["url(this.request.url",{"_index":1390,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":887,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["useclass",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":274,"title":{},"body":{"injectables/AnalyticsProvider.html":{},"guards/AuthenticationGuard.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/GoogleAuthController.html":{},"injectables/ItemsAnalyticsProvider.html":{},"controllers/ItemsController.html":{},"injectables/ItemsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usefactory",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["useinterceptors",{"_index":1530,"title":{},"body":{"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1619,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1539,"title":{},"body":{"controllers/UploadsController.html":{}}}],["user",{"_index":254,"title":{"entities/User.html":{}},"body":{"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"entities/Claim.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthController.html":{},"injectables/GoogleAuthService.html":{},"interfaces/GoogleUser.html":{},"interfaces/IActiveUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/LoginProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"injectables/UpdateUserProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthController.html":{},"controllers/UsersController.html":{}}}],["user'})@isenum(userrole)@isoptional",{"_index":844,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isnotempty()@isstring",{"_index":1429,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["user.claims",{"_index":592,"title":{},"body":{"entities/Claim.html":{},"injectables/ClaimsService.html":{}}}],["user.decorator.ts",{"_index":1706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"classes/PatchUserDto.html":{},"injectables/UpdateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:21",{"_index":823,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":1423,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:32",{"_index":827,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:51",{"_index":842,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":839,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:75",{"_index":845,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":963,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"injectables/UpdateUserProvider.html":{}}}],["user.entity",{"_index":868,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UpdateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":961,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"injectables/UpdateUserProvider.html":{}}}],["user.interface",{"_index":950,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.interface.ts",{"_index":1081,"title":{},"body":{"interfaces/IActiveUser.html":{},"coverage.html":{}}}],["user.isemailverified",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{}}}],["user.lastname",{"_index":962,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["user.password",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["user.phonenumber",{"_index":964,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["user.provider",{"_index":1635,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":860,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UpdateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:11",{"_index":1451,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["user.provider.ts:13",{"_index":865,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:25",{"_index":1453,"title":{},"body":{"injectables/UpdateUserProvider.html":{}}}],["user.provider.ts:27",{"_index":867,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.role",{"_index":965,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/LoginProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["user.verifytoken",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["user/7654f3",{"_index":1625,"title":{},"body":{"controllers/UsersController.html":{}}}],["user?.[field",{"_index":1881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":1065,"title":{},"body":{"injectables/GoogleAuthService.html":{}}}],["userid",{"_index":945,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["username",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["usernamefield",{"_index":1237,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":864,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UpdateUserProvider.html":{}}}],["userrole",{"_index":843,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IActiveUser.html":{},"injectables/LoginProvider.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":1257,"title":{},"body":{"injectables/LoginProvider.html":{},"entities/User.html":{}}}],["users",{"_index":144,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"injectables/MailService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":143,"title":{},"body":{"controllers/AdminController.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1633,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["userscontroller",{"_index":1600,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":223,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1647,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":240,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AnalyticsProvider.html":{},"injectables/AuthService.html":{},"injectables/ClaimsService.html":{},"injectables/GoogleAuthService.html":{},"injectables/LoginProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":577,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GoogleAuthService.html":{},"injectables/UsersService.html":{}}}],["uuid",{"_index":1501,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":1500,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuidv4()}${extension",{"_index":1519,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v3.1",{"_index":1339,"title":{},"body":{"injectables/MailjetProvider.html":{}}}],["v4",{"_index":1499,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["valid",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ItemsService.html":{}}}],["valid('development",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"controllers/ClaimsController.html":{},"controllers/GoogleAuthController.html":{},"controllers/ItemsController.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["validate(logindto",{"_index":1229,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationschema",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":766,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/CreateItemDto.html":{},"classes/CreateUserDto.html":{},"classes/GetClaimsBaseDto.html":{},"classes/GetClaimsParamDto.html":{},"classes/GetClaimsQueryDto.html":{},"classes/GetItemsBaseDto.html":{},"classes/GetItemsParamDto.html":{},"classes/GetItemsQueryDto.html":{},"classes/GetUsersBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersQueryDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LoginDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchClaimDto.html":{},"classes/PatchItemDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterDto.html":{},"classes/VerifyEmailDto.html":{},"dependencies.html":{}}}],["value",{"_index":1178,"title":{},"body":{"injectables/ItemsService.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":1182,"title":{},"body":{"injectables/ItemsService.html":{}}}],["values",{"_index":1174,"title":{},"body":{"injectables/ItemsService.html":{}}}],["varchar",{"_index":1091,"title":{},"body":{"entities/Item.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["variable",{"_index":1700,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":359,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/MailjetProvider.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["verified",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/LoginProvider.html":{},"injectables/MailjetProvider.html":{}}}],["verify",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthService.html":{}}}],["verify(@body",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify(verifyemaildto",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyemaildto",{"_index":422,"title":{"classes/VerifyEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["verifyemaildto.token",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytoken",{"_index":890,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MailService.html":{},"entities/User.html":{}}}],["version",{"_index":1338,"title":{},"body":{"injectables/MailjetProvider.html":{},"properties.html":{}}}],["void",{"_index":1043,"title":{},"body":{"injectables/GoogleAuthService.html":{},"injectables/MailService.html":{}}}],["watch",{"_index":1825,"title":{},"body":{"index.html":{}}}],["way",{"_index":1197,"title":{},"body":{"injectables/ItemsService.html":{}}}],["website",{"_index":1854,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":291,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUserProvider.html":{},"injectables/MailService.html":{}}}],["yes",{"_index":946,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{}}}],["you'd",{"_index":1846,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":831,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":830,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["za",{"_index":829,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["zoom",{"_index":225,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimsModule.html":{},"modules/ItemsModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard for access token\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:26\n                        \n                    \n\n\n            \n                \n                        Method to check if access token is valid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Context of request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\n\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\n/**\n * Guard for access token\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Method to check if access token is valid\n   * @param context Context of request\n   * @returns boolean\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Extract request from context\n    const request = context.switchToHttp().getRequest();\n\n    // Extract token from request header authorization\n    const token = this.extractRequestFromHeader(request);\n\n    // Validate token\n    if (!token) {\n      throw new UnauthorizedException('User has no valid access token');\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration); // prettier-ignore\n      request[REQUEST_USER_KEY] = payload;\n    } catch {\n      throw new UnauthorizedException('Access token not verified');\n    }\n\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createItem\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getClaims\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateClaim\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        createItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    createItem(createItemDto: CreateItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-item')@ApiOperation({summary: 'Create item'})@ApiResponse({status: 201, description: 'Item created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Route for handling create item request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createItemDto\n                                            \n                                                            CreateItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Item created successfully\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        getAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAnalytics()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics')@ApiOperation({summary: 'Get analytics'})@ApiResponse({status: 200, description: 'Analytics fetched successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Route for handling get analytics request\nExample :\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Items analytics\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        getClaims\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClaims(getClaimsQueryDto: GetClaimsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('claims')@ApiOperation({summary: 'Get claims'})@ApiResponse({status: 200, description: 'Claims fetched successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Route for handling get claims request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getClaimsQueryDto\n                                            \n                                                            GetClaimsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Claims fetched successfully\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersQueryDto: GetUsersQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('users')@ApiOperation({summary: 'Get users'})@ApiResponse({status: 200, description: 'Users fetched successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        Route for handling get users request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersQueryDto\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Users fetched successfully\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateClaim\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateClaim(patchClaimDto: PatchClaimDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-claim')@ApiOperation({summary: 'Update claim'})@ApiResponse({status: 200, description: 'Claim updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Route for handling patch claim request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchClaimDto\n                                            \n                                                            PatchClaimDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Claim updated successfully\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateItem(patchItemDto: PatchItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-item')@ApiOperation({summary: 'Update item'})@ApiResponse({status: 200, description: 'Item updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Route for handling patch item request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchItemDto\n                                            \n                                                            PatchItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Item updated successfully\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Query } from '@nestjs/common';\nimport { Get, Patch, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\nimport { AdminService } from './providers/admin.service';\n\nimport { GetClaimsQueryDto } from 'src/claims/dtos/get-claims-query.dto';\nimport { PatchClaimDto } from 'src/claims/dtos/patch-claim.dto';\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\nimport { CreateItemDto } from 'src/items/dtos/create-item.dto';\nimport { PatchItemDto } from 'src/items/dtos/patch-item.dto';\nimport { GetUsersQueryDto } from 'src/users/dtos/get-users-query.dto';\n\n@ApiBearerAuth()\n@Controller('admin')\n@ApiTags('Admin')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  /**\n   * Route for handling get analytics request\n   * @example HTTP GET /admin/analytics\n   * @returns Items analytics\n   */\n  @Get('analytics')\n  @ApiOperation({ summary: 'Get analytics' })\n  @ApiResponse({ status: 200, description: 'Analytics fetched successfully' })\n  public async getAnalytics() {\n    const analytics = await this.adminService.analytics();\n    return createSuccessResponse('Analytics fetched successfully', true, analytics); // prettier-ignore\n  }\n\n  /**\n   * Route for handling create item request\n   * @example HTTP POST /admin/create-item\n   * @param createItemDto\n   * @returns Item created successfully\n   */\n  @Post('create-item')\n  @ApiOperation({ summary: 'Create item' })\n  @ApiResponse({ status: 201, description: 'Item created successfully' })\n  public async createItem(@Body() createItemDto: CreateItemDto) {\n    const item = await this.adminService.createItem(createItemDto);\n    return createSuccessResponse('Item created successfully', true, item); // prettier-ignore\n  }\n\n  /**\n   * Route for handling patch item request\n   * @example HTTP PATCH /admin/update-item\n   * @param patchItemDto\n   * @returns Item updated successfully\n   */\n  @Patch('update-item')\n  @ApiOperation({ summary: 'Update item' })\n  @ApiResponse({ status: 200, description: 'Item updated successfully' })\n  public async updateItem(@Body() patchItemDto: PatchItemDto) {\n    const item = await this.adminService.updateItem(patchItemDto);\n    return createSuccessResponse('Item updated successfully', true, item); // prettier-ignore\n  }\n\n  /**\n   * Route for handling get users request\n   * @example HTTP POST /admin/users\n   * @param getUsersQueryDto\n   * @returns Users fetched successfully\n   */\n  @Get('users')\n  @ApiOperation({ summary: 'Get users' })\n  @ApiResponse({ status: 200, description: 'Users fetched successfully' })\n  public async getUsers(@Query() getUsersQueryDto: GetUsersQueryDto) {\n    return await this.adminService.getUsers(getUsersQueryDto);\n  }\n\n  /**\n   * Route for handling get claims request\n   * @example HTTP POST /admin/claims\n   * @param getClaimsQueryDto\n   * @returns Claims fetched successfully\n   */\n  @Get('claims')\n  @ApiOperation({ summary: 'Get claims' })\n  @ApiResponse({ status: 200, description: 'Claims fetched successfully' })\n  public async getClaims(@Query() getClaimsQueryDto: GetClaimsQueryDto) {\n    return await this.adminService.getClaims(getClaimsQueryDto);\n  }\n\n  /**\n   * Route for handling patch claim request\n   * @example HTTP PATCH /admin/update-claim\n   * @param patchClaimDto\n   * @returns Claim updated successfully\n   */\n  @Patch('update-claim')\n  @ApiOperation({ summary: 'Update claim' })\n  @ApiResponse({ status: 200, description: 'Claim updated successfully' })\n  public async updateClaim(@Body() patchClaimDto: PatchClaimDto) {\n    const claim = await this.adminService.updateClaim(patchClaimDto);\n    return createSuccessResponse('Claim updated successfully', true, claim); // prettier-ignore\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nClaimsModule\n\nClaimsModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nClaimsModule->AdminModule\n\n\n\n\n\nItemsModule\n\nItemsModule\n\nAdminModule -->\n\nItemsModule->AdminModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAdminModule -->\n\nPaginationModule->AdminModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAnalyticsProvider\n\nAnalyticsProvider\n\nAdminModule -->\n\nAnalyticsProvider->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                        \n                            AnalyticsProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimsModule\n                        \n                        \n                            ItemsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AdminController } from './admin.controller';\nimport { AdminService } from './providers/admin.service';\nimport { AnalyticsProvider } from './providers/analytics.provider';\n\nimport { ClaimsModule } from 'src/claims/claims.module';\nimport { ItemsModule } from 'src/items/items.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [ClaimsModule, ItemsModule, PaginationModule, UsersModule],\n  controllers: [AdminController],\n  providers: [AdminService, AnalyticsProvider],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/providers/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                analytics\n                            \n                            \n                                    Public\n                                    Async\n                                createItem\n                            \n                            \n                                    Public\n                                    Async\n                                getClaims\n                            \n                            \n                                    Public\n                                    Async\n                                getUsers\n                            \n                            \n                                    Public\n                                    Async\n                                updateClaim\n                            \n                            \n                                    Public\n                                    Async\n                                updateItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(analyticsProvider: AnalyticsProvider, itemsService: ItemsService, usersService: UsersService, claimsService: ClaimsService)\n                    \n                \n                        \n                            \n                                Defined in src/admin/providers/admin.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        analyticsProvider\n                                                  \n                                                        \n                                                                        AnalyticsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        itemsService\n                                                  \n                                                        \n                                                                        ItemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimsService\n                                                  \n                                                        \n                                                                        ClaimsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        analytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    analytics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:30\n                        \n                    \n\n\n            \n                \n                        The method to get analytics\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    createItem(createItemDto: CreateItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:40\n                        \n                    \n\n\n            \n                \n                        The method to create a new item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createItemDto\n                                            \n                                                            CreateItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getClaims\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClaims(query: GetClaimsQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:68\n                        \n                    \n\n\n            \n                \n                        The method to get all claims from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetClaimsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GetClaimsQueryDto for getting queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Claim[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(query: GetUsersQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:59\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GetPostsQueryDto for getting queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                User[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateClaim\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateClaim(patchClaimDto: PatchClaimDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:78\n                        \n                    \n\n\n            \n                \n                        The method to update a claim\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchClaimDto\n                                            \n                                                            PatchClaimDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateItem(patchItemDto: PatchItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:50\n                        \n                    \n\n\n            \n                \n                        The method to update an item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchItemDto\n                                            \n                                                            PatchItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { AnalyticsProvider } from './analytics.provider';\n\nimport { Claim } from 'src/claims/claim.entity';\nimport { GetClaimsQueryDto } from 'src/claims/dtos/get-claims-query.dto';\nimport { PatchClaimDto } from 'src/claims/dtos/patch-claim.dto';\nimport { ClaimsService } from 'src/claims/providers/claims.service';\nimport { Item } from 'src/items/item.entity';\nimport { CreateItemDto } from 'src/items/dtos/create-item.dto';\nimport { PatchItemDto } from 'src/items/dtos/patch-item.dto';\nimport { ItemsService } from 'src/items/providers/items.service';\nimport { GetUsersQueryDto } from 'src/users/dtos/get-users-query.dto';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AdminService {\n  constructor(\n    private readonly analyticsProvider: AnalyticsProvider,\n    private readonly itemsService: ItemsService,\n    private readonly usersService: UsersService,\n    private readonly claimsService: ClaimsService,\n  ) {}\n\n  /**\n   * The method to get analytics\n   * @returns object\n   * @throws RequestTimeoutException\n   */\n  public async analytics(): Promise {\n    return await this.analyticsProvider.analytics();\n  }\n\n  /**\n   * The method to create a new item\n   * @param createItemDto\n   * @returns Item\n   * @throws RequestTimeoutException\n   */\n  public async createItem(createItemDto: CreateItemDto): Promise {\n    return await this.itemsService.create(createItemDto);\n  }\n\n  /**\n   * The method to update an item\n   * @param patchItemDto\n   * @returns Item\n   * @throws RequestTimeoutException\n   */\n  public async updateItem(patchItemDto: PatchItemDto): Promise {\n    return await this.itemsService.update(patchItemDto);\n  }\n\n  /**\n   * The method to get all users from the database\n   * @param query GetPostsQueryDto for getting queries\n   * @returns User[]\n   */\n  public async getUsers(query: GetUsersQueryDto) {\n    return await this.usersService.findAll(query);\n  }\n\n  /**\n   * The method to get all claims from the database\n   * @param query GetClaimsQueryDto for getting queries\n   * @returns Claim[]\n   */\n  public async getClaims(query: GetClaimsQueryDto) {\n    return await this.claimsService.findAll(query);\n  }\n\n  /**\n   * The method to update a claim\n   * @param patchClaimDto\n   * @returns Item\n   * @throws RequestTimeoutException\n   */\n  public async updateClaim(patchClaimDto: PatchClaimDto): Promise {\n    return await this.claimsService.update(patchClaimDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnalyticsProvider.html":{"url":"injectables/AnalyticsProvider.html","title":"injectable - AnalyticsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnalyticsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/providers/analytics.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service dealing with analytics. It is used to provide the analytics data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                analytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(claimsService: ClaimsService, itemsService: ItemsService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/admin/providers/analytics.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        claimsService\n                                                  \n                                                        \n                                                                        ClaimsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        itemsService\n                                                  \n                                                        \n                                                                        ItemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        analytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    analytics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/analytics.provider.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { ClaimsService } from 'src/claims/providers/claims.service';\nimport { ItemsService } from 'src/items/providers/items.service';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service dealing with analytics. It is used to provide the analytics data.\n */\n@Injectable()\nexport class AnalyticsProvider {\n  constructor(\n    private readonly claimsService: ClaimsService,\n    private readonly itemsService: ItemsService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  public async analytics(): Promise {\n    let totalClaims = 0;\n    let totalItems = 0;\n    let totalUsers = 0;\n\n    totalClaims = await this.claimsService.analytics();\n    totalItems = await this.itemsService.analytics();\n    totalUsers = await this.usersService.analytics();\n\n    return { totalClaims, totalItems, totalUsers };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Auth(AuthType.None)@ApiOperation({summary: 'Get welcome message'})@ApiResponse({status: 200, description: 'Lost and Found API'})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\nimport { AppService } from './app.service';\nimport { Auth } from './auth/decorators/auth.decorator';\nimport { AuthType } from './auth/enums/auth-type.enum';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @Auth(AuthType.None)\n  @ApiOperation({ summary: 'Get welcome message' })\n  @ApiResponse({ status: 200, description: 'Lost and Found API' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nClaimsModule\n\nClaimsModule\n\nAppModule -->\n\nClaimsModule->AppModule\n\n\n\n\n\nItemsModule\n\nItemsModule\n\nAppModule -->\n\nItemsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Main module to bootstrap the application\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ClaimsModule\n                        \n                        \n                            ItemsModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { ItemsModule } from './items/items.module';\nimport { ClaimsModule } from './claims/claims.module';\nimport { PaginationModule } from './common/pagination/pagination.module';\n\nimport jwtConfig from './auth/config/jwt.config';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { UploadsModule } from './uploads/uploads.module';\nimport { MailModule } from './mail/mail.module';\nimport { AdminModule } from './admin/admin.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentSchema from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV; // Get the current environment\n\n/**\n * Main module to bootstrap the application\n */\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentSchema,\n    }), // Load environment variables\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      }),\n    }), // Load database configuration\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    AuthModule,\n    UsersModule,\n    ItemsModule,\n    ClaimsModule,\n    PaginationModule,\n    UploadsModule,\n    MailModule,\n    AdminModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    { provide: APP_GUARD, useClass: AuthenticationGuard }, // Protect all routes\n    { provide: APP_INTERCEPTOR, useClass: DataResponseInterceptor }, // Transform all responses\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'This is the Lost and Found API';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                loginAdmin\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                loginUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                registerUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        loginAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginAdmin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin-login')@ApiOperation({summary: 'Login an admin'})@ApiResponse({status: 200, description: 'Admin logged in successfully'})@ApiBody({required: true, type: LoginDto, description: 'Admin login details'})@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginUser(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiOperation({summary: 'Login a user'})@ApiResponse({status: 200, description: 'User logged in successfully'})@ApiBody({required: true, type: LoginDto, description: 'User login details'})@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiOperation({summary: 'Logout a user'})@ApiResponse({status: 200, description: 'User logged out successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({summary: 'Register a new user'})@ApiResponse({status: 201, description: 'User registered successfully'})@ApiBody({required: true, type: CreateUserDto, description: 'User registration details'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        verify\n                        \n                    \n                \n            \n            \n                \n                        \n                    verify(verifyEmailDto: VerifyEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('verify')@ApiOperation({summary: 'Verify a user email'})@ApiResponse({status: 200, description: 'User email verified successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                verifyEmailDto\n                                            \n                                                            VerifyEmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { Auth } from './decorators/auth.decorator';\nimport { VerifyEmailDto } from './dtos/verify-email.dto';\nimport { LoginDto } from './dtos/login.dto';\nimport { AuthType } from './enums/auth-type.enum';\nimport { AuthService } from './providers/auth.service';\n\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\nimport { CreateUserDto } from 'src/users/dtos/create-user.dto';\n\n/**\n * Controller for authentication\n */\n@Auth(AuthType.None)\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  @ApiOperation({ summary: 'Register a new user' })\n  @ApiResponse({ status: 201, description: 'User registered successfully' })\n  @ApiBody({\n    required: true,\n    type: CreateUserDto,\n    description: 'User registration details',\n  })\n  public async registerUser(@Body() createUserDto: CreateUserDto) {\n    const user = await this.authService.register(createUserDto);\n    return createSuccessResponse('User created successfully', true, user);\n  }\n\n  @Post('login')\n  @ApiOperation({ summary: 'Login a user' })\n  @ApiResponse({ status: 200, description: 'User logged in successfully' })\n  @ApiBody({\n    required: true,\n    type: LoginDto,\n    description: 'User login details',\n  })\n  @HttpCode(HttpStatus.OK)\n  public async loginUser(@Body() loginDto: LoginDto) {\n    const token = await this.authService.login(loginDto);\n    return createSuccessResponse('User logged in successfully', true, token);\n  }\n\n  @Post('admin-login')\n  @ApiOperation({ summary: 'Login an admin' })\n  @ApiResponse({ status: 200, description: 'Admin logged in successfully' })\n  @ApiBody({\n    required: true,\n    type: LoginDto,\n    description: 'Admin login details',\n  })\n  @HttpCode(HttpStatus.OK)\n  public async loginAdmin(@Body() loginDto: LoginDto) {\n    const token = await this.authService.adminLogin(loginDto);\n    return createSuccessResponse('Admin logged in successfully', true, token);\n  }\n\n  @Post('logout')\n  @ApiOperation({ summary: 'Logout a user' })\n  @ApiResponse({ status: 200, description: 'User logged out successfully' })\n  public async logout() {\n    return 'Logout user';\n  }\n\n  @Post('verify')\n  @ApiOperation({ summary: 'Verify a user email' })\n  @ApiResponse({ status: 200, description: 'User email verified successfully' })\n  public async verify(@Body() verifyEmailDto: VerifyEmailDto) {\n    const isEmailVerified = await this.authService.verify(verifyEmailDto);\n    return createSuccessResponse('User email verified successfully', true, isEmailVerified); // prettier-ignore\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthService\n\nGoogleAuthService\n\nAuthModule -->\n\nGoogleAuthService->AuthModule\n\n\n\n\n\nLoginProvider\n\nLoginProvider\n\nAuthModule -->\n\nLoginProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to handle authentication\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthService\n                        \n                        \n                            LoginProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { AuthController } from './auth.controller';\nimport jwtConfig from './config/jwt.config';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { LoginProvider } from './providers/login.provider';\nimport { GoogleAuthController } from './social/google-auth.controller';\nimport { GoogleAuthService } from './social/providers/google-auth.service';\nimport { UsersModule } from '../users/users.module';\n\n/**\n * Module to handle authentication\n */\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController, GoogleAuthController],\n  providers: [\n    AuthService,\n    { provide: HashingProvider, useClass: BcryptProvider },\n    LoginProvider,\n    GenerateTokensProvider,\n    GoogleAuthService,\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle authentication\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                adminLogin\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                logout\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                            \n                                    Public\n                                    Async\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashingProvider: HashingProvider, loginProvider: LoginProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor of Auth service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginProvider\n                                                  \n                                                        \n                                                                        LoginProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        adminLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminLogin(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:52\n                        \n                    \n\n\n            \n                \n                        The method to login an admin\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user login details\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The logged in user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n                        The method to login a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user login details\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The logged in user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:78\n                        \n                    \n\n\n            \n                \n                        The method to logout a user\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A message indicating the user has been logged out\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        The method to register a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user registration details\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The registered user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:61\n                        \n                    \n\n\n            \n                \n                        The method to validate a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The username of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The user if found, otherwise null\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        verify\n                        \n                    \n                \n            \n            \n                \n                        \n                    verify(verifyEmailDto: VerifyEmailDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n                        The method to verify\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                verifyEmailDto\n                                            \n                                                            VerifyEmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The username of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The user if found, otherwise null\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\n\nimport { HashingProvider } from './hashing.provider';\nimport { LoginProvider } from './login.provider';\nimport { LoginDto } from '../dtos/login.dto';\nimport { VerifyEmailDto } from '../dtos/verify-email.dto';\n\nimport { User } from 'src/users/user.entity';\nimport { CreateUserDto } from 'src/users/dtos/create-user.dto';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service to handle authentication\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Constructor of Auth service\n   * @description Injects LoginProvider\n   */\n  constructor(\n    private readonly hashingProvider: HashingProvider,\n    private readonly loginProvider: LoginProvider,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * The method to register a new user\n   * @param createUserDto The user registration details\n   * @returns The registered user\n   */\n  public async register(createUserDto: CreateUserDto) {\n    const user = await this.usersService.create(createUserDto);\n    return user;\n  }\n\n  /**\n   * The method to login a user\n   * @param loginDto The user login details\n   * @returns The logged in user\n   */\n  public async login(loginDto: LoginDto) {\n    return await this.loginProvider.login(loginDto);\n  }\n\n  /**\n   * The method to login an admin\n   * @param loginDto The user login details\n   * @returns The logged in user\n   */\n  public async adminLogin(loginDto: LoginDto) {\n    return await this.loginProvider.adminLogin(loginDto);\n  }\n\n  /**\n   * The method to validate a user\n   * @param loginDto The username of the user\n   * @returns The user if found, otherwise null\n   */\n  public async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersService.findOneByEmail(loginDto.email);\n\n    // prettier-ignore\n    const isMatch = await this.hashingProvider.comparePassword(loginDto.password, user.password);\n\n    if (user && isMatch) {\n      return user;\n    }\n\n    return null;\n  }\n\n  /**\n   * The method to logout a user\n   * @returns A message indicating the user has been logged out\n   */\n  public async logout() {\n    return 'Logout user';\n  }\n\n  /**\n   * The method to verify\n   * @param verifyEmailDto The username of the user\n   * @returns The user if found, otherwise null\n   */\n  public async verify(verifyEmailDto: VerifyEmailDto): Promise {\n    const user = await this.usersService.findOneByEmail(verifyEmailDto.email);\n\n    // prettier-ignore\n    const isTokenMatch = user.verifyToken === verifyEmailDto.token;\n\n    if (user && isTokenMatch) {\n      user.isEmailVerified = true;\n      this.usersService.save(user);\n      return true;\n    }\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardmap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\n\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constants';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  // prettier-ignore\n  private readonly authTypeGuardmap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    // Get authTypes from reflector\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    // Map authTypes to guards\n    const guards = authTypes.map((authType) => this.authTypeGuardmap[authType]).flat(); // prettier-ignore\n\n    // Declare default error\n    let error = new UnauthorizedException();\n\n    // Loop through guards\n    for (const guard of guards) {\n      const canActivate = await Promise.resolve(\n        // Here the AccessToken Guard Will be fired and check if user has permissions to acces\n        // Later Multiple AuthTypes can be used even if one of them returns true\n        // The user is Authorised to access the resource\n        guard.canActivate(context),\n      ).catch((e) => {\n        error = e;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    // Throw error if user is not authorised\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for providing hashing implementation\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\n\nimport { HashingProvider } from './hashing.provider';\n\n/**\n * Service for providing hashing implementation\n */\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  public async hashPassword(data: string | Buffer): Promise {\n    // Generate a salt for bcrypt\n    const salt = await bcrypt.genSalt(10);\n\n    // Hash the password using bcrypt\n    const hashedPassword = await bcrypt.hash(data, salt);\n\n    // Return the hashed password\n    return hashedPassword;\n  }\n\n  // prettier-ignore\n  public async comparePassword(data: string | Buffer, encrypted: string): Promise {\n    // Compare the password to the encrypted password\n    const isMatch = await bcrypt.compare(data, encrypted);\n\n    // Return the match\n    return isMatch;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Claim.html":{"url":"entities/Claim.html","title":"entity - Claim","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Claim\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/claim.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Claim Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    Readonly\n                                createdAt\n                            \n                            \n                                    \n                                dateLost\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    \n                                item\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.claims, {eager: true})@JoinColumn({name: 'authorId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateLost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        item\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Item\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {cascade: true})@JoinColumn({name: 'itemId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ClaimStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/claim.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { ManyToOne, OneToOne } from 'typeorm';\n\nimport { ClaimStatus } from './enums/claimStatus.enum';\n\nimport { Item } from 'src/items/item.entity';\nimport { User } from 'src/users/user.entity';\n\n/**\n * Claim Entity\n * @description Represents the schema of a claim\n */\n@Entity()\nexport class Claim {\n  @PrimaryGeneratedColumn('uuid')\n  readonly id: string;\n\n  @Column({\n    type: 'enum',\n    enum: ClaimStatus,\n    nullable: false,\n    default: ClaimStatus.SUBMITTED,\n  })\n  status: ClaimStatus;\n\n  @Column({\n    type: 'date',\n    nullable: false,\n  })\n  dateLost: Date;\n\n  @CreateDateColumn()\n  readonly createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToOne(() => User, (user) => user.claims, { eager: true })\n  @JoinColumn({ name: 'authorId' })\n  author: User;\n\n  @OneToOne(() => Item, { cascade: true })\n  @JoinColumn({ name: 'itemId' }) // Ensures Claim holds the foreign key\n  item: Item;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimsController.html":{"url":"controllers/ClaimsController.html","title":"controller - ClaimsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/claims.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                claims\n            \n\n\n            \n                Description\n            \n            \n                Controller for Claims\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createClaim\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getClaim\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getClaims\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createClaim\n                        \n                    \n                \n            \n            \n                \n                        \n                    createClaim(createClaimDto: CreateClaimDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new claim'})@ApiResponse({status: 201, description: 'Claim created successfully'})@ApiBody({required: true, type: CreateClaimDto, description: 'Claim creation details'})\n                \n            \n\n                    \n                        \n                            Defined in src/claims/claims.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Route for handling create claim request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createClaimDto\n                                            \n                                                            CreateClaimDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming POST request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getClaim\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClaim(getClaimsQueryDto: GetClaimsParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a claim by id'})@ApiResponse({status: 200, description: 'Claim fetched successfully'})@ApiParam({name: 'getClaimsQueryDto', required: true, type: GetClaimsParamDto, description: 'Claim Param DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/claims/claims.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Route for handling get claim request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getClaimsQueryDto\n                                            \n                                                            GetClaimsParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request params\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Claim\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getClaims\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClaims(getClaimsQueryDto: GetClaimsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all claims'})@ApiResponse({status: 200, description: 'Claims fetched successfully'})@ApiQuery({name: 'getClaimsQueryDto', required: false, type: GetClaimsQueryDto, description: 'Claims Query DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/claims/claims.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Route for handling get claims request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getClaimsQueryDto\n                                            \n                                                            GetClaimsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Claim[]\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Query } from '@nestjs/common';\nimport { Body, Get, Post } from '@nestjs/common';\nimport { ApiBody, ApiParam, ApiQuery } from '@nestjs/swagger';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\nimport { CreateClaimDto } from './dtos/create-claim.dto';\nimport { GetClaimsParamDto } from './dtos/get-claims-param.dto';\nimport { GetClaimsQueryDto } from './dtos/get-claims-query.dto';\nimport { ClaimsService } from './providers/claims.service';\n\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\n\n/**\n * Controller for Claims\n */\n@ApiBearerAuth()\n@Controller('claims')\n@ApiTags('Claims')\nexport class ClaimsController {\n  constructor(private readonly claimsService: ClaimsService) {}\n\n  /**\n   * Route for handling create claim request\n   * @param createClaimDto A DTO used to validate incoming POST request\n   * @example HTTP POST /claim\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new claim' })\n  @ApiResponse({ status: 201, description: 'Claim created successfully' })\n  @ApiBody({\n    required: true,\n    type: CreateClaimDto,\n    description: 'Claim creation details',\n  })\n  public async createClaim(@Body() createClaimDto: CreateClaimDto) {\n    const claim = await this.claimsService.create(createClaimDto);\n    return createSuccessResponse('Claim created successfully', true, claim);\n  }\n\n  /**\n   * Route for handling get claims request\n   * @param getClaimsQueryDto A DTO used to validate incoming GET request queries\n   * @example HTTP GET /claims\n   * @returns Claim[]\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all claims' })\n  @ApiResponse({ status: 200, description: 'Claims fetched successfully' })\n  @ApiQuery({\n    name: 'getClaimsQueryDto',\n    required: false,\n    type: GetClaimsQueryDto,\n    description: 'Claims Query DTO',\n    example: { page: 1, limit: 10 },\n  })\n  public async getClaims(@Query() getClaimsQueryDto: GetClaimsQueryDto) {\n    const claims = await this.claimsService.findAll(getClaimsQueryDto);\n    return claims;\n  }\n\n  /**\n   * Route for handling get claim request\n   * @param getClaimsQueryDto A DTO used to validate incoming GET request params\n   * @example HTTP GET /claims/1\n   * @returns Claim\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a claim by id' })\n  @ApiResponse({ status: 200, description: 'Claim fetched successfully' })\n  @ApiParam({\n    name: 'getClaimsQueryDto',\n    required: true,\n    type: GetClaimsParamDto,\n    description: 'Claim Param DTO',\n    example: { id: 1 },\n  })\n  public async getClaim(@Param() getClaimsQueryDto: GetClaimsParamDto) {\n    const claim = await this.claimsService.findOneById(getClaimsQueryDto.id);\n    return createSuccessResponse('Claim fetched successfully', true, claim);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimsModule.html":{"url":"modules/ClaimsModule.html","title":"module - ClaimsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ClaimsModule\n\n\n\ncluster_ClaimsModule_providers\n\n\n\ncluster_ClaimsModule_imports\n\n\n\ncluster_ClaimsModule_exports\n\n\n\n\nItemsModule\n\nItemsModule\n\n\n\nClaimsModule\n\nClaimsModule\n\nClaimsModule -->\n\nItemsModule->ClaimsModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nClaimsModule -->\n\nPaginationModule->ClaimsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nClaimsModule -->\n\nUsersModule->ClaimsModule\n\n\n\n\n\nClaimsService \n\nClaimsService \n\nClaimsService  -->\n\nClaimsModule->ClaimsService \n\n\n\n\n\nClaimsService\n\nClaimsService\n\nClaimsModule -->\n\nClaimsService->ClaimsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/claims/claims.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ItemsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Claim } from './claim.entity';\nimport { ClaimsController } from './claims.controller';\nimport { ClaimsService } from './providers/claims.service';\n\nimport { ItemsModule } from 'src/items/items.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    ItemsModule,\n    UsersModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([Claim]),\n  ],\n  controllers: [ClaimsController],\n  providers: [ClaimsService],\n  exports: [ClaimsService],\n})\nexport class ClaimsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimsService.html":{"url":"injectables/ClaimsService.html","title":"injectable - ClaimsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/providers/claims.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service dealing with claims. It is used to provide the claim data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                analytics\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(itemsService: ItemsService, usersService: UsersService, paginationProvider: PaginationProvider, claimRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/claims/providers/claims.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        itemsService\n                                                  \n                                                        \n                                                                        ItemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        analytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    analytics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/claims/providers/claims.service.ts:155\n                        \n                    \n\n\n            \n                \n                        The method to get claims analytics\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createClaimDto: CreateClaimDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/claims/providers/claims.service.ts:37\n                        \n                    \n\n\n            \n                \n                        The method to create a new item in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createClaimDto\n                                            \n                                                            CreateClaimDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: GetClaimsQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/claims/providers/claims.service.ts:81\n                        \n                    \n\n\n            \n                \n                        The method to get all claims from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetClaimsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GetClaimsQueryDto for getting queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Item[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/claims/providers/claims.service.ts:108\n                        \n                    \n\n\n            \n                \n                        The method to find a single claim by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Claim\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchClaimDto: PatchClaimDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/claims/providers/claims.service.ts:132\n                        \n                    \n\n\n            \n                \n                        The method to update a claim in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchClaimDto\n                                            \n                                                            PatchClaimDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Claim\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NotFoundException } from '@nestjs/common';\nimport { RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Claim } from '../claim.entity';\nimport { CreateClaimDto } from '../dtos/create-claim.dto';\nimport { GetClaimsQueryDto } from '../dtos/get-claims-query.dto';\nimport { PatchClaimDto } from '../dtos/patch-claim.dto';\n\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { ItemsService } from 'src/items/providers/items.service';\nimport { ItemStatus } from 'src/items/enums/itemStatus.enum';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service dealing with claims. It is used to provide the claim data.\n */\n@Injectable()\nexport class ClaimsService {\n  constructor(\n    private readonly itemsService: ItemsService,\n    private readonly usersService: UsersService,\n    private readonly paginationProvider: PaginationProvider,\n    @InjectRepository(Claim)\n    private readonly claimRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new item in the database\n   * @param createItemDto\n   * @returns Item\n   * @throws RequestTimeoutException\n   */\n  public async create(createClaimDto: CreateClaimDto): Promise {\n    // Find user by id\n    const user = await this.usersService.findOneById(createClaimDto.authorId);\n\n    // Find item by id\n    const item = await this.itemsService.findOneById(createClaimDto.itemId);\n\n    let newClaim: Claim;\n\n    try {\n      // Transaction to ensure atomicity\n      await this.claimRepository.manager.transaction(async (entityManager) => {\n        // Create and save the new claim\n        newClaim = this.claimRepository.create({\n          dateLost: createClaimDto.dateLost,\n          author: user,\n          item,\n        });\n        newClaim = await entityManager.save(newClaim);\n\n        // Update item status and associate claim\n        item.status = ItemStatus.PROCESSING;\n        item.claim = newClaim;\n        await entityManager.save(item);\n\n        // Update user with new claim\n        user.claims = user.claims ? [...user.claims, newClaim] : [newClaim];\n        await entityManager.save(user);\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save claim', {\n        description: 'Database connection error',\n      });\n    }\n\n    return newClaim;\n  }\n\n  /**\n   * The method to get all claims from the database\n   * @param query GetClaimsQueryDto for getting queries\n   * @returns Item[]\n   * @throws BadRequestException or RequestTimeoutException\n   */\n  public async findAll(query: GetClaimsQueryDto): Promise> {\n    const { page, limit, ...queries } = query;\n\n    const filters = Object.keys(queries).length ? queries : undefined;\n\n    try {\n      const claims = await this.paginationProvider.paginateQuery(\n        { limit, page },\n        this.claimRepository,\n        filters,\n        ['item'],\n      );\n\n      return claims;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n  }\n\n  /**\n   * The method to find a single claim by ID\n   * @param id\n   * @returns Claim\n   * @throws NotFoundException or RequestTimeoutException\n   */\n  public async findOneById(id: string): Promise {\n    let claim = undefined;\n\n    try {\n      claim = await this.claimRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!claim) {\n      throw new NotFoundException('Claim id does not exist');\n    }\n\n    return claim;\n  }\n\n  /**\n   * The method to update a claim in the database\n   * @param patchClaimDto\n   * @returns Claim\n   * @throws NotFoundException or RequestTimeoutException\n   */\n  public async update(patchClaimDto: PatchClaimDto): Promise {\n    const claim = await this.findOneById(patchClaimDto.id);\n\n    claim.status = patchClaimDto.status ?? claim.status;\n\n    let updatedClaim = claim;\n\n    try {\n      updatedClaim = await this.claimRepository.save(claim);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save item', {\n        description: 'Database connection error',\n      });\n    }\n\n    return updatedClaim;\n  }\n\n  /**\n   * The method to get claims analytics\n   * @returns object\n   * @throws RequestTimeoutException\n   */\n  public async analytics(): Promise {\n    let totalClaims = 0;\n\n    try {\n      totalClaims = await this.claimRepository.count();\n    } catch (error) {\n      throw new RequestTimeoutException('Failed to fetch claims count');\n    }\n\n    return totalClaims;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimDto.html":{"url":"classes/CreateClaimDto.html","title":"class - CreateClaimDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/create-claim.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the data transfer object for creating a claim.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                dateLost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                itemId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, format: 'string', description: 'The id of the user', example: 'ef456-gh789-ij012'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/create-claim.dto.ts:51\n                        \n                    \n\n            \n                \n                    The id of the user\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        dateLost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'date', required: true, format: 'date', description: 'Date item was lost', example: '2021-09-01'})@IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/create-claim.dto.ts:21\n                        \n                    \n\n            \n                \n                    Date item was lost\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        itemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, format: 'string', description: 'The id of the item', example: 'ab123-cd456-ef789'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/create-claim.dto.ts:36\n                        \n                    \n\n            \n                \n                    The id of the item\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsString, IsNotEmpty } from 'class-validator';\n\n/**\n * Represents the data transfer object for creating a claim.\n */\nexport class CreateClaimDto {\n  /**\n   * Date item was lost\n   * @example 2021-09-01\n   */\n  @ApiProperty({\n    type: 'date',\n    required: true,\n    format: 'date',\n    description: 'Date item was lost',\n    example: '2021-09-01',\n  })\n  @IsDate()\n  @IsNotEmpty()\n  readonly dateLost: Date;\n\n  /**\n   * The id of the item\n   * @example ab123-cd456-ef789\n   */\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    format: 'string',\n    description: 'The id of the item',\n    example: 'ab123-cd456-ef789',\n  })\n  @IsNotEmpty()\n  @IsString()\n  readonly itemId: string;\n\n  /**\n   * The id of the user\n   * @example ef456-gh789-ij012\n   */\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    format: 'string',\n    description: 'The id of the user',\n    example: 'ef456-gh789-ij012',\n  })\n  @IsNotEmpty()\n  @IsString()\n  readonly authorId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateItemDto.html":{"url":"classes/CreateItemDto.html","title":"class - CreateItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/create-item.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for creating an item\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                dateFound\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                locationFound\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'enum', required: true, format: 'enum', description: 'Category of item', example: 'ELECTRONICS'})@IsEnum(ItemCategory)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:43\n                        \n                    \n\n            \n                \n                    Item category\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        dateFound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'date', required: true, format: 'date', description: 'Date item was found', example: '2021-09-01'})@IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:122\n                        \n                    \n\n            \n                \n                    Date item was found\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false, format: 'string', description: 'Description of item', example: 'This is an iPhone 12 Pro.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:58\n                        \n                    \n\n            \n                \n                    Description of tag\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'url', required: true, format: 'url', description: 'Featured image URL of tag', example: 'https://example.com/image.jpg'})@IsUrl()@IsNotEmpty()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:89\n                        \n                    \n\n            \n                \n                    Item image URL\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        locationFound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, format: 'string', description: 'Location where item was found', example: 'Lagos'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:107\n                        \n                    \n\n            \n                \n                    Location where item was found\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, format: 'string', description: 'User name', example: 'iPhone 12 Pro'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:28\n                        \n                    \n\n            \n                \n                    Item name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'enum', required: true, format: 'enum', description: 'Status of item', example: 'UNCLAIMED'})@IsEnum(ItemStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/create-item.dto.ts:73\n                        \n                    \n\n            \n                \n                    Status of item\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsDate, IsString, IsUrl } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { MaxLength, MinLength } from 'class-validator';\n\nimport { ItemCategory } from '../enums/itemCategory.enum';\nimport { ItemStatus } from '../enums/itemStatus.enum';\n\n/**\n * Data transfer object for creating an item\n */\nexport class CreateItemDto {\n  /**\n   * Item name\n   * @example iPhone 12 Pro\n   */\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    format: 'string',\n    description: 'User name',\n    example: 'iPhone 12 Pro',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly name: string;\n\n  /**\n   * Item category\n   * @example ELECTRONICS\n   */\n  @ApiProperty({\n    type: 'enum',\n    required: true,\n    format: 'enum',\n    description: 'Category of item',\n    example: 'ELECTRONICS',\n  })\n  @IsEnum(ItemCategory)\n  @IsNotEmpty()\n  readonly category: ItemCategory;\n\n  /**\n   * Description of tag\n   * @example This is a description.\n   */\n  @ApiProperty({\n    type: 'string',\n    required: false,\n    format: 'string',\n    description: 'Description of item',\n    example: 'This is an iPhone 12 Pro.',\n  })\n  @IsString()\n  @IsOptional()\n  readonly description?: string;\n\n  /**\n   * Status of item\n   * @example UNCLAIMED\n   */\n  @ApiProperty({\n    type: 'enum',\n    required: true,\n    format: 'enum',\n    description: 'Status of item',\n    example: 'UNCLAIMED',\n  })\n  @IsEnum(ItemStatus)\n  @IsNotEmpty()\n  status: ItemStatus;\n\n  /**\n   * Item image URL\n   * @example https://example.com/image.jpg\n   */\n  @ApiProperty({\n    type: 'url',\n    required: true,\n    format: 'url',\n    description: 'Featured image URL of tag',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsUrl()\n  @IsNotEmpty()\n  @MaxLength(1024)\n  readonly imageUrl: string;\n\n  /**\n   * Location where item was found\n   * @example Lagos\n   */\n\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    format: 'string',\n    description: 'Location where item was found',\n    example: 'Lagos',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly locationFound: string;\n\n  /**\n   * Date item was found\n   * @example 2021-09-01\n   */\n  @ApiProperty({\n    type: 'date',\n    required: true,\n    format: 'date',\n    description: 'Date item was found',\n    example: '2021-09-01',\n  })\n  @IsDate()\n  @IsNotEmpty()\n  readonly dateFound: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for creating a user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email', example: 'johndoe@example.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    User email\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    User first name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User last name', example: 'Doe'})@IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:32\n                        \n                    \n\n            \n                \n                    User last name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123@'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:66\n                        \n                    \n\n            \n                \n                    User password\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone number', example: '08012345678'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:51\n                        \n                    \n\n            \n                \n                    User phone number\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User role', example: 'USER'})@IsEnum(UserRole)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:75\n                        \n                    \n\n            \n                \n                    User role\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsEmail, IsEnum } from 'class-validator';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { Matches, MaxLength, MinLength } from 'class-validator';\n\nimport { UserRole } from '../enums/user-role.enum';\n\n/**\n * Data transfer object for creating a user\n */\nexport class CreateUserDto {\n  /**\n   * User first name\n   * @example John\n   */\n  @ApiProperty({ description: 'User first name', example: 'John' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly firstName: string;\n\n  /**\n   * User last name\n   * @example Doe\n   */\n  @ApiPropertyOptional({ description: 'User last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly lastName?: string;\n\n  /**\n   * User email\n   * @example johndoe@example.com\n   */\n  @ApiProperty({ description: 'User email', example: 'johndoe@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  readonly email: string;\n\n  /**\n   * User phone number\n   * @example 08012345678\n   */\n  @ApiProperty({ description: 'User phone number', example: '08012345678' })\n  @IsString()\n  @IsNotEmpty()\n  readonly phoneNumber: string;\n\n  /**\n   * User password\n   * @example password123@\n   */\n  @ApiProperty({ description: 'User password', example: 'password123@' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  readonly password: string;\n\n  /**\n   * User role\n   * @example USER\n   */\n  @ApiPropertyOptional({ description: 'User role', example: 'USER' })\n  @IsEnum(UserRole)\n  @IsOptional()\n  readonly role?: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailService: MailService, hashingProvider: HashingProvider, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:27\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RequestTimeoutException, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { MailService } from 'src/mail/providers/mail.service';\nimport { generateVerifyToken } from 'src/utils';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    private readonly mailService: MailService,\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n  /**\n   * The method to create a new user in the database\n   * @param createUserDto\n   * @returns User\n   * @throws RequestTimeoutException or BadRequestException\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n\n    try {\n      // Connect to db to find user\n      existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      // Might save the details of the exception to db or log\n      // Information which is sensitive\n      throw new RequestTimeoutException(' ', {\n        description: 'Database connection error',\n      });\n    }\n\n    // Check if user already exists with same email\n    // Handle exception\n    if (existingUser) {\n      throw new BadRequestException('User already exists. Use another email.');\n    }\n\n    // prettier-ignore\n    const password = await this.hashingProvider.hashPassword(createUserDto.password);\n\n    const verifyToken = generateVerifyToken(32);\n\n    // Create User\n    let newUser = this.userRepository.create({ ...createUserDto, password, verifyToken }); // prettier-ignore\n\n    try {\n      // Connect to db to save new user\n      newUser = await this.userRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save user', {\n        description: 'Database connection error',\n      });\n    }\n\n    // Send welcome email\n    const subject = 'Welcome to Lost and Found!';\n    await this.mailService.sendUserWelcome(newUser, subject);\n    // await this.mailService.sendMailjetEmail(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable, map } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(private readonly configService: ConfigService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        return {\n          apiVersion: this.configService.get('appConfig.apiVersion'),\n          ...data,\n        };\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/response/interfaces/error-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  error: string;\n  message: string;\n  statusCode: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider for finding one user by email\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor of FindOneUserByEmailProvider\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:28\n                        \n                    \n\n\n            \n                \n                        Finds one user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { User } from '../user.entity';\n\n/**\n * Provider for finding one user by email\n */\n@Injectable()\nexport class FindOneUserByEmailProvider {\n  /**\n   * Constructor of FindOneUserByEmailProvider\n   * @param userRepository\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Finds one user by email\n   * @param email\n   * @returns User\n   * @throws UnauthorizedException or RequestTimeoutException\n   */\n  public async findOneByEmail(email: string): Promise {\n    let user: User | undefined = undefined;\n\n    try {\n      user = await this.userRepository.findOneBy({ email });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    // Check if user already exists with same email\n    // Handle exception\n    if (!user) {\n      throw new UnauthorizedException('User does not exist');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to generate tokens\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:48\n                        \n                    \n\n\n            \n                \n                        Generate tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                tokens\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: string, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:28\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Sign a token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                token\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService, JwtSignOptions } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\n\nimport jwtConfig from '../config/jwt.config';\nimport { IActiveUser } from '../interfaces/active-user.interface';\n\nimport { User } from 'src/users/user.entity';\n\n/**\n * Service to generate tokens\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Sign a token\n   * @param userId\n   * @param expiresIn\n   * @param payload\n   * @returns token\n   */\n  public async signToken(userId: string, expiresIn: number, payload?: T) {\n    const payloadData = { id: userId, ...payload };\n\n    const options: JwtSignOptions = {\n      audience: this.jwtConfiguration.audience,\n      issuer: this.jwtConfiguration.issuer,\n      secret: this.jwtConfiguration.secret,\n      expiresIn,\n    };\n\n    const accessToken = await this.jwtService.signAsync(payloadData, options);\n\n    return accessToken;\n  }\n\n  /**\n   * Generate tokens\n   * @param user\n   * @returns tokens\n   */\n  public async generateTokens(user: User) {\n    const payload: Partial = {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      phoneNumber: user.phoneNumber,\n      role: user.role,\n    };\n\n    const [accessToken, refreshToken] = await Promise.all([\n      this.signToken(user.id, this.jwtConfiguration.accessTokenTTL, payload),\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTTL),\n    ]);\n    return { accessToken, refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsBaseDto.html":{"url":"classes/GetClaimsBaseDto.html","title":"class - GetClaimsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/get-claims-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base Data transfer object for getting claims\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                authorName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dateLost\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        authorName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/get-claims-query.dto.ts:32\n                        \n                    \n\n            \n                \n                    The authorName query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dateLost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/get-claims-query.dto.ts:25\n                        \n                    \n\n            \n                \n                    The dateLost query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ClaimStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/get-claims-query.dto.ts:18\n                        \n                    \n\n            \n                \n                    The status query\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsISO8601, IsString } from 'class-validator';\nimport { IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { ClaimStatus } from '../enums/claimStatus.enum';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting claims\n */\nclass GetClaimsBaseDto {\n  /**\n   * The status query\n   */\n  @IsEnum(ClaimStatus)\n  @IsOptional()\n  status?: ClaimStatus;\n\n  /**\n   * The dateLost query\n   */\n  @IsISO8601()\n  @IsOptional()\n  dateLost?: Date;\n\n  /**\n   * The authorName query\n   */\n  @IsString()\n  @IsOptional()\n  authorName?: string;\n}\n\n/**\n * Final Data transfer object for getting items\n */\nexport class GetClaimsQueryDto extends IntersectionType(\n  GetClaimsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsParamDto.html":{"url":"classes/GetClaimsParamDto.html","title":"class - GetClaimsParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/get-claims-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Claims param DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Claim id', example: 1})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/get-claims-param.dto.ts:15\n                        \n                    \n\n            \n                \n                    Claim ID\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsOptional } from 'class-validator';\n\n/**\n * Claims param DTO\n */\nexport class GetClaimsParamDto {\n  /**\n   * Claim ID\n   * @example 1\n   */\n  @ApiPropertyOptional({ description: 'Claim id', example: 1 })\n  @IsString()\n  @IsOptional()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsQueryDto.html":{"url":"classes/GetClaimsQueryDto.html","title":"class - GetClaimsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/get-claims-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Final Data transfer object for getting items\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetClaimsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsISO8601, IsString } from 'class-validator';\nimport { IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { ClaimStatus } from '../enums/claimStatus.enum';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting claims\n */\nclass GetClaimsBaseDto {\n  /**\n   * The status query\n   */\n  @IsEnum(ClaimStatus)\n  @IsOptional()\n  status?: ClaimStatus;\n\n  /**\n   * The dateLost query\n   */\n  @IsISO8601()\n  @IsOptional()\n  dateLost?: Date;\n\n  /**\n   * The authorName query\n   */\n  @IsString()\n  @IsOptional()\n  authorName?: string;\n}\n\n/**\n * Final Data transfer object for getting items\n */\nexport class GetClaimsQueryDto extends IntersectionType(\n  GetClaimsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetItemsBaseDto.html":{"url":"classes/GetItemsBaseDto.html","title":"class - GetItemsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetItemsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/get-items-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base Data transfer object for getting items\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                from\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:33\n                        \n                    \n\n            \n                \n                    The category query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:41\n                        \n                    \n\n            \n                \n                    The start of the date range (from)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:19\n                        \n                    \n\n            \n                \n                    The search query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ItemStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:26\n                        \n                    \n\n            \n                \n                    The status query\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-query.dto.ts:49\n                        \n                    \n\n            \n                \n                    The end of the date range (to)\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEnum, IsString } from 'class-validator';\nimport { IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { ItemCategory } from '../enums/itemCategory.enum';\nimport { ItemStatus } from '../enums/itemStatus.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { Type } from 'class-transformer';\n\n/**\n * Base Data transfer object for getting items\n */\nclass GetItemsBaseDto {\n  /**\n   * The search query\n   */\n  @IsString()\n  @IsOptional()\n  search?: string;\n\n  /**\n   * The status query\n   */\n  @IsEnum(ItemStatus)\n  @IsOptional()\n  status?: ItemStatus;\n\n  /**\n   * The category query\n   */\n  @IsString()\n  @IsOptional()\n  category?: ItemCategory;\n\n  /**\n   * The start of the date range (from)\n   */\n  @IsDate()\n  @IsOptional()\n  @Type(() => Date)\n  from?: Date;\n\n  /**\n   * The end of the date range (to)\n   */\n  @IsDate()\n  @IsOptional()\n  @Type(() => Date)\n  to?: Date;\n}\n\n/**\n * Final Data transfer object for getting items\n */\nexport class GetItemsQueryDto extends IntersectionType(\n  GetItemsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetItemsParamDto.html":{"url":"classes/GetItemsParamDto.html","title":"class - GetItemsParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetItemsParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/get-items-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Items param DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Item id', example: 'id'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/get-items-param.dto.ts:15\n                        \n                    \n\n            \n                \n                    Claim ID\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsOptional } from 'class-validator';\n\n/**\n * Items param DTO\n */\nexport class GetItemsParamDto {\n  /**\n   * Claim ID\n   * @example \"id\"\n   */\n  @ApiPropertyOptional({ description: 'Item id', example: 'id' })\n  @IsString()\n  @IsOptional()\n  readonly id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetItemsQueryDto.html":{"url":"classes/GetItemsQueryDto.html","title":"class - GetItemsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetItemsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/get-items-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Final Data transfer object for getting items\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetItemsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEnum, IsString } from 'class-validator';\nimport { IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { ItemCategory } from '../enums/itemCategory.enum';\nimport { ItemStatus } from '../enums/itemStatus.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { Type } from 'class-transformer';\n\n/**\n * Base Data transfer object for getting items\n */\nclass GetItemsBaseDto {\n  /**\n   * The search query\n   */\n  @IsString()\n  @IsOptional()\n  search?: string;\n\n  /**\n   * The status query\n   */\n  @IsEnum(ItemStatus)\n  @IsOptional()\n  status?: ItemStatus;\n\n  /**\n   * The category query\n   */\n  @IsString()\n  @IsOptional()\n  category?: ItemCategory;\n\n  /**\n   * The start of the date range (from)\n   */\n  @IsDate()\n  @IsOptional()\n  @Type(() => Date)\n  from?: Date;\n\n  /**\n   * The end of the date range (to)\n   */\n  @IsDate()\n  @IsOptional()\n  @Type(() => Date)\n  to?: Date;\n}\n\n/**\n * Final Data transfer object for getting items\n */\nexport class GetItemsQueryDto extends IntersectionType(\n  GetItemsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersBaseDto.html":{"url":"classes/GetUsersBaseDto.html","title":"class - GetUsersBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base Data transfer object for getting users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-query.dto.ts:15\n                        \n                    \n\n            \n                \n                    The name query\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting users\n */\nclass GetUsersBaseDto {\n  /**\n   * The name query\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n}\n\n/**\n * Final Data transfer object for getting users\n */\nexport class GetUsersQueryDto extends IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for getting users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID', example: 'fgffg5-jdvj5'})@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:15\n                        \n                    \n\n            \n                \n                    User ID\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * DTO for getting users\n */\nexport class GetUsersParamDto {\n  /**\n   * User ID\n   * @example 1\n   */\n  @ApiPropertyOptional({ description: 'User ID', example: 'fgffg5-jdvj5' })\n  @IsInt()\n  @IsOptional()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersQueryDto.html":{"url":"classes/GetUsersQueryDto.html","title":"class - GetUsersQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Final Data transfer object for getting users\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\n/**\n * Base Data transfer object for getting users\n */\nclass GetUsersBaseDto {\n  /**\n   * The name query\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n}\n\n/**\n * Final Data transfer object for getting users\n */\nexport class GetUsersQueryDto extends IntersectionType(\n  GetUsersBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthController.html":{"url":"controllers/GoogleAuthController.html","title":"controller - GoogleAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-auth\n            \n\n\n            \n                Description\n            \n            \n                Controller for Google authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Google authenticate a user'})@ApiResponse({status: 200, description: 'User authenticted successfully'})@ApiBody({required: true, type: GoogleTokenDto, description: 'Google token'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-auth.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Route for handling Google authentication request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of GoogleTokenDto used to validate incoming POST request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post } from '@nestjs/common';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { GoogleAuthService } from './providers/google-auth.service';\nimport { Auth } from '../decorators/auth.decorator';\nimport { AuthType } from '../enums/auth-type.enum';\n\n/**\n * Controller for Google authentication\n */\n@Auth(AuthType.None)\n@Controller('auth/google-auth')\n@ApiTags('Auth')\nexport class GoogleAuthController {\n  constructor(\n    private readonly googleAuthenticationService: GoogleAuthService,\n  ) {}\n\n  /**\n   * Route for handling Google authentication request\n   * @param googleTokenDto An array of GoogleTokenDto used to validate incoming POST request\n   * @example HTTP POST /auth/google-auth\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Google authenticate a user' })\n  @ApiResponse({ status: 200, description: 'User authenticted successfully' })\n  @ApiBody({\n    required: true,\n    type: GoogleTokenDto,\n    description: 'Google token',\n  })\n  authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n    return this.googleAuthenticationService.authenticate(googleTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthService.html":{"url":"injectables/GoogleAuthService.html","title":"injectable - GoogleAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for Google authentication\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(generateTokensProvider: GenerateTokensProvider, usersService: UsersService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-auth.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Method to verify the Google token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-auth.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Method to initialize the OAuth2Client\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                void\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-auth.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\n\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\n\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service responsible for Google authentication\n */\n@Injectable()\nexport class GoogleAuthService implements OnModuleInit {\n  private oauthClient: OAuth2Client;\n\n  constructor(\n    private readonly generateTokensProvider: GenerateTokensProvider,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Method to initialize the OAuth2Client\n   * @description Initializes the OAuth2Client with the Google Client ID and Client Secret\n   * @returns void\n   */\n  onModuleInit() {\n    const clientId = this.jwtConfiguration.googleClientId;\n    const clientSecret = this.jwtConfiguration.googleClientSecret;\n    this.oauthClient = new OAuth2Client(clientId, clientSecret);\n  }\n\n  /**\n   * Method to verify the Google token\n   * @param token\n   * @returns string\n   */\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    const token = googleTokenDto.token;\n\n    try {\n      // Verify the Google Token Sent By User\n      const loginToken = await this.oauthClient.verifyIdToken({\n        idToken: token,\n      });\n\n      // Extract the payload from Google Token\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginToken.getPayload();\n\n      // Find the user in the database using the googleId\n      const user = await this.usersService.findOneByGoogleId(googleId);\n\n      // If user id found generate the tokens\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      } else {\n        // If not create a new user and generate the tokens\n        const userData = { email, googleId, firstName, lastName };\n        const newUser = await this.usersService.createGoogleUser(userData);\n        return await this.generateTokensProvider.generateTokens(newUser);\n      }\n    } catch (error) {\n      // throw Unauthorised exception if not Authorised\n      throw new UnauthorizedException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for Google token\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * Data transfer object for Google token\n */\n\nexport class GoogleTokenDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleUser.html":{"url":"interfaces/GoogleUser.html","title":"interface - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user-interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleUser {\n  email: string;\n  firstName: string;\n  lastName: string;\n  googleId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for hashing\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Service responsible for hashing\n */\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IActiveUser.html":{"url":"interfaces/IActiveUser.html","title":"interface - IActiveUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IActiveUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            phoneNumber\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoneNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phoneNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserRole } from 'src/users/enums/user-role.enum';\n\nexport interface IActiveUser {\n  id: string; // User id\n  firstName: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n  role: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Item.html":{"url":"entities/Item.html","title":"entity - Item","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Item\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/item.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Item Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                claim\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                dateFound\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                locationFound\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ItemCategory, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, claim => claim.item, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateFound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locationFound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ItemStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/item.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { JoinColumn, OneToOne } from 'typeorm';\n\nimport { ItemCategory } from './enums/itemCategory.enum';\nimport { ItemStatus } from './enums/itemStatus.enum';\n\nimport { Claim } from 'src/claims/claim.entity';\n\n/**\n * Item Entity\n * @description Represents the schema of an Item\n */\n@Entity()\nexport class Item {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  name: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: false })\n  imageUrl: string;\n\n  @Column({ type: 'enum', enum: ItemCategory, nullable: false })\n  category: ItemCategory;\n\n  @Column({ type: 'varchar', length: 96, nullable: true, default: null })\n  description?: string;\n\n  @Column({\n    type: 'enum',\n    enum: ItemStatus,\n    nullable: false,\n    default: ItemStatus.UNCLAIMED,\n  })\n  status: ItemStatus;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  locationFound: string;\n\n  @Column({ type: 'date', nullable: false })\n  dateFound: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToOne(() => Claim, (claim) => claim.item, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  claim: Claim;\n\n  // Add any additional methods or decorators as needed\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ItemsAnalyticsProvider.html":{"url":"injectables/ItemsAnalyticsProvider.html","title":"injectable - ItemsAnalyticsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ItemsAnalyticsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/providers/items-analytics.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service dealing with items analytics. It is used to provide the item analytics data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                analytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(itemsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/items/providers/items-analytics.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        itemsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        analytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    analytics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items-analytics.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Item } from '../item.entity';\n\n/**\n * Service dealing with items analytics. It is used to provide the item analytics data.\n */\n@Injectable()\nexport class ItemsAnalyticsProvider {\n  // This is a placeholder class for a real analytics provider\n  // that would be used to track analytics for the items module\n  // and its related entities\n  constructor(\n    @InjectRepository(Item) private readonly itemsRepository: Repository,\n  ) {}\n\n  public async analytics(): Promise {\n    let totalItems = 0;\n\n    try {\n      totalItems = await this.itemsRepository.count().catch((error) => {\n        console.error('Items error: ', error);\n        return 0; // Return 0 if it fails\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Failed to fetch items count');\n    }\n\n    return totalItems;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ItemsController.html":{"url":"controllers/ItemsController.html","title":"controller - ItemsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ItemsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/items.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                items\n            \n\n\n            \n                Description\n            \n            \n                Controller for items\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createItem\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getItem\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getItems\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    createItem(createItemDto: CreateItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new item'})@ApiResponse({status: 201, description: 'Item created successfully'})@ApiBody({required: true, type: CreateItemDto, description: 'Item creation details'})\n                \n            \n\n                    \n                        \n                            Defined in src/items/items.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Route for handling create item request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createItemDto\n                                            \n                                                            CreateItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming POST request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(getItemsParamsDto: GetItemsParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get an item by id'})@ApiResponse({status: 200, description: 'Item fetched successfully'})@ApiParam({name: 'getItemsParamsDto', required: true, type: GetItemsParamDto, description: 'Items Param DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/items/items.controller.ts:80\n                        \n                    \n\n\n            \n                \n                        Route for handling get item request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getItemsParamsDto\n                                            \n                                                            GetItemsParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request params\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Items\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getItems\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItems(getItemsQueryDto: GetItemsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all items'})@ApiResponse({status: 200, description: 'Items fetched successfully'})@ApiQuery({name: 'getItemsQueryDto', required: false, type: GetItemsQueryDto, description: 'Items Query DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/items/items.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Route for handling get items request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getItemsQueryDto\n                                            \n                                                            GetItemsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Items[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateItem(patchItemDto: PatchItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Update a item'})@ApiResponse({status: 200, description: 'Item updated successfully'})@ApiBody({required: true, type: PatchItemDto, description: 'Item update details'})\n                \n            \n\n                    \n                        \n                            Defined in src/items/items.controller.ts:99\n                        \n                    \n\n\n            \n                \n                        Route for handling patch item request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchItemDto\n                                            \n                                                            PatchItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming PATCH request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Query } from '@nestjs/common';\nimport { Body, Get, Patch, Post } from '@nestjs/common';\nimport { ApiBody, ApiParam, ApiQuery, ApiTags } from '@nestjs/swagger';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\nimport { CreateItemDto } from './dtos/create-item.dto';\nimport { GetItemsQueryDto } from './dtos/get-items-query.dto';\nimport { GetItemsParamDto } from './dtos/get-items-param.dto';\nimport { PatchItemDto } from './dtos/patch-item.dto';\nimport { ItemsService } from './providers/items.service';\n\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\n\n/**\n * Controller for items\n */\n\n@ApiBearerAuth()\n@Controller('items')\n@ApiTags('Items')\nexport class ItemsController {\n  constructor(private readonly itemsService: ItemsService) {}\n\n  /**\n   * Route for handling create item request\n   * @param createItemDto A DTO used to validate incoming POST request\n   * @example HTTP POST /item\n   * @returns response\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new item' })\n  @ApiResponse({ status: 201, description: 'Item created successfully' })\n  @ApiBody({\n    required: true,\n    type: CreateItemDto,\n    description: 'Item creation details',\n  })\n  public async createItem(@Body() createItemDto: CreateItemDto) {\n    const item = await this.itemsService.create(createItemDto);\n    return createSuccessResponse('Item created successfully', true, item);\n  }\n\n  /**\n   * Route for handling get items request\n   * @param getItemsQueryDto A DTO used to validate incoming GET request queries\n   * @example HTTP GET /items\n   * @returns Items[]\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all items' })\n  @ApiResponse({ status: 200, description: 'Items fetched successfully' })\n  @ApiQuery({\n    name: 'getItemsQueryDto',\n    required: false,\n    type: GetItemsQueryDto,\n    description: 'Items Query DTO',\n    example: { page: 1, limit: 10 },\n  })\n  public async getItems(@Query() getItemsQueryDto: GetItemsQueryDto) {\n    const items = await this.itemsService.findAll(getItemsQueryDto);\n    return items;\n  }\n\n  /**\n   * Route for handling get item request\n   * @param getItemsParamsDto A DTO used to validate incoming GET request params\n   * @example HTTP GET /items/1\n   * @returns Items\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get an item by id' })\n  @ApiResponse({ status: 200, description: 'Item fetched successfully' })\n  @ApiParam({\n    name: 'getItemsParamsDto',\n    required: true,\n    type: GetItemsParamDto,\n    description: 'Items Param DTO',\n    example: { id: 1 },\n  })\n  public async getItem(@Param() getItemsParamsDto: GetItemsParamDto) {\n    const item = await this.itemsService.findOneById(getItemsParamsDto.id);\n    return createSuccessResponse('Item fetched successfully', true, item);\n  }\n\n  /**\n   * Route for handling patch item request\n   * @param patchItemDto A DTO used to validate incoming PATCH request\n   * @example HTTP PATCH /item\n   * @returns response\n   */\n  @Patch()\n  @ApiOperation({ summary: 'Update a item' })\n  @ApiResponse({ status: 200, description: 'Item updated successfully' })\n  @ApiBody({\n    required: true,\n    type: PatchItemDto,\n    description: 'Item update details',\n  })\n  public async updateItem(@Body() patchItemDto: PatchItemDto) {\n    const item = await this.itemsService.update(patchItemDto);\n    return createSuccessResponse('Item updated successfully', true, item);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ItemsModule.html":{"url":"modules/ItemsModule.html","title":"module - ItemsModule","body":"\n                   \n\n\n\n\n    Modules\n    ItemsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ItemsModule\n\n\n\ncluster_ItemsModule_imports\n\n\n\ncluster_ItemsModule_providers\n\n\n\ncluster_ItemsModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nItemsModule\n\nItemsModule\n\nItemsModule -->\n\nPaginationModule->ItemsModule\n\n\n\n\n\nItemsService \n\nItemsService \n\nItemsService  -->\n\nItemsModule->ItemsService \n\n\n\n\n\nItemsService\n\nItemsService\n\nItemsModule -->\n\nItemsService->ItemsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/items/items.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ItemsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ItemsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ItemsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { Item } from './item.entity';\nimport { ItemsController } from './items.controller';\nimport { ItemsService } from './providers/items.service';\n\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  imports: [\n    PaginationModule,\n    TypeOrmModule.forFeature([Item]),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [ItemsController],\n  providers: [ItemsService],\n  exports: [ItemsService],\n})\nexport class ItemsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ItemsService.html":{"url":"injectables/ItemsService.html","title":"injectable - ItemsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ItemsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/providers/items.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service dealing with items. It is used to provide the item data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                analytics\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paginationProvider: PaginationProvider, itemsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/items/providers/items.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        itemsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        analytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    analytics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:178\n                        \n                    \n\n\n            \n                \n                        The method to get items analytics\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createItemDto: CreateItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:34\n                        \n                    \n\n\n            \n                \n                        The method to create a new item in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createItemDto\n                                            \n                                                            CreateItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: GetItemsQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:56\n                        \n                    \n\n\n            \n                \n                        The method to get all items from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetItemsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GetItemsQueryDto for getting queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Item[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:125\n                        \n                    \n\n\n            \n                \n                        The method to find a single item by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchItemDto: PatchItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/items/providers/items.service.ts:149\n                        \n                    \n\n\n            \n                \n                        The method to update an item in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchItemDto\n                                            \n                                                            PatchItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Item\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NotFoundException } from '@nestjs/common';\nimport { RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOperator, Repository } from 'typeorm';\nimport { Between, LessThanOrEqual, ILike, MoreThanOrEqual } from 'typeorm';\n\nimport { Item } from '../item.entity';\nimport { CreateItemDto } from '../dtos/create-item.dto';\nimport { PatchItemDto } from '../dtos/patch-item.dto';\nimport { GetItemsQueryDto } from '../dtos/get-items-query.dto';\nimport { ItemCategory } from '../enums/itemCategory.enum';\nimport { ItemStatus } from '../enums/itemStatus.enum';\n\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n/**\n * Service dealing with items. It is used to provide the item data.\n */\n@Injectable()\nexport class ItemsService {\n  constructor(\n    private readonly paginationProvider: PaginationProvider,\n    @InjectRepository(Item) private readonly itemsRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new item in the database\n   * @param createItemDto\n   * @returns Item\n   * @throws RequestTimeoutException\n   */\n  public async create(createItemDto: CreateItemDto): Promise {\n    // Create Item\n    let newItem = this.itemsRepository.create(createItemDto);\n\n    try {\n      // Connect to db to save new item\n      newItem = await this.itemsRepository.save(newItem);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save item', {\n        description: 'Database connection error',\n      });\n    }\n\n    return newItem;\n  }\n\n  /**\n   * The method to get all items from the database\n   * @param query GetItemsQueryDto for getting queries\n   * @returns Item[]\n   * @throws BadRequestException or RequestTimeoutException\n   */\n  public async findAll(query: GetItemsQueryDto): Promise> {\n    const { page, limit, search, from, to, ...otherQueries } = query;\n\n    // Create the ILike query for partial matching on the 'name' field\n    const name = search ? ILike(`%${search}%`) : undefined;\n    const itemQueries = search ? { ...otherQueries, name } : otherQueries;\n\n    // Filter out undefined, empty string values, and FindOperator instances\n    const filteredQueries = Object.entries(itemQueries).filter(([, value]) => {\n      // Skip undefined values\n      if (value === undefined) return false;\n\n      // If value is a string, check if it's empty\n      if (typeof value === 'string') {\n        return value.trim() !== ''; // Only keep non-empty strings\n      }\n\n      // If value is a FindOperator, allow it\n      if (value instanceof FindOperator) {\n        return true;\n      }\n\n      // Check for valid enum values (ItemCategory or ItemStatus)\n      if (\n        Object.values(ItemCategory).includes(value as ItemCategory) ||\n        Object.values(ItemStatus).includes(value as ItemStatus)\n      ) {\n        return true;\n      }\n\n      // Allow numbers\n      return typeof value === 'number';\n    });\n\n    // Rebuild the filtered object from entries\n    const filters: { [key: string]: any } = Object.fromEntries(filteredQueries);\n\n    // Add date range filtering in a simple way\n    if (from && to) {\n      filters.dateFound = Between(from, to);\n    } else if (from) {\n      filters.dateFound = MoreThanOrEqual(from);\n    } else if (to) {\n      filters.dateFound = LessThanOrEqual(to);\n    }\n\n    try {\n      // Pass the pagination params and filtered queries to the repository\n      const items = await this.paginationProvider.paginateQuery(\n        { limit, page },\n        this.itemsRepository,\n        filters,\n        ['claim'],\n      );\n\n      return items;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n  }\n\n  /**\n   * The method to find a single item by ID\n   * @param id\n   * @returns Item\n   * @throws NotFoundException or RequestTimeoutException\n   */\n  public async findOneById(id: string): Promise {\n    let item = undefined;\n\n    try {\n      item = await this.itemsRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!item) {\n      throw new NotFoundException('Item id does not exist');\n    }\n\n    return item;\n  }\n\n  /**\n   * The method to update an item in the database\n   * @param patchItemDto\n   * @returns Item\n   * @throws NotFoundException or RequestTimeoutException\n   */\n  public async update(patchItemDto: PatchItemDto): Promise {\n    const item = await this.findOneById(patchItemDto.id);\n\n    item.name = patchItemDto.name ?? item.name;\n    item.category = patchItemDto.category ?? item.category;\n    item.description = patchItemDto.description ?? item.description;\n    item.status = patchItemDto.status ?? item.status;\n    item.imageUrl = patchItemDto.imageUrl ?? item.imageUrl;\n    item.locationFound = patchItemDto.locationFound ?? item.locationFound;\n    item.dateFound = patchItemDto.dateFound ?? item.dateFound;\n\n    let updatedItem = item;\n\n    try {\n      updatedItem = await this.itemsRepository.save(item);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save item', {\n        description: 'Database connection error',\n      });\n    }\n\n    return updatedItem;\n  }\n\n  /**\n   * The method to get items analytics\n   * @returns object\n   * @throws RequestTimeoutException\n   */\n  public async analytics(): Promise {\n    let totalItems = 0;\n\n    try {\n      totalItems = await this.itemsRepository.count();\n    } catch (error) {\n      throw new RequestTimeoutException('Failed to fetch items count');\n    }\n\n    return totalItems;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\n\nimport { AuthService } from '../providers/auth.service';\nimport { LoginDto } from '../dtos/login.dto';\n\nimport { User } from 'src/users/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(loginDto: LoginDto): Promise {\n    const user = await this.authService.validateUser(loginDto);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for logging in\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, required: true, format: 'email', description: 'The email of the user', example: 'johndoe@example.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.dto.ts:21\n                        \n                    \n\n            \n                \n                    The email of the user\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, required: true, description: 'The password of the user', example: 'password123@'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.dto.ts:35\n                        \n                    \n\n            \n                \n                    The password of the user\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * Data transfer object for logging in\n */\nexport class LoginDto {\n  /**\n   * The email of the user\n   * @example johndoe@example.com\n   */\n  @ApiProperty({\n    type: String,\n    required: true,\n    format: 'email',\n    description: 'The email of the user',\n    example: 'johndoe@example.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * The password of the user\n   * @example Password123@\n   */\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'The password of the user',\n    example: 'password123@',\n  })\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginProvider.html":{"url":"injectables/LoginProvider.html","title":"injectable - LoginProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/login.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Login provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                adminLogin\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(generateTokensProvider: GenerateTokensProvider, hashingProvider: HashingProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/login.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        adminLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminLogin(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/login.provider.ts:67\n                        \n                    \n\n\n            \n                \n                        Sign in an admin\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/login.provider.ts:29\n                        \n                    \n\n\n            \n                \n                        Sign in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\n\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { HashingProvider } from './hashing.provider';\nimport { LoginDto } from '../dtos/login.dto';\n\nimport { UserRole } from 'src/users/enums/user-role.enum';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Login provider\n */\n@Injectable()\nexport class LoginProvider {\n  constructor(\n    private readonly generateTokensProvider: GenerateTokensProvider,\n    private readonly hashingProvider: HashingProvider,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Sign in a user\n   * @param loginDto\n   * @returns boolean\n   * @throws RequestTimeoutException or UnauthorizedException\n   */\n  public async login(loginDto: LoginDto) {\n    // Find user by email\n    const user = await this.usersService.findOneByEmail(loginDto.email);\n\n    const isEmailVerified = user.isEmailVerified;\n\n    // Compare password hash\n    let isMatch: boolean = false;\n\n    try {\n      // prettier-ignore\n      isMatch = await this.hashingProvider.comparePassword(loginDto.password, user.password);\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Failed to compare passowrd',\n      });\n    }\n\n    if (!isMatch) {\n      throw new UnauthorizedException('Incorect password');\n    }\n\n    if (!isEmailVerified) {\n      throw new UnauthorizedException('Email not verified');\n    }\n\n    // Generate access token and refresh token\n    const tokens = await this.generateTokensProvider.generateTokens(user);\n\n    return tokens;\n  }\n\n  /**\n   * Sign in an admin\n   * @param loginDto\n   * @returns boolean\n   * @throws RequestTimeoutException or UnauthorizedException\n   */\n  public async adminLogin(loginDto: LoginDto) {\n    // Find user by email\n    const user = await this.usersService.findOneByEmail(loginDto.email);\n\n    // Compare password hash\n    let isMatch: boolean = false;\n\n    try {\n      // prettier-ignore\n      isMatch = await this.hashingProvider.comparePassword(loginDto.password, user.password);\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Failed to compare passowrd',\n      });\n    }\n\n    if (!isMatch) {\n      throw new UnauthorizedException('Incorect password');\n    }\n\n    if (user.role === UserRole.USER) {\n      throw new UnauthorizedException('Not authorized to login as user');\n    }\n\n    // Generate access token and refresh token\n    const tokens = await this.generateTokensProvider.generateTokens(user);\n\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MailController.html":{"url":"controllers/MailController.html","title":"controller - MailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mail\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                sendMailjetEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendMailjetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMailjetEmail(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('mailjet')\n                \n            \n\n                    \n                        \n                            Defined in src/mail/mail.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { MailService } from './providers/mail.service';\n\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { CreateUserDto } from 'src/users/dtos/create-user.dto';\n\n@Auth(AuthType.None)\n@Controller('mail')\n@ApiTags('Mail')\nexport class MailController {\n  constructor(private readonly mailService: MailService) {}\n\n  @Post('mailjet')\n  async sendMailjetEmail(@Body() createUserDto: CreateUserDto) {\n    return await this.mailService.sendMailjetEmail(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailjetProvider \n\nMailjetProvider \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\nMailjetProvider  -->\n\nMailModule->MailjetProvider \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMailjetProvider\n\nMailjetProvider\n\nMailModule -->\n\nMailjetProvider->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                        \n                            MailjetProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MailController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                        \n                            MailjetProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\nimport { join } from 'path';\n\nimport { MailController } from './mail.controller';\nimport { MailService } from './providers/mail.service';\nimport { MailjetProvider } from './providers/mailjet.provider';\n\n@Global()\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          host: config.get('appConfig.mailHost'),\n          port: config.get('appConfig.mailPort'),\n          secure: false,\n          auth: {\n            user: config.get('appConfig.mailjetApiKey'),\n            pass: config.get('appConfig.mailjetSecretKey'),\n          },\n          timeout: 5000,\n        },\n        defaults: {\n          from: `\"Lost and Found\" `,\n        },\n        template: {\n          dir: join(__dirname, '../../mail', 'templates'),\n          adapter: new EjsAdapter({ inlineCssEnabled: true }),\n          options: {\n            strict: false,\n            cache: false,\n          },\n        },\n      }),\n    }),\n  ],\n  controllers: [MailController],\n  providers: [MailService, MailjetProvider],\n  exports: [MailService, MailjetProvider],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for sending emails to users\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMailjetEmail\n                            \n                            \n                                    Async\n                                sendUserWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, mailjetProvider: MailjetProvider)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailjetProvider\n                                                  \n                                                        \n                                                                        MailjetProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMailjetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMailjetEmail(user: CreateUserDto | User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto | User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendUserWelcome\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendUserWelcome(user: User, subject: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Send welcome email to user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nuser to send email to\n\n\n                                            \n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                void\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\n\nimport { MailjetProvider } from './mailjet.provider';\nimport { CreateUserDto } from 'src/users/dtos/create-user.dto';\nimport { User } from 'src/users/user.entity';\n\n/**\n * Service for sending emails to users\n */\n@Injectable()\nexport class MailService {\n  constructor(\n    private readonly mailerService: MailerService,\n    private readonly mailjetProvider: MailjetProvider,\n  ) {}\n\n  /**\n   * Send welcome email to user\n   * @param user - user to send email to\n   * @returns void\n   */\n  async sendUserWelcome(user: User, subject: string): Promise {\n    try {\n      await this.mailerService.sendMail({\n        to: user.email,\n        subject,\n        // `.ejs` extension is appended automatically to template\n        template: './welcome',\n        // Context is available in email template\n        context: {\n          name: user.firstName,\n          email: user.email,\n          verifyToken: user.verifyToken,\n        },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  async sendMailjetEmail(user: CreateUserDto | User): Promise {\n    const to = user.email;\n    const subject = 'Welcome to Lost and Found!';\n    const context = { name: user.firstName };\n\n    return await this.mailjetProvider.sendMailjetEmail(to, subject, context); // prettier-ignore\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailjetProvider.html":{"url":"injectables/MailjetProvider.html","title":"injectable - MailjetProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailjetProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mailjet.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Mailjet provider\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                mailjet\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMailjetEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mailjet.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMailjetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMailjetEmail(to: string, subject: string, context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mailjet.provider.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mailjet\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mailjet.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/mail/providers/mailjet.provider.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Mailjet from 'node-mailjet';\n\n/**\n * Mailjet provider\n */\n@Injectable()\nexport class MailjetProvider {\n  private readonly mailjet: Mailjet.Client;\n\n  constructor(private readonly configService: ConfigService) {\n    this.mailjet = Mailjet.Client.apiConnect(\n      this.configService.get('appConfig.mailjetApiKey'),\n      this.configService.get('appConfig.mailjetSecretKey'),\n    );\n  }\n\n  async sendMailjetEmail(to: string, subject: string, context: any) {\n    try {\n      const request = this.mailjet.post('send', { version: 'v3.1' }).request({\n        Messages: [\n          {\n            From: {\n              Email: 'jesse.juwe@gotrustcrow.com', // Verified email address\n              Name: 'Meekness',\n            },\n            To: [\n              {\n                Email: to,\n                Name: context.name,\n              },\n            ],\n            Subject: subject,\n            TemplateID: 6287072, // Mailjet template ID\n            TemplateLanguage: true,\n            TextPart: subject,\n            Variables: { name: context.name, token: context.token },\n          },\n        ],\n      });\n\n      const result = await request;\n      return result.body;\n    } catch (error) {\n      console.error('Error sending email:', error);\n      throw new Error('Failed to send email');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiVersion\n                                        \n                                \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiVersion\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiVersion:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  apiVersion?: string;\n  message: string;\n  success: boolean;\n  data: T[];\n  meta: {\n    limit: number;\n    total: number;\n    page: number;\n    pages: number;\n  };\n\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository, queryConditions?: FindOptionsWhere, relations?: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryConditions\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                relations\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { FindOptionsWhere, ObjectLiteral, Repository } from 'typeorm';\n\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(REQUEST) private readonly request: Request,\n  ) {}\n\n  public async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    queryConditions?: FindOptionsWhere,\n    relations?: string[],\n  ): Promise> {\n    const { limit, page } = paginationQuery;\n    let results: T[] = [];\n\n    try {\n      const found = await repository.find({\n        where: queryConditions,\n        relations: relations || [],\n        skip: (page - 1) * limit,\n        take: limit,\n      });\n\n      if (found) {\n        results = found;\n      }\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n\n    const protocol = this.request.protocol;\n    const host = this.request.headers.host;\n    const baseURL = `${protocol}://${host}/`;\n    const newUrl = new URL(this.request.url, baseURL);\n    const { origin, pathname } = newUrl;\n\n    const total = await repository.count({ where: queryConditions });\n    const pages = Math.ceil(total / limit);\n    const nextPage = page === pages ? page : page + 1;\n    const previousPage = page === 1 ? page : page - 1;\n\n    const response: Paginated = {\n      apiVersion: this.configService.get('appConfig.apiVersion'),\n      message: `Data fetched successfully`,\n      success: true,\n      data: results,\n      meta: { page, limit, total, pages },\n      links: {\n        first: `${origin}${pathname}?limit=${limit}&page=1`,\n        last: `${origin}${pathname}?limit=${limit}&page=${pages}`,\n        current: `${origin}${pathname}?limit=${limit}&page=${page}`,\n        next: `${origin}${pathname}?limit=${limit}&page=${nextPage}`,\n        previous: `${origin}${pathname}?limit=${limit}&page=${previousPage}`,\n      },\n    };\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive, Min } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  @Min(1)\n  limit?: number = 10;\n\n  @IsOptional()\n  @IsPositive()\n  @Min(1)\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchClaimDto.html":{"url":"classes/PatchClaimDto.html","title":"class - PatchClaimDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchClaimDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dtos/patch-claim.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the data transfer object for patching an item.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateClaimDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, readOnly: true, format: 'string', description: 'The ID of the item', example: 'id'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/patch-claim.dto.ts:25\n                        \n                    \n\n            \n                \n                    The ID of the item.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'enum', required: true, format: 'enum', description: 'Status of claim', example: 'DECLINED'})@IsEnum(ClaimStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/claims/dtos/patch-claim.dto.ts:40\n                        \n                    \n\n            \n                \n                    Status of claim\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsString } from 'class-validator';\n\nimport { CreateClaimDto } from './create-claim.dto';\nimport { ClaimStatus } from '../enums/claimStatus.enum';\n\n/**\n * Represents the data transfer object for patching an item.\n */\nexport class PatchClaimDto extends PartialType(CreateClaimDto) {\n  /**\n   * The ID of the item.\n   * @example id\n   */\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    readOnly: true,\n    format: 'string',\n    description: 'The ID of the item',\n    example: 'id',\n  })\n  @IsString()\n  @IsNotEmpty()\n  readonly id: string;\n\n  /**\n   * Status of claim\n   * @example DECLINED\n   */\n  @ApiProperty({\n    type: 'enum',\n    required: true,\n    format: 'enum',\n    description: 'Status of claim',\n    example: 'DECLINED',\n  })\n  @IsEnum(ClaimStatus)\n  @IsNotEmpty()\n  status: ClaimStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchItemDto.html":{"url":"classes/PatchItemDto.html","title":"class - PatchItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/items/dtos/patch-item.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the data transfer object for patching an item.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateItemDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, readOnly: true, format: 'string', description: 'The ID of the item', example: 'id'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/items/dtos/patch-item.dto.ts:24\n                        \n                    \n\n            \n                \n                    The ID of the item.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nimport { CreateItemDto } from './create-item.dto';\n\n/**\n * Represents the data transfer object for patching an item.\n */\nexport class PatchItemDto extends PartialType(CreateItemDto) {\n  /**\n   * The ID of the item.\n   * @example 1\n   */\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    readOnly: true,\n    format: 'string',\n    description: 'The ID of the item',\n    example: 'id',\n  })\n  @IsString()\n  @IsNotEmpty()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for updating a user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: true, readOnly: true, format: 'string', description: 'The ID of the user', example: 1})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/patch-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    The ID of the user.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * Data transfer object (DTO) for updating a user.\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n  /**\n   * The ID of the user.\n   * @example dfej45-3fj3-3fj3-3fj3\n   */\n  @ApiProperty({\n    type: 'string',\n    required: true,\n    readOnly: true,\n    format: 'string',\n    description: 'The ID of the user',\n    example: 1,\n  })\n  @IsString()\n  @IsNotEmpty()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Refresh token DTO class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, required: true, example: 'asaae4223e', description: 'Refresh token of the user'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:21\n                        \n                    \n\n            \n                \n                    Token of the user\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * Refresh token DTO class\n * @description Data transfer object for refreshing token\n */\nexport class RefreshTokenDto {\n  /**\n   * Token of the user\n   * @example asaae4223e\n   */\n  @ApiProperty({\n    type: String,\n    required: true,\n    example: 'asaae4223e',\n    description: 'Refresh token of the user',\n  })\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Confirm password', example: 'password123@'})@IsNotEmpty()@Equals('password', {message: 'Passwords do not match'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:61\n                        \n                    \n\n            \n                \n                    Confirm password\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email', example: 'johndoe@example.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:28\n                        \n                    \n\n            \n                \n                    User email\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User name', example: 'John Doe'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:18\n                        \n                    \n\n            \n                \n                    User name\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123@'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:52\n                        \n                    \n\n            \n                \n                    User password\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone number', example: '08012345678'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register.dto.ts:37\n                        \n                    \n\n            \n                \n                    User phone number\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsEmail, IsString } from 'class-validator';\nimport { MaxLength, Matches, MinLength, Equals } from 'class-validator';\n\n/**\n * Data transfer object for user registration\n */\nexport class RegisterDto {\n  /**\n   * User name\n   * @example John Doe\n   */\n  @ApiProperty({ description: 'User name', example: 'John Doe' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  readonly name: string;\n\n  /**\n   * User email\n   * @example johndoe@example.com\n   */\n  @ApiProperty({ description: 'User email', example: 'johndoe@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  readonly email: string;\n\n  /**\n   * User phone number\n   * @example 08012345678\n   */\n  @ApiProperty({ description: 'User phone number', example: '08012345678' })\n  @IsString()\n  @IsNotEmpty()\n  readonly phoneNumber: string;\n\n  /**\n   * User password\n   * @example password123@\n   */\n  @ApiProperty({ description: 'User password', example: 'password123@' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  readonly password: string;\n\n  /**\n   * Confirm password\n   * @example password123@\n   */\n  @ApiProperty({ description: 'Confirm password', example: 'password123@' })\n  @IsNotEmpty()\n  @Equals('password', { message: 'Passwords do not match' })\n  readonly confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SuccessResponse.html":{"url":"interfaces/SuccessResponse.html","title":"interface - SuccessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SuccessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/response/interfaces/success-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SuccessResponse {\n  message: string;\n  success: boolean;\n  data: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateUserProvider.html":{"url":"injectables/UpdateUserProvider.html","title":"injectable - UpdateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/update-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashingProvider: HashingProvider, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/update-user.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(patchUserDto: PatchUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/update-user.provider.ts:25\n                        \n                    \n\n\n            \n                \n                        The method to update a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RequestTimeoutException, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { User } from '../user.entity';\nimport { PatchUserDto } from '../dtos/patch-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class UpdateUserProvider {\n  constructor(\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * The method to update a new user in the database\n   * @param patchUserDto\n   * @returns User\n   * @throws RequestTimeoutException or BadRequestException\n   */\n  public async updateUser(patchUserDto: PatchUserDto): Promise {\n    const { id } = patchUserDto;\n\n    let user = undefined;\n\n    try {\n      user = await this.userRepository.findOne({ where: { id } });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!user) {\n      throw new BadRequestException('User does not exist');\n    }\n\n    const password = patchUserDto.password\n      ? await this.hashingProvider.hashPassword(patchUserDto.password)\n      : user.password;\n\n    user.firstName = patchUserDto.firstName ?? user.firstName;\n    user.lastName = patchUserDto.lastName ?? user.lastName;\n    user.email = patchUserDto.email ?? user.email;\n    user.role = patchUserDto.role ?? user.role;\n    user.phoneNumber = patchUserDto.phoneNumber ?? user.phoneNumber;\n    user.password = password;\n\n    try {\n      await this.userRepository.save(user);\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to save user', {\n        description: 'Database connection error',\n      });\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Upload.html":{"url":"entities/Upload.html","title":"entity - Upload","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/upload.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Upload entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 128, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: FileTypes, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\nimport { FileTypes } from './enums/file-types.enum';\n\n/**\n * Upload entity\n */\n@Entity()\nexport class Upload {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: false })\n  name: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: false })\n  path: string;\n\n  @Column({\n    type: 'enum',\n    enum: FileTypes,\n    default: FileTypes.IMAGE,\n    nullable: false,\n  })\n  type: FileTypes;\n\n  @Column({ type: 'varchar', length: 128, nullable: false })\n  mime: string;\n\n  @Column({ type: 'varchar', length: 1024, nullable: false })\n  size: number;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadFile.html":{"url":"interfaces/UploadFile.html","title":"interface - UploadFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/interfaces/upload-file.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         FileTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileTypes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FileTypes } from '../enums/file-types.enum';\n\nexport interface UploadFile {\n  name: string;\n  path: string;\n  type: FileTypes;\n  mime: string;\n  size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/upload-to-aws.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider to upload files to AWS\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fileupload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/upload-to-aws.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fileupload\n                        \n                    \n                \n            \n            \n                \n                        \n                    fileupload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        Upload a file to AWS\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile to upload\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:43\n                        \n                    \n\n\n            \n                \n                        Generate a new file name\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile to upload\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RequestTimeoutException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport * as path from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Provider to upload files to AWS\n */\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Upload a file to AWS\n   * @param file - File to upload\n   */\n  public async fileupload(file: Express.Multer.File) {\n    const s3 = new S3();\n\n    try {\n      const uploadResult = await s3\n        .upload({\n          Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n          Body: file.buffer,\n          Key: this.generateFileName(file),\n          ContentType: file.mimetype,\n        })\n        .promise();\n\n      // Return the file name\n      return uploadResult.Key;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  /**\n   * Generate a new file name\n   * @param file - File to upload\n   */\n  private generateFileName(file: Express.Multer.File) {\n    // extract file name\n    const name = file.originalname.split('.')[0];\n    // Remove spaces in the file name\n    name.replace(/\\s/g, '').trim();\n    // extract file extension\n    const extension = path.extname(file.originalname);\n    // Generate a timestamp\n    const timeStamp = new Date().getTime().toString().trim();\n    // Return new fileName\n    return `${name}-${timeStamp}-${uuidv4()}${extension}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n            \n                Description\n            \n            \n                Controller for uploads\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('file')@UseInterceptors(undefined)@ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: Upload a new image})@ApiResponse({status: 201, description: 'File uploaded successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/uploads/uploads.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        Upload a file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile to upload\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post } from '@nestjs/common';\nimport { UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { ApiHeaders, ApiTags } from '@nestjs/swagger';\nimport { Express } from 'express';\n\nimport { UploadsService } from './providers/uploads.service';\n\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\n\n/**\n * Controller for uploads\n */\n@ApiBearerAuth()\n@Controller('uploads')\n@ApiTags('Uploads')\nexport class UploadsController {\n  constructor(private readonly uploadsService: UploadsService) {}\n\n  /**\n   * Upload a file\n   * @param file - File to upload\n   */\n  @Post('file')\n  @UseInterceptors(FileInterceptor('file')) // 'file' is the field name\n  @ApiHeaders([\n    { name: 'Content-Type', description: 'multipart/form-data' },\n    { name: 'Authorization', description: 'Bearer Token' },\n  ])\n  @ApiOperation({ summary: `Upload a new image` })\n  @ApiResponse({ status: 201, description: 'File uploaded successfully' })\n  public async uploadFile(@UploadedFile() file: Express.Multer.File) {\n    const data = await this.uploadsService.uploadFile(file);\n    return createSuccessResponse('File uploaded successfully', true, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for uploads\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadToAwsProvider\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Upload } from './upload.entity';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './providers/uploads.service';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\n\n/**\n * Module for uploads\n */\n@Module({\n  controllers: [UploadsController],\n  providers: [UploadsService, UploadToAwsProvider],\n  imports: [TypeOrmModule.forFeature([Upload])],\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/uploads.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for uploads\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadToAwsProvider: UploadToAwsProvider, configService: ConfigService, uploadsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/uploads.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/uploads.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Upload a file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile to upload\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BadRequestException, ConflictException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UploadToAwsProvider } from './upload-to-aws.provider';\nimport { Upload } from '../upload.entity';\nimport { FileTypes } from '../enums/file-types.enum';\nimport { UploadFile } from '../interfaces/upload-file.interface';\n\n/**\n * Service for uploads\n */\n@Injectable()\nexport class UploadsService {\n  constructor(\n    private readonly uploadToAwsProvider: UploadToAwsProvider,\n    private readonly configService: ConfigService,\n    @InjectRepository(Upload)\n    private uploadsRepository: Repository,\n  ) {}\n\n  /**\n   * Upload a file\n   * @param file - File to upload\n   */\n  public async uploadFile(file: Express.Multer.File) {\n    const supportedMimeTypes = [\n      'image/gif',\n      'image/jpeg',\n      'image/jpg',\n      'image/png',\n      'application/pdf',\n    ];\n\n    // throw error for unsupported file types\n    if (!supportedMimeTypes.includes(file.mimetype)) {\n      throw new BadRequestException('MIME type not supported');\n    }\n\n    try {\n      // Upload file to AWS S3 bucket\n      const name = await this.uploadToAwsProvider.fileupload(file);\n      // Generate a new record in upload table\n      const uploadFile: UploadFile = {\n        name,\n        path: `${this.configService.get('appConfig.awsCloudFrontUrl')}/${name}`,\n        type: FileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      };\n      // create an upload\n      const upload = this.uploadsRepository.create(uploadFile);\n      // save the details to database\n      return await this.uploadsRepository.save(upload);\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    Readonly\n                                createdAt\n                            \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                isEmailVerified\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                phoneNumber\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Readonly\n                                updatedAt\n                            \n                            \n                                    \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, claims => claims.author)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, default: undefined})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, default: undefined})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verifyToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { JoinColumn, OneToMany } from 'typeorm';\n\nimport { UserRole } from './enums/user-role.enum';\n\nimport { Claim } from 'src/claims/claim.entity';\n\n/**\n * User Entity\n * @description Represents the schema of a User\n */\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  readonly id: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  readonly firstName: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  lastName: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false, unique: true })\n  readonly email: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: false })\n  readonly phoneNumber: string;\n\n  @Column({ type: 'varchar', length: 96, nullable: true, default: null })\n  @Exclude()\n  readonly password?: string;\n\n  @Column({ type: 'varchar', nullable: true, default: null })\n  @Exclude()\n  googleId?: string;\n\n  @Column({\n    type: 'enum',\n    enum: UserRole,\n    nullable: false,\n    default: UserRole.USER,\n  })\n  role: UserRole;\n\n  @CreateDateColumn()\n  readonly createdAt: Date;\n\n  @UpdateDateColumn()\n  readonly updatedAt: Date;\n\n  @OneToMany(() => Claim, (claims) => claims.author)\n  @JoinColumn()\n  claims: Claim[];\n\n  @Column({ type: 'varchar', length: 96, nullable: true, default: null })\n  verifyToken: string;\n\n  @Column({ type: 'boolean', nullable: false, default: false })\n  isEmailVerified: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.None)@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully'})@ApiBody({required: true, type: CreateUserDto, description: 'User creation details'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Route for handling create user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming POST request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a user'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiParam({name: 'id', required: true, type: String, description: 'User ID', example: '7654f3-3fj3-3fj3-3fj3'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:101\n                        \n                    \n\n\n            \n                \n                        Route for handling delete user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string describing the ID of user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersQueryDto: GetUsersQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all users'})@ApiResponse({status: 200, description: 'Users fetched successfully'})@ApiQuery({name: 'getUsersQueryDto', required: false, type: GetUsersQueryDto, description: 'User Query DTO', example: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Route for handling get users request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUsersQueryDto\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming GET request queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                User[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Update a user'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiBody({required: true, type: PatchUserDto, description: 'User update details'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:80\n                        \n                    \n\n\n            \n                \n                        Route for handling patch user request\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A DTO used to validate incoming PATCH request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                response\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Query } from '@nestjs/common';\nimport { ClassSerializerInterceptor, UseInterceptors } from '@nestjs/common';\nimport { Body, Delete, Get, Patch, Post } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiParam, ApiQuery } from '@nestjs/swagger';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersQueryDto } from './dtos/get-users-query.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\n\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { createSuccessResponse } from 'src/common/response/utils/success-response.util';\n\n/**\n * Controller for users\n */\n@ApiBearerAuth()\n@Controller('users')\n@UseInterceptors(ClassSerializerInterceptor)\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Route for handling create user request\n   * @param createUserDto A DTO used to validate incoming POST request\n   * @example HTTP POST /user\n   * @returns response\n   */\n  @Post()\n  @Auth(AuthType.None)\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully' })\n  @ApiBody({\n    required: true,\n    type: CreateUserDto,\n    description: 'User creation details',\n  })\n  public async createUser(@Body() createUserDto: CreateUserDto) {\n    const user = await this.usersService.create(createUserDto);\n    return createSuccessResponse('User created successfully', true, user);\n  }\n\n  /**\n   * Route for handling get users request\n   * @param getUsersQueryDto A DTO used to validate incoming GET request queries\n   * @example HTTP GET /users\n   * @returns User[]\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ status: 200, description: 'Users fetched successfully' })\n  @ApiQuery({\n    name: 'getUsersQueryDto',\n    required: false,\n    type: GetUsersQueryDto,\n    description: 'User Query DTO',\n    example: { page: 1, limit: 10 },\n  })\n  public getUsers(@Query() getUsersQueryDto: GetUsersQueryDto) {\n    return this.usersService.findAll(getUsersQueryDto);\n  }\n\n  /**\n   * Route for handling patch user request\n   * @param patchUserDto A DTO used to validate incoming PATCH request\n   * @example HTTP PATCH /user\n   * @returns response\n   */\n  @Patch()\n  @ApiOperation({ summary: 'Update a user' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiBody({\n    required: true,\n    type: PatchUserDto,\n    description: 'User update details',\n  })\n  public async patchUser(@Body() patchUserDto: PatchUserDto) {\n    const user = await this.usersService.updateUser(patchUserDto);\n    return createSuccessResponse('User updated successfully', true, user);\n  }\n\n  /**\n   * Route for handling delete user request\n   * @param id string describing the ID of user\n   * @example HTTP DELETE /user/7654f3-3fj3-3fj3-3fj3\n   * @returns response\n   */\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a user' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiParam({\n    name: 'id',\n    required: true,\n    type: String,\n    description: 'User ID',\n    example: '7654f3-3fj3-3fj3-3fj3',\n  })\n  public deleteUser(@Param('id') id: string) {\n    return id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPaginationModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUpdateUserProvider\n\nUpdateUserProvider\n\nUsersModule -->\n\nUpdateUserProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UpdateUserProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport { UpdateUserProvider } from './providers/update-user.provider';\n\nimport { AuthModule } from 'src/auth/auth.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    PaginationModule,\n  ],\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    CreateUserProvider,\n    FindOneUserByEmailProvider,\n    UpdateUserProvider,\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service dealing with users. It is used to provide the user data.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                analytics\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneBy\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                save\n                            \n                            \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createUserProvider: CreateUserProvider, findOneByEmailProvider: FindOneUserByEmailProvider, paginationProvider: PaginationProvider, updateUserProvider: UpdateUserProvider, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateUserProvider\n                                                  \n                                                        \n                                                                        UpdateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        analytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    analytics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:165\n                        \n                    \n\n\n            \n                \n                        The method to get users analytics\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:37\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                newUser\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:134\n                        \n                    \n\n\n            \n                \n                        The method to create a new user using Google OAuth\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: GetUsersQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:46\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetUsersQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GetPostsQueryDto for getting queries\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                User[]\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneBy(operator: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:101\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                operator\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:91\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:124\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by googleId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:67\n                        \n                    \n\n\n            \n                \n                        The method to find a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:182\n                        \n                    \n\n\n            \n                \n                        The method to get users analytics\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(patchUserDto: PatchUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:156\n                        \n                    \n\n\n            \n                \n                        The method to update a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConflictException, NotFoundException } from '@nestjs/common';\nimport { RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOptionsWhere, Repository } from 'typeorm';\n\nimport { CreateUserProvider } from './create-user.provider';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { UpdateUserProvider } from './update-user.provider';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { GetUsersQueryDto } from '../dtos/get-users-query.dto';\nimport { PatchUserDto } from '../dtos/patch-user.dto';\nimport { GoogleUser } from '../interfaces/google-user-interface';\n\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n/**\n * Service dealing with users. It is used to provide the user data.\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    private readonly createUserProvider: CreateUserProvider,\n    private readonly findOneByEmailProvider: FindOneUserByEmailProvider,\n    private readonly paginationProvider: PaginationProvider,\n    private readonly updateUserProvider: UpdateUserProvider,\n    @InjectRepository(User) private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   * @param createUserDto\n   * @returns newUser\n   */\n  public async create(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUser(createUserDto);\n  }\n\n  /**\n   * The method to get all users from the database\n   * @param query GetPostsQueryDto for getting queries\n   * @returns User[]\n   */\n  public async findAll(query: GetUsersQueryDto): Promise> {\n    const { page, limit } = query;\n\n    try {\n      // prettier-ignore\n      const users = await this.paginationProvider.paginateQuery({ limit, page }, this.usersRepository);\n\n      return users;\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n  }\n\n  /**\n   * The method to find a single user by ID\n   * @param id\n   * @returns User\n   * @throws RequestTimeOutException or NotFoundException\n   */\n  public async findOneById(id: string): Promise {\n    let user = undefined;\n\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!user) {\n      throw new NotFoundException('User id does not exist');\n    }\n\n    return user;\n  }\n\n  /**\n   * The method to find a single user by ID\n   * @param id\n   * @returns User\n   * @throws RequestTimeOutException or UnauthorizedException\n   */\n  public async findOneByEmail(email: string): Promise {\n    return await this.findOneByEmailProvider.findOneByEmail(email);\n  }\n\n  /**\n   * The method to find a single user by ID\n   * @param id\n   * @returns User\n   * @throws RequestTimeOutException or NotFoundException\n   */\n  public async findOneBy(operator: FindOptionsWhere) {\n    let user = undefined;\n\n    try {\n      user = await this.usersRepository.findOneBy({ ...operator });\n    } catch (error) {\n      throw new RequestTimeoutException('Unable to process request', {\n        description: 'Database connection error',\n      });\n    }\n\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n\n    return user;\n  }\n\n  /**\n   * The method to find a single user by googleId\n   * @param googleId\n   * @returns User\n   */\n  public async findOneByGoogleId(googleId: string) {\n    return await this.usersRepository.findOneBy({ googleId });\n  }\n\n  /**\n   * The method to create a new user using Google OAuth\n   * @param googleUser\n   * @returns User\n   * @throws ConflictException\n   */\n  public async createGoogleUser(googleUser: GoogleUser) {\n    try {\n      const user = this.usersRepository.create({\n        firstName: googleUser.firstName,\n        lastName: googleUser.lastName,\n        googleId: googleUser.googleId,\n        email: googleUser.email,\n      });\n      return await this.usersRepository.save(user);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'Could not create a new user',\n      });\n    }\n  }\n\n  /**\n   * The method to update a new user in the database\n   * @param patchUserDto\n   * @returns User\n   * @throws RequestTimeoutException or BadRequestException\n   */\n  public updateUser(patchUserDto: PatchUserDto): Promise {\n    return this.updateUserProvider.updateUser(patchUserDto);\n  }\n\n  /**\n   * The method to get users analytics\n   * @returns object\n   * @throws RequestTimeoutException\n   */\n  public async analytics(): Promise {\n    let totalUsers = 0;\n\n    try {\n      totalUsers = await this.usersRepository.count();\n    } catch (error) {\n      throw new RequestTimeoutException('Failed to fetch users count');\n    }\n\n    return totalUsers;\n  }\n\n  /**\n   * The method to get users analytics\n   * @returns object\n   * @throws RequestTimeoutException\n   */\n  public async save(user: User): Promise {\n    try {\n      await this.usersRepository.save(user);\n    } catch (error) {\n      throw new ConflictException('Failed to save user');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyEmailDto.html":{"url":"classes/VerifyEmailDto.html","title":"class - VerifyEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/verify-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, required: true, format: 'email', description: 'The email of the user', example: 'johndoe@example.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/verify-email.dto.ts:18\n                        \n                    \n\n            \n                \n                    The email of the user\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, description: 'The generated token', example: '24735rebufiwt'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/verify-email.dto.ts:31\n                        \n                    \n\n            \n                \n                    The generated token\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class VerifyEmailDto {\n  /**\n   * The email of the user\n   * @example johndoe@example.com\n   */\n  @ApiProperty({\n    type: String,\n    required: true,\n    format: 'email',\n    description: 'The email of the user',\n    example: 'johndoe@example.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  /**\n   * The generated token\n   * @example 24735rebufiwt\n   */\n  @ApiProperty({\n    required: true,\n    description: 'The generated token',\n    example: '24735rebufiwt',\n  })\n  @IsNotEmpty()\n  @IsString()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/admin/providers/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/admin/providers/analytics.provider.ts\n            \n            injectable\n            AnalyticsProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/auth/dtos/verify-email.dto.ts\n            \n            class\n            VerifyEmailDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user.interface.ts\n            \n            interface\n            IActiveUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/login.provider.ts\n            \n            injectable\n            LoginProvider\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-auth.controller.ts\n            \n            controller\n            GoogleAuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-auth.service.ts\n            \n            injectable\n            GoogleAuthService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/claims/claim.entity.ts\n            \n            entity\n            Claim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/claims/claims.controller.ts\n            \n            controller\n            ClaimsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/claims/dtos/create-claim.dto.ts\n            \n            class\n            CreateClaimDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/claims/dtos/get-claims-param.dto.ts\n            \n            class\n            GetClaimsParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/claims/dtos/get-claims-query.dto.ts\n            \n            class\n            GetClaimsBaseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/claims/dtos/get-claims-query.dto.ts\n            \n            class\n            GetClaimsQueryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/claims/dtos/patch-claim.dto.ts\n            \n            class\n            PatchClaimDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/claims/providers/claims.service.ts\n            \n            injectable\n            ClaimsService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/response/interfaces/error-response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/response/interfaces/success-response.interface.ts\n            \n            interface\n            SuccessResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/response/utils/error-response.util.ts\n            \n            function\n            createErrorResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/response/utils/success-response.util.ts\n            \n            function\n            createSuccessResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/environment.validation.ts\n            \n            variable\n            environmentSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/items/dtos/create-item.dto.ts\n            \n            class\n            CreateItemDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/items/dtos/get-items-param.dto.ts\n            \n            class\n            GetItemsParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/items/dtos/get-items-query.dto.ts\n            \n            class\n            GetItemsBaseDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/items/dtos/get-items-query.dto.ts\n            \n            class\n            GetItemsQueryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/items/dtos/patch-item.dto.ts\n            \n            class\n            PatchItemDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/items/item.entity.ts\n            \n            entity\n            Item\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/items/items.controller.ts\n            \n            controller\n            ItemsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/items/providers/items-analytics.provider.ts\n            \n            injectable\n            ItemsAnalyticsProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/items/providers/items.service.ts\n            \n            injectable\n            ItemsService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/mail/mail.controller.ts\n            \n            controller\n            MailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/mail/providers/mailjet.provider.ts\n            \n            injectable\n            MailjetProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/uploads/interfaces/upload-file.interface.ts\n            \n            interface\n            UploadFile\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/uploads/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/uploads/providers/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/uploads/upload.entity.ts\n            \n            entity\n            Upload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-query.dto.ts\n            \n            class\n            GetUsersBaseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-query.dto.ts\n            \n            class\n            GetUsersQueryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user-interface.ts\n            \n            interface\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/update-user.provider.ts\n            \n            injectable\n            UpdateUserProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/utils/index.ts\n            \n            variable\n            generateVerifyToken\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            aws-sdk : ^2.1687.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.14.0\n        \n            joi : ^17.13.3\n        \n            node-mailjet : ^6.0.6\n        \n            nodemailer : ^6.9.15\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            ClaimStatus   (src/.../claimStatus.enum.ts)\n                        \n                        \n                            FileTypes   (src/.../file-types.enum.ts)\n                        \n                        \n                            ItemCategory   (src/.../itemCategory.enum.ts)\n                        \n                        \n                            ItemStatus   (src/.../itemStatus.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/claims/enums/claimStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ClaimStatus\n                    \n                \n                        \n                            \n                                 SUBMITTED\n                            \n                        \n                        \n                            \n                                Value : SUBMITTED\n                            \n                        \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n                        \n                            \n                                 ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : ACCEPTED\n                            \n                        \n                        \n                            \n                                 DECLINED\n                            \n                        \n                        \n                            \n                                Value : DECLINED\n                            \n                        \n            \n        \n\n    src/uploads/enums/file-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n            \n        \n\n    src/items/enums/itemCategory.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ItemCategory\n                    \n                \n                        \n                            \n                                 ELECTRONICS\n                            \n                        \n                        \n                            \n                                Value : ELECTRONICS\n                            \n                        \n                        \n                            \n                                 CLOTHING\n                            \n                        \n                        \n                            \n                                Value : CLOTHING\n                            \n                        \n                        \n                            \n                                 FURNITURE\n                            \n                        \n                        \n                            \n                                Value : FURNITURE\n                            \n                        \n                        \n                            \n                                 BOOKS\n                            \n                        \n                        \n                            \n                                Value : BOOKS\n                            \n                        \n                        \n                            \n                                 JEWELRY\n                            \n                        \n                        \n                            \n                                Value : JEWELRY\n                            \n                        \n                        \n                            \n                                 SPORTS\n                            \n                        \n                        \n                            \n                                Value : SPORTS\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : OTHER\n                            \n                        \n            \n        \n\n    src/items/enums/itemStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ItemStatus\n                    \n                \n                        \n                            \n                                 ARCHIVED\n                            \n                        \n                        \n                            \n                                Value : ARCHIVED\n                            \n                        \n                        \n                            \n                                 CLAIMED\n                            \n                        \n                        \n                            \n                                Value : CLAIMED\n                            \n                        \n                        \n                            \n                                 UNCLAIMED\n                            \n                        \n                        \n                            \n                                Value : UNCLAIMED\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : PROCESSING\n                            \n                        \n            \n        \n\n    src/users/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createErrorResponse   (src/.../error-response.util.ts)\n                        \n                        \n                            createSuccessResponse   (src/.../success-response.util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Main function to bootstrap the application\n\n\n                \n            \n        \n    \n    src/common/response/utils/error-response.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createErrorResponse\n                        \n                    \n                \n            \n            \n                \ncreateErrorResponse(error: string, message: string, statusCode: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ErrorResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/response/utils/success-response.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSuccessResponse\n                        \n                    \n                \n            \n            \n                \ncreateSuccessResponse(message: string, success: boolean, data: T)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                success\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SuccessResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ItemsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ClaimsModule\n\n\n\ncluster_ClaimsModule_exports\n\n\n\ncluster_ClaimsModule_providers\n\n\n\ncluster_ItemsModule\n\n\n\ncluster_ItemsModule_exports\n\n\n\ncluster_ItemsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nClaimsModule\n\nClaimsModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nClaimsModule->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nClaimsModule->AppModule\n\n\n\n\n\nClaimsService \n\nClaimsService \n\nClaimsService  -->\n\nClaimsModule->ClaimsService \n\n\n\n\n\nItemsModule\n\nItemsModule\n\nClaimsModule -->\n\nItemsModule->ClaimsModule\n\n\n\nAdminModule -->\n\nItemsModule->AdminModule\n\n\n\nAppModule -->\n\nItemsModule->AppModule\n\n\n\n\n\nItemsService \n\nItemsService \n\nItemsService  -->\n\nItemsModule->ItemsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nClaimsModule -->\n\nPaginationModule->ClaimsModule\n\n\n\nItemsModule -->\n\nPaginationModule->ItemsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPaginationModule->UsersModule\n\n\n\nAdminModule -->\n\nPaginationModule->AdminModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nClaimsModule -->\n\nUsersModule->ClaimsModule\n\n\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAnalyticsProvider\n\nAnalyticsProvider\n\nAdminModule -->\n\nAnalyticsProvider->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailjetProvider \n\nMailjetProvider \n\nMailjetProvider  -->\n\nMailModule->MailjetProvider \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthService\n\nGoogleAuthService\n\nAuthModule -->\n\nGoogleAuthService->AuthModule\n\n\n\n\n\nLoginProvider\n\nLoginProvider\n\nAuthModule -->\n\nLoginProvider->AuthModule\n\n\n\n\n\nClaimsService\n\nClaimsService\n\nClaimsModule -->\n\nClaimsService->ClaimsModule\n\n\n\n\n\nItemsService\n\nItemsService\n\nItemsModule -->\n\nItemsService->ItemsModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMailjetProvider\n\nMailjetProvider\n\nMailModule -->\n\nMailjetProvider->MailModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUpdateUserProvider\n\nUpdateUserProvider\n\nUsersModule -->\n\nUpdateUserProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    23 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            environmentSchema   (src/.../environment.validation.ts)\n                        \n                        \n                            generateVerifyToken   (src/.../index.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof IActiveUser | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Active user decorator\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    Decorator for setting the auth type\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/config/environment.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environmentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Joi.ObjectSchema\n\n                    \n                \n                \n                    \n                        Default value : Joi.object({\n  NODE_ENV: Joi.string()\n    .valid('development', 'production', 'test', 'staging')\n    .required()\n    .default('development'),\n  PORT: Joi.number().port().default(3000),\n  DATABASE_PORT: Joi.number().port().default(5432),\n  DATABASE_HOST: Joi.string().required(),\n  DATABASE_USER: Joi.string().required(),\n  DATABASE_PASSWORD: Joi.string().required(),\n  DATABASE_NAME: Joi.string().required(),\n  JWT_SECRET: Joi.string().required(),\n  JWT_TOKEN_AUDIENCE: Joi.string().required(),\n  JWT_TOKEN_ISSUER: Joi.string().required(),\n  JWT_ACCESS_TOKEN_TTL: Joi.number().default(3600),\n  JWT_REFRESH_TOKEN_TTL: Joi.number().default(86400),\n  GOOGLE_CLIENT_ID: Joi.string().required(),\n  GOOGLE_CLIENT_SECRET: Joi.string().required(),\n  API_VERSION: Joi.string().required(),\n  AWS_PUBLIC_BUCKET_NAME: Joi.string().required(),\n  AWS_REGION: Joi.string().required(),\n  AWS_CLOUDFRONT_URL: Joi.string().required(),\n  AWS_ACCESS_KEY_ID: Joi.string().required(),\n  AWS_SECRET_ACCESS_KEY: Joi.string().required(),\n  MAIL_HOST: Joi.string().required(),\n  MAIL_PORT: Joi.number().port().default(2525),\n  MAIL_FROM: Joi.string().required(),\n  MAILJET_API_KEY: Joi.string().required(),\n  MAILJET_SECRET_KEY: Joi.string().required(),\n})\n                    \n                \n\n            \n                \n                    Define the environment variables schema\n\n                \n            \n\n        \n    \n\n    src/utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateVerifyToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (length: number) => {\n  const characters =\n    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';\n  let result = '';\n  const charactersLength = characters.length;\n\n  for (let i = 0; i \n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
